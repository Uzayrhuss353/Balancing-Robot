
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080054a0  080054a0  000064a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005660  08005660  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005660  08005660  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005668  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  080056d0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080056d0  000072ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5ac  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f72  00000000  00000000  0001363d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000155b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af4  00000000  00000000  000163c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019470  00000000  00000000  00016eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c67  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091abc  00000000  00000000  00040f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  000d2a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d6f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005488 	.word	0x08005488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005488 	.word	0x08005488

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fd57 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f81b 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 f921 	bl	80011ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000faa:	f000 f867 	bl	800107c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fae:	f000 f8a3 	bl	80010f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fb2:	f000 f8cf 	bl	8001154 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  mpu6050_init();
 8000fb6:	f000 f95d 	bl	8001274 <mpu6050_init>
  HAL_TIM_Base_Start(&htim2);
 8000fba:	4807      	ldr	r0, [pc, #28]	@ (8000fd8 <main+0x40>)
 8000fbc:	f003 f8ea 	bl	8004194 <HAL_TIM_Base_Start>

  float value = 0;
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value = mpu6050_read();
 8000fc6:	f000 f9ef 	bl	80013a8 <mpu6050_read>
 8000fca:	6078      	str	r0, [r7, #4]
	  HAL_Delay(10);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f000 fda1 	bl	8001b14 <HAL_Delay>
	  value = mpu6050_read();
 8000fd2:	bf00      	nop
 8000fd4:	e7f7      	b.n	8000fc6 <main+0x2e>
 8000fd6:	bf00      	nop
 8000fd8:	20000108 	.word	0x20000108

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe6:	2228      	movs	r2, #40	@ 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fd32 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fbb5 	bl	8003790 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800102c:	f000 f91c 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fe22 	bl	8003c94 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001056:	f000 f907 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800105a:	2302      	movs	r3, #2
 800105c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f002 ff8f 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001070:	f000 f8fa 	bl	8001268 <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	3750      	adds	r7, #80	@ 0x50
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <MX_ADC1_Init+0x74>)
 800108e:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <MX_ADC1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001092:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_ADC1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_ADC1_Init+0x74>)
 800109a:	2201      	movs	r2, #1
 800109c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010a6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b8:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010ba:	f000 fd4f 	bl	8001b5c <HAL_ADC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f8d0 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c8:	2309      	movs	r3, #9
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_ADC1_Init+0x74>)
 80010da:	f000 fe17 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010e4:	f000 f8c0 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000084 	.word	0x20000084
 80010f4:	40012400 	.word	0x40012400

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f001 f9a3 	bl	8002480 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f892 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000b4 	.word	0x200000b4
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <MX_TIM2_Init+0x94>)
 8001172:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001176:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_TIM2_Init+0x94>)
 800117a:	2207      	movs	r2, #7
 800117c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_TIM2_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_TIM2_Init+0x94>)
 8001186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_TIM2_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <MX_TIM2_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001198:	4813      	ldr	r0, [pc, #76]	@ (80011e8 <MX_TIM2_Init+0x94>)
 800119a:	f002 ffab 	bl	80040f4 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a4:	f000 f860 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <MX_TIM2_Init+0x94>)
 80011b6:	f003 f837 	bl	8004228 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011c0:	f000 f852 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_TIM2_Init+0x94>)
 80011d2:	f003 f9e9 	bl	80045a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f844 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000108 	.word	0x20000108

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_GPIO_Init+0x74>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a16      	ldr	r2, [pc, #88]	@ (8001260 <MX_GPIO_Init+0x74>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_GPIO_Init+0x74>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_GPIO_Init+0x74>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <MX_GPIO_Init+0x74>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_GPIO_Init+0x74>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	21a0      	movs	r1, #160	@ 0xa0
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <MX_GPIO_Init+0x78>)
 8001236:	f001 f90b 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800123a:	23a0      	movs	r3, #160	@ 0xa0
 800123c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_GPIO_Init+0x78>)
 8001252:	f000 ff79 	bl	8002148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010800 	.word	0x40010800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <mpu6050_init>:
#define REG_DATA_ACC 0x3B
#define REG_DATA_GYRO 0x43

#define GYRO_WEIGHT 0.96 // Weight for gyroscope data in complementary filter

void mpu6050_init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // Check if the device is ready
    ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1), 1, 100);
 800127a:	2364      	movs	r3, #100	@ 0x64
 800127c:	2201      	movs	r2, #1
 800127e:	21d0      	movs	r1, #208	@ 0xd0
 8001280:	483d      	ldr	r0, [pc, #244]	@ (8001378 <mpu6050_init+0x104>)
 8001282:	f001 fda3 	bl	8002dcc <HAL_I2C_IsDeviceReady>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d103      	bne.n	8001298 <mpu6050_init+0x24>
        printf("The device is ready\n");
 8001290:	483a      	ldr	r0, [pc, #232]	@ (800137c <mpu6050_init+0x108>)
 8001292:	f003 faff 	bl	8004894 <puts>
 8001296:	e002      	b.n	800129e <mpu6050_init+0x2a>
    } else {
        printf("The device is not ready. Check cables \n");
 8001298:	4839      	ldr	r0, [pc, #228]	@ (8001380 <mpu6050_init+0x10c>)
 800129a:	f003 fafb 	bl	8004894 <puts>
    }

    // Wake up the MPU6050 by writing 0 to the power management register
    uint8_t temp_data = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_PWR_MGMT_1, 1, &temp_data, 1, 100);
 80012a2:	2364      	movs	r3, #100	@ 0x64
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	226b      	movs	r2, #107	@ 0x6b
 80012b2:	21d0      	movs	r1, #208	@ 0xd0
 80012b4:	4830      	ldr	r0, [pc, #192]	@ (8001378 <mpu6050_init+0x104>)
 80012b6:	f001 fa27 	bl	8002708 <HAL_I2C_Mem_Write>
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <mpu6050_init+0x58>
        printf("Exiting from sleep mode\n");
 80012c4:	482f      	ldr	r0, [pc, #188]	@ (8001384 <mpu6050_init+0x110>)
 80012c6:	f003 fae5 	bl	8004894 <puts>
 80012ca:	e002      	b.n	80012d2 <mpu6050_init+0x5e>
    } else {
        printf("Failed to exit sleep mode \n");
 80012cc:	482e      	ldr	r0, [pc, #184]	@ (8001388 <mpu6050_init+0x114>)
 80012ce:	f003 fae1 	bl	8004894 <puts>
    }

    // Configure gyroscope sensitivity
    temp_data = 0x00; // Full scale range of ±250°/s
 80012d2:	2300      	movs	r3, #0
 80012d4:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	1dbb      	adds	r3, r7, #6
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	221b      	movs	r2, #27
 80012e6:	21d0      	movs	r1, #208	@ 0xd0
 80012e8:	4823      	ldr	r0, [pc, #140]	@ (8001378 <mpu6050_init+0x104>)
 80012ea:	f001 fa0d 	bl	8002708 <HAL_I2C_Mem_Write>
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <mpu6050_init+0x8c>
        printf("Configuring gyroscope \n");
 80012f8:	4824      	ldr	r0, [pc, #144]	@ (800138c <mpu6050_init+0x118>)
 80012fa:	f003 facb 	bl	8004894 <puts>
 80012fe:	e002      	b.n	8001306 <mpu6050_init+0x92>
    } else {
        printf("Failed to configure gyroscope \n");
 8001300:	4823      	ldr	r0, [pc, #140]	@ (8001390 <mpu6050_init+0x11c>)
 8001302:	f003 fac7 	bl	8004894 <puts>
    }

    // Configure accelerometer sensitivity
    temp_data = 0x00; // Full scale range of ±2g
 8001306:	2300      	movs	r3, #0
 8001308:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 800130a:	2364      	movs	r3, #100	@ 0x64
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	221c      	movs	r2, #28
 800131a:	21d0      	movs	r1, #208	@ 0xd0
 800131c:	4816      	ldr	r0, [pc, #88]	@ (8001378 <mpu6050_init+0x104>)
 800131e:	f001 f9f3 	bl	8002708 <HAL_I2C_Mem_Write>
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <mpu6050_init+0xc0>
        printf("Configuring accelerometer \n");
 800132c:	4819      	ldr	r0, [pc, #100]	@ (8001394 <mpu6050_init+0x120>)
 800132e:	f003 fab1 	bl	8004894 <puts>
 8001332:	e002      	b.n	800133a <mpu6050_init+0xc6>
    } else {
        printf("Failed to configure accelerometer \n");
 8001334:	4818      	ldr	r0, [pc, #96]	@ (8001398 <mpu6050_init+0x124>)
 8001336:	f003 faad 	bl	8004894 <puts>
    }

    // Disable sleep mode (already done above, so this might be redundant)
    temp_data = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_USR_CTRL, 1, &temp_data, 1, 100);
 800133e:	2364      	movs	r3, #100	@ 0x64
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	226a      	movs	r2, #106	@ 0x6a
 800134e:	21d0      	movs	r1, #208	@ 0xd0
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <mpu6050_init+0x104>)
 8001352:	f001 f9d9 	bl	8002708 <HAL_I2C_Mem_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <mpu6050_init+0xf4>
        printf("Disabling sleep mode\n");
 8001360:	480e      	ldr	r0, [pc, #56]	@ (800139c <mpu6050_init+0x128>)
 8001362:	f003 fa97 	bl	8004894 <puts>
    } else {
        printf("Failed to disable sleep mode \n");
    }
}
 8001366:	e002      	b.n	800136e <mpu6050_init+0xfa>
        printf("Failed to disable sleep mode \n");
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <mpu6050_init+0x12c>)
 800136a:	f003 fa93 	bl	8004894 <puts>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000b4 	.word	0x200000b4
 800137c:	080054a0 	.word	0x080054a0
 8001380:	080054b4 	.word	0x080054b4
 8001384:	080054dc 	.word	0x080054dc
 8001388:	080054f4 	.word	0x080054f4
 800138c:	08005510 	.word	0x08005510
 8001390:	08005528 	.word	0x08005528
 8001394:	08005548 	.word	0x08005548
 8001398:	08005564 	.word	0x08005564
 800139c:	08005588 	.word	0x08005588
 80013a0:	080055a0 	.word	0x080055a0
 80013a4:	00000000 	.word	0x00000000

080013a8 <mpu6050_read>:

float mpu6050_read(){
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b092      	sub	sp, #72	@ 0x48
 80013ac:	af04      	add	r7, sp, #16
    float pitch;

    static float pitch_gyro_prev = 0.0;

    // Read accelerometer data
    HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1), REG_DATA_ACC, 1, data, 6, 100);
 80013ae:	2364      	movs	r3, #100	@ 0x64
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2306      	movs	r3, #6
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	463b      	mov	r3, r7
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	223b      	movs	r2, #59	@ 0x3b
 80013be:	21d0      	movs	r1, #208	@ 0xd0
 80013c0:	48ab      	ldr	r0, [pc, #684]	@ (8001670 <mpu6050_read+0x2c8>)
 80013c2:	f001 fa9b 	bl	80028fc <HAL_I2C_Mem_Read>
    x_acc = ((int16_t)((data[0] << 8) | data[1])) / 16384.0;
 80013c6:	783b      	ldrb	r3, [r7, #0]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f80d 	bl	80003f4 <__aeabi_i2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4ba5      	ldr	r3, [pc, #660]	@ (8001674 <mpu6050_read+0x2cc>)
 80013e0:	f7ff f99c 	bl	800071c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fb06 	bl	80009fc <__aeabi_d2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
    y_acc = ((int16_t)((data[2] << 8) | data[3])) / 16384.0;
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe fff6 	bl	80003f4 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b99      	ldr	r3, [pc, #612]	@ (8001674 <mpu6050_read+0x2cc>)
 800140e:	f7ff f985 	bl	800071c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff faef 	bl	80009fc <__aeabi_d2f>
 800141e:	4603      	mov	r3, r0
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
    z_acc = ((int16_t)((data[4] << 8) | data[5])) / 16384.0;
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ffdf 	bl	80003f4 <__aeabi_i2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b8e      	ldr	r3, [pc, #568]	@ (8001674 <mpu6050_read+0x2cc>)
 800143c:	f7ff f96e 	bl	800071c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fad8 	bl	80009fc <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Calculate pitch angle based on accelerometer data
    float pitch_acc = atan2(y_acc, z_acc) * (180.0 / M_PI) + 1.58;  // Convert to degrees
 8001450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001452:	f7fe ffe1 	bl	8000418 <__aeabi_f2d>
 8001456:	4604      	mov	r4, r0
 8001458:	460d      	mov	r5, r1
 800145a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800145c:	f7fe ffdc 	bl	8000418 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f003 fda2 	bl	8004fb0 <atan2>
 800146c:	a372      	add	r3, pc, #456	@ (adr r3, 8001638 <mpu6050_read+0x290>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f829 	bl	80004c8 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	a370      	add	r3, pc, #448	@ (adr r3, 8001640 <mpu6050_read+0x298>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fe6a 	bl	800015c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fab4 	bl	80009fc <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
    //float pitch_acc = (atan(-1 * x_acc / sqrt(pow(y_acc, 2) + pow(z_acc, 2))) * 180 / M_PI) + 1.58;
    // Read gyroscope data
    HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1), REG_DATA_GYRO, 1, data, 6, 100);
 8001498:	2364      	movs	r3, #100	@ 0x64
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	2306      	movs	r3, #6
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	463b      	mov	r3, r7
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	2243      	movs	r2, #67	@ 0x43
 80014a8:	21d0      	movs	r1, #208	@ 0xd0
 80014aa:	4871      	ldr	r0, [pc, #452]	@ (8001670 <mpu6050_read+0x2c8>)
 80014ac:	f001 fa26 	bl	80028fc <HAL_I2C_Mem_Read>
    x_gyro = ((int16_t)((data[0] << 8) | data[1])) / 131.0;
 80014b0:	783b      	ldrb	r3, [r7, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ff98 	bl	80003f4 <__aeabi_i2d>
 80014c4:	a360      	add	r3, pc, #384	@ (adr r3, 8001648 <mpu6050_read+0x2a0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f927 	bl	800071c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fa91 	bl	80009fc <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
    y_gyro = ((int16_t)((data[2] << 8) | data[3])) / 131.0;
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff81 	bl	80003f4 <__aeabi_i2d>
 80014f2:	a355      	add	r3, pc, #340	@ (adr r3, 8001648 <mpu6050_read+0x2a0>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f910 	bl	800071c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fa7a 	bl	80009fc <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	623b      	str	r3, [r7, #32]
    z_gyro = ((int16_t)((data[4] << 8) | data[5])) / 131.0;
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	797b      	ldrb	r3, [r7, #5]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff6a 	bl	80003f4 <__aeabi_i2d>
 8001520:	a349      	add	r3, pc, #292	@ (adr r3, 8001648 <mpu6050_read+0x2a0>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f8f9 	bl	800071c <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fa63 	bl	80009fc <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	61fb      	str	r3, [r7, #28]

    // Optional: Correct the outputs with the calculated error values (if calibration is performed)

    x_gyro += 0.56;
 800153a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800153c:	f7fe ff6c 	bl	8000418 <__aeabi_f2d>
 8001540:	a343      	add	r3, pc, #268	@ (adr r3, 8001650 <mpu6050_read+0x2a8>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7fe fe09 	bl	800015c <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa53 	bl	80009fc <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
    y_gyro -= 2;
 800155a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800155e:	6a38      	ldr	r0, [r7, #32]
 8001560:	f7ff faa0 	bl	8000aa4 <__aeabi_fsub>
 8001564:	4603      	mov	r3, r0
 8001566:	623b      	str	r3, [r7, #32]
    z_gyro += 0.79;
 8001568:	69f8      	ldr	r0, [r7, #28]
 800156a:	f7fe ff55 	bl	8000418 <__aeabi_f2d>
 800156e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001658 <mpu6050_read+0x2b0>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe fdf2 	bl	800015c <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa3c 	bl	80009fc <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	61fb      	str	r3, [r7, #28]

    // Get the current time from the timer
    current_time = HAL_GetTick();  // Get current time in milliseconds
 8001588:	f000 faba 	bl	8001b00 <HAL_GetTick>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb3a 	bl	8000c08 <__aeabi_ui2f>
 8001594:	4603      	mov	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]
    delta_time = current_time - previous_time;
 8001598:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <mpu6050_read+0x2d0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb33 	bl	8000c08 <__aeabi_ui2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4619      	mov	r1, r3
 80015a6:	69b8      	ldr	r0, [r7, #24]
 80015a8:	f7ff fa7c 	bl	8000aa4 <__aeabi_fsub>
 80015ac:	4603      	mov	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]
    previous_time = current_time;
 80015b0:	69b8      	ldr	r0, [r7, #24]
 80015b2:	f7ff fcd1 	bl	8000f58 <__aeabi_f2uiz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001678 <mpu6050_read+0x2d0>)
 80015ba:	6013      	str	r3, [r2, #0]
    delta_time_seconds = delta_time / 1000.0;  // Convert milliseconds to seconds
 80015bc:	492f      	ldr	r1, [pc, #188]	@ (800167c <mpu6050_read+0x2d4>)
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff fc2e 	bl	8000e20 <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

    // Calculate pitch from gyroscope
    float pitch_gyro = pitch_gyro_prev + (y_gyro * delta_time_seconds);
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	6a38      	ldr	r0, [r7, #32]
 80015cc:	f7ff fb74 	bl	8000cb8 <__aeabi_fmul>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <mpu6050_read+0x2d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f7ff fa64 	bl	8000aa8 <__addsf3>
 80015e0:	4603      	mov	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]

    // Store the previous pitch_gyro for the next iteration
    pitch_gyro_prev = pitch_gyro;
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <mpu6050_read+0x2d8>)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6013      	str	r3, [r2, #0]

    // Combine accelerometer and gyroscope pitch using a complementary filter
    pitch = GYRO_WEIGHT * pitch_gyro + (1.0 - GYRO_WEIGHT) * pitch_acc;
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7fe ff14 	bl	8000418 <__aeabi_f2d>
 80015f0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001660 <mpu6050_read+0x2b8>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe ff67 	bl	80004c8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4614      	mov	r4, r2
 8001600:	461d      	mov	r5, r3
 8001602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001604:	f7fe ff08 	bl	8000418 <__aeabi_f2d>
 8001608:	a317      	add	r3, pc, #92	@ (adr r3, 8001668 <mpu6050_read+0x2c0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ff5b 	bl	80004c8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7fe fd9f 	bl	800015c <__adddf3>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff f9e9 	bl	80009fc <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	60bb      	str	r3, [r7, #8]

    return pitch;
 800162e:	68bb      	ldr	r3, [r7, #8]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3738      	adds	r7, #56	@ 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}
 8001638:	1a63c1f8 	.word	0x1a63c1f8
 800163c:	404ca5dc 	.word	0x404ca5dc
 8001640:	147ae148 	.word	0x147ae148
 8001644:	3ff947ae 	.word	0x3ff947ae
 8001648:	00000000 	.word	0x00000000
 800164c:	40606000 	.word	0x40606000
 8001650:	1eb851ec 	.word	0x1eb851ec
 8001654:	3fe1eb85 	.word	0x3fe1eb85
 8001658:	147ae148 	.word	0x147ae148
 800165c:	3fe947ae 	.word	0x3fe947ae
 8001660:	eb851eb8 	.word	0xeb851eb8
 8001664:	3feeb851 	.word	0x3feeb851
 8001668:	47ae1480 	.word	0x47ae1480
 800166c:	3fa47ae1 	.word	0x3fa47ae1
 8001670:	200000b4 	.word	0x200000b4
 8001674:	40d00000 	.word	0x40d00000
 8001678:	20000150 	.word	0x20000150
 800167c:	447a0000 	.word	0x447a0000
 8001680:	20000154 	.word	0x20000154

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_MspInit+0x60>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_MspInit+0x60>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000

080016e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <HAL_ADC_MspInit+0x6c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d121      	bne.n	800174c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_ADC_MspInit+0x70>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001738:	2302      	movs	r3, #2
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173c:	2303      	movs	r3, #3
 800173e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_ADC_MspInit+0x74>)
 8001748:	f000 fcfe 	bl	8002148 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40012400 	.word	0x40012400
 8001758:	40021000 	.word	0x40021000
 800175c:	40010c00 	.word	0x40010c00

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <HAL_I2C_MspInit+0x70>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d123      	bne.n	80017c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001798:	23c0      	movs	r3, #192	@ 0xc0
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179c:	2312      	movs	r3, #18
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <HAL_I2C_MspInit+0x78>)
 80017ac:	f000 fccc 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ec:	d10b      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_TIM_Base_MspInit+0x34>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_TIM_Base_MspInit+0x34>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_TIM_Base_MspInit+0x34>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f93a 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <ITM_SendChar+0x44>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <ITM_SendChar+0x44>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <ITM_SendChar+0x48>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <ITM_SendChar+0x48>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800188e:	bf00      	nop
 8001890:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f8      	beq.n	8001890 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800189e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	e000edfc 	.word	0xe000edfc
 80018b4:	e0000e00 	.word	0xe0000e00

080018b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
  }

  return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ffad 	bl	800186c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
  }
  return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001950:	605a      	str	r2, [r3, #4]
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f003 f898 	bl	8004af0 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20005000 	.word	0x20005000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000158 	.word	0x20000158
 80019f4:	200002b0 	.word	0x200002b0

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fff8 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a20:	4c09      	ldr	r4, [pc, #36]	@ (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f003 f865 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff fab1 	bl	8000f98 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a40:	08005668 	.word	0x08005668
  ldr r2, =_sbss
 8001a44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a48:	200002ac 	.word	0x200002ac

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fb3d 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fe0a 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fb47 	bl	800212e <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 fb1d 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	@ (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a03      	ldr	r2, [pc, #12]	@ (8001afc <HAL_IncTick+0x20>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000015c 	.word	0x2000015c

08001b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	@ (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	2000015c 	.word	0x2000015c

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffe0 	bl	8001b00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0be      	b.n	8001cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fda4 	bl	80016e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f9ab 	bl	8001efc <ADC_ConversionStop_Disable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 8099 	bne.w	8001cea <HAL_ADC_Init+0x18e>
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8095 	bne.w	8001cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	f043 0202 	orr.w	r2, r3, #2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b1b      	ldrb	r3, [r3, #12]
 8001be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf4:	d003      	beq.n	8001bfe <HAL_ADC_Init+0xa2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_ADC_Init+0xa8>
 8001bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_Init+0xaa>
 8001c04:	2300      	movs	r3, #0
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d1b      	ldrb	r3, [r3, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d119      	bne.n	8001c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7b1b      	ldrb	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	035a      	lsls	r2, r3, #13
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e00b      	b.n	8001c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_ADC_Init+0x1a8>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c78:	d003      	beq.n	8001c82 <HAL_ADC_Init+0x126>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_ADC_Init+0x1ac>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc6:	e018      	b.n	8001cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	f023 0312 	bic.w	r3, r3, #18
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce8:	e007      	b.n	8001cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	ffe1f7fd 	.word	0xffe1f7fd
 8001d08:	ff1f0efe 	.word	0xff1f0efe

08001d0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0dc      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x1da>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b06      	cmp	r3, #6
 8001d3a:	d81c      	bhi.n	8001d76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b05      	subs	r3, #5
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4019      	ands	r1, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b05      	subs	r3, #5
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d74:	e03c      	b.n	8001df0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d81c      	bhi.n	8001db8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b23      	subs	r3, #35	@ 0x23
 8001d90:	221f      	movs	r2, #31
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4019      	ands	r1, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	3b23      	subs	r3, #35	@ 0x23
 8001daa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db6:	e01b      	b.n	8001df0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b41      	subs	r3, #65	@ 0x41
 8001dca:	221f      	movs	r2, #31
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4019      	ands	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b41      	subs	r3, #65	@ 0x41
 8001de4:	fa00 f203 	lsl.w	r2, r0, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b09      	cmp	r3, #9
 8001df6:	d91c      	bls.n	8001e32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68d9      	ldr	r1, [r3, #12]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	3b1e      	subs	r3, #30
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6898      	ldr	r0, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	3b1e      	subs	r3, #30
 8001e24:	fa00 f203 	lsl.w	r2, r0, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	e019      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6919      	ldr	r1, [r3, #16]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4019      	ands	r1, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6898      	ldr	r0, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d003      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e72:	2b11      	cmp	r3, #17
 8001e74:	d132      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d125      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d126      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d11a      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	0c9a      	lsrs	r2, r3, #18
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x1b2>
 8001eca:	e007      	b.n	8001edc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40012400 	.word	0x40012400
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d12e      	bne.n	8001f74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f26:	f7ff fdeb 	bl	8001b00 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2c:	e01b      	b.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2e:	f7ff fde7 	bl	8001b00 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d914      	bls.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10d      	bne.n	8001f66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d0dc      	beq.n	8001f2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	@ (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	@ (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff90 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff49 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff5e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffb0 	bl	800209c <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	@ 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e169      	b.n	8002430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8158 	bne.w	800242a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a9a      	ldr	r2, [pc, #616]	@ (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d05e      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002184:	4a98      	ldr	r2, [pc, #608]	@ (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d875      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 800218a:	4a98      	ldr	r2, [pc, #608]	@ (80023ec <HAL_GPIO_Init+0x2a4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d058      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002190:	4a96      	ldr	r2, [pc, #600]	@ (80023ec <HAL_GPIO_Init+0x2a4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d86f      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 8002196:	4a96      	ldr	r2, [pc, #600]	@ (80023f0 <HAL_GPIO_Init+0x2a8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d052      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 800219c:	4a94      	ldr	r2, [pc, #592]	@ (80023f0 <HAL_GPIO_Init+0x2a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d869      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021a2:	4a94      	ldr	r2, [pc, #592]	@ (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04c      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021a8:	4a92      	ldr	r2, [pc, #584]	@ (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d863      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ae:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d046      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021b4:	4a90      	ldr	r2, [pc, #576]	@ (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d85d      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d82a      	bhi.n	8002214 <HAL_GPIO_Init+0xcc>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d859      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021c2:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <HAL_GPIO_Init+0x80>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002243 	.word	0x08002243
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	0800222f 	.word	0x0800222f
 80021d4:	08002271 	.word	0x08002271
 80021d8:	08002277 	.word	0x08002277
 80021dc:	08002277 	.word	0x08002277
 80021e0:	08002277 	.word	0x08002277
 80021e4:	08002277 	.word	0x08002277
 80021e8:	08002277 	.word	0x08002277
 80021ec:	08002277 	.word	0x08002277
 80021f0:	08002277 	.word	0x08002277
 80021f4:	08002277 	.word	0x08002277
 80021f8:	08002277 	.word	0x08002277
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002277 	.word	0x08002277
 8002204:	08002277 	.word	0x08002277
 8002208:	08002277 	.word	0x08002277
 800220c:	08002225 	.word	0x08002225
 8002210:	08002239 	.word	0x08002239
 8002214:	4a79      	ldr	r2, [pc, #484]	@ (80023fc <HAL_GPIO_Init+0x2b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e029      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e024      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01f      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e01a      	b.n	8002278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e013      	b.n	8002278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e009      	b.n	8002278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e003      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x130>
          break;
 8002276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d801      	bhi.n	8002282 <HAL_GPIO_Init+0x13a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_Init+0x13e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	@ 0xff
 800228c:	d802      	bhi.n	8002294 <HAL_GPIO_Init+0x14c>
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x152>
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	3b08      	subs	r3, #8
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	210f      	movs	r1, #15
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80b1 	beq.w	800242a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_GPIO_Init+0x2b8>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e0:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <HAL_GPIO_Init+0x2bc>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	@ (8002408 <HAL_GPIO_Init+0x2c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x1ec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3f      	ldr	r2, [pc, #252]	@ (800240c <HAL_GPIO_Init+0x2c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1e8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3e      	ldr	r2, [pc, #248]	@ (8002410 <HAL_GPIO_Init+0x2c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1e4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	@ (8002414 <HAL_GPIO_Init+0x2cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1e0>
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002328:	2304      	movs	r3, #4
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002334:	2300      	movs	r3, #0
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	492f      	ldr	r1, [pc, #188]	@ (8002404 <HAL_GPIO_Init+0x2bc>)
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	492c      	ldr	r1, [pc, #176]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4928      	ldr	r1, [pc, #160]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002388:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4922      	ldr	r1, [pc, #136]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	491e      	ldr	r1, [pc, #120]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4918      	ldr	r1, [pc, #96]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4914      	ldr	r1, [pc, #80]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	490e      	ldr	r1, [pc, #56]	@ (8002418 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e021      	b.n	800242a <HAL_GPIO_Init+0x2e2>
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_GPIO_Init+0x304>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4909      	ldr	r1, [pc, #36]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002426:	4013      	ands	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f47f ae8e 	bne.w	800215c <HAL_GPIO_Init+0x14>
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	372c      	adds	r7, #44	@ 0x2c
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e12b      	b.n	80026ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff f95a 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	@ 0x24
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e4:	f001 fd1e 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 80024e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a81      	ldr	r2, [pc, #516]	@ (80026f4 <HAL_I2C_Init+0x274>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d807      	bhi.n	8002504 <HAL_I2C_Init+0x84>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a80      	ldr	r2, [pc, #512]	@ (80026f8 <HAL_I2C_Init+0x278>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bf94      	ite	ls
 80024fc:	2301      	movls	r3, #1
 80024fe:	2300      	movhi	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e006      	b.n	8002512 <HAL_I2C_Init+0x92>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a7d      	ldr	r2, [pc, #500]	@ (80026fc <HAL_I2C_Init+0x27c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0e7      	b.n	80026ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a78      	ldr	r2, [pc, #480]	@ (8002700 <HAL_I2C_Init+0x280>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	0c9b      	lsrs	r3, r3, #18
 8002524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a6a      	ldr	r2, [pc, #424]	@ (80026f4 <HAL_I2C_Init+0x274>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d802      	bhi.n	8002554 <HAL_I2C_Init+0xd4>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	e009      	b.n	8002568 <HAL_I2C_Init+0xe8>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	4a69      	ldr	r2, [pc, #420]	@ (8002704 <HAL_I2C_Init+0x284>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	3301      	adds	r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800257a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	495c      	ldr	r1, [pc, #368]	@ (80026f4 <HAL_I2C_Init+0x274>)
 8002584:	428b      	cmp	r3, r1
 8002586:	d819      	bhi.n	80025bc <HAL_I2C_Init+0x13c>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e59      	subs	r1, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fbb1 f3f3 	udiv	r3, r1, r3
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800259c:	400b      	ands	r3, r1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_I2C_Init+0x138>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e59      	subs	r1, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b6:	e051      	b.n	800265c <HAL_I2C_Init+0x1dc>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e04f      	b.n	800265c <HAL_I2C_Init+0x1dc>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <HAL_I2C_Init+0x168>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e012      	b.n	800260e <HAL_I2C_Init+0x18e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x196>
 8002612:	2301      	movs	r3, #1
 8002614:	e022      	b.n	800265c <HAL_I2C_Init+0x1dc>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_I2C_Init+0x1bc>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e58      	subs	r0, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800263a:	e00f      	b.n	800265c <HAL_I2C_Init+0x1dc>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6809      	ldr	r1, [r1, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800268a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6911      	ldr	r1, [r2, #16]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	000186a0 	.word	0x000186a0
 80026f8:	001e847f 	.word	0x001e847f
 80026fc:	003d08ff 	.word	0x003d08ff
 8002700:	431bde83 	.word	0x431bde83
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	460b      	mov	r3, r1
 800271c:	813b      	strh	r3, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002722:	f7ff f9ed 	bl	8001b00 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b20      	cmp	r3, #32
 8002732:	f040 80d9 	bne.w	80028e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2319      	movs	r3, #25
 800273c:	2201      	movs	r2, #1
 800273e:	496d      	ldr	r1, [pc, #436]	@ (80028f4 <HAL_I2C_Mem_Write+0x1ec>)
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fdef 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
 800274e:	e0cc      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_I2C_Mem_Write+0x56>
 800275a:	2302      	movs	r3, #2
 800275c:	e0c5      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d007      	beq.n	8002784 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2221      	movs	r2, #33	@ 0x21
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a4d      	ldr	r2, [pc, #308]	@ (80028f8 <HAL_I2C_Mem_Write+0x1f0>)
 80027c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c6:	88f8      	ldrh	r0, [r7, #6]
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fc26 	bl	8003028 <I2C_RequestMemoryWrite>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d052      	beq.n	8002888 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e081      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 feb4 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d107      	bne.n	800280e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06b      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d11b      	bne.n	8002888 <HAL_I2C_Mem_Write+0x180>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d017      	beq.n	8002888 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1aa      	bne.n	80027e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fea7 	bl	80035e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d107      	bne.n	80028b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e016      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	00100002 	.word	0x00100002
 80028f8:	ffff0000 	.word	0xffff0000

080028fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	@ 0x30
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4603      	mov	r3, r0
 800290c:	817b      	strh	r3, [r7, #10]
 800290e:	460b      	mov	r3, r1
 8002910:	813b      	strh	r3, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800291a:	f7ff f8f1 	bl	8001b00 <HAL_GetTick>
 800291e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b20      	cmp	r3, #32
 800292a:	f040 8244 	bne.w	8002db6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2319      	movs	r3, #25
 8002934:	2201      	movs	r2, #1
 8002936:	4982      	ldr	r1, [pc, #520]	@ (8002b40 <HAL_I2C_Mem_Read+0x244>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fcf3 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	e237      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Mem_Read+0x5a>
 8002952:	2302      	movs	r3, #2
 8002954:	e230      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d007      	beq.n	800297c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2222      	movs	r2, #34	@ 0x22
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2240      	movs	r2, #64	@ 0x40
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a62      	ldr	r2, [pc, #392]	@ (8002b44 <HAL_I2C_Mem_Read+0x248>)
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029be:	88f8      	ldrh	r0, [r7, #6]
 80029c0:	893a      	ldrh	r2, [r7, #8]
 80029c2:	8979      	ldrh	r1, [r7, #10]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4603      	mov	r3, r0
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fbc0 	bl	8003154 <I2C_RequestMemoryRead>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1ec      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e1c0      	b.n	8002d90 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d11e      	bne.n	8002a54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a26:	b672      	cpsid	i
}
 8002a28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a50:	b662      	cpsie	i
}
 8002a52:	e035      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11e      	bne.n	8002a9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	e012      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aa8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ac0:	e166      	b.n	8002d90 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	f200 811f 	bhi.w	8002d0a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d123      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fdcd 	bl	8003678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e167      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b1a:	e139      	b.n	8002d90 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d152      	bne.n	8002bca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4906      	ldr	r1, [pc, #24]	@ (8002b48 <HAL_I2C_Mem_Read+0x24c>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fbf8 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e13c      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
 8002b3e:	bf00      	nop
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000
 8002b48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4c:	b672      	cpsid	i
}
 8002b4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b92:	b662      	cpsie	i
}
 8002b94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bc8:	e0e2      	b.n	8002d90 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	497b      	ldr	r1, [pc, #492]	@ (8002dc0 <HAL_I2C_Mem_Read+0x4c4>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fba5 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0e9      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf4:	b672      	cpsid	i
}
 8002bf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c2a:	4b66      	ldr	r3, [pc, #408]	@ (8002dc4 <HAL_I2C_Mem_Read+0x4c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	08db      	lsrs	r3, r3, #3
 8002c30:	4a65      	ldr	r2, [pc, #404]	@ (8002dc8 <HAL_I2C_Mem_Read+0x4cc>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a1a      	lsrs	r2, r3, #8
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00da      	lsls	r2, r3, #3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d118      	bne.n	8002c82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c72:	b662      	cpsie	i
}
 8002c74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e09a      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d1d9      	bne.n	8002c44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d08:	e042      	b.n	8002d90 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fcb2 	bl	8003678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e04c      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d118      	bne.n	8002d90 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f ae94 	bne.w	8002ac2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	@ 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010004 	.word	0x00010004
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	14f8b589 	.word	0x14f8b589

08002dcc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7fe fe90 	bl	8001b00 <HAL_GetTick>
 8002de0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	f040 8111 	bne.w	8003016 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2319      	movs	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4988      	ldr	r1, [pc, #544]	@ (8003020 <HAL_I2C_IsDeviceReady+0x254>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa90 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e104      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_I2C_IsDeviceReady+0x50>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0fd      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d007      	beq.n	8002e42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2224      	movs	r2, #36	@ 0x24
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a70      	ldr	r2, [pc, #448]	@ (8003024 <HAL_I2C_IsDeviceReady+0x258>)
 8002e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa4e 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00d      	beq.n	8002eaa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9c:	d103      	bne.n	8002ea6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0b6      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eaa:	897b      	ldrh	r3, [r7, #10]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fe21 	bl	8001b00 <HAL_GetTick>
 8002ebe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002eee:	e025      	b.n	8002f3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fe06 	bl	8001b00 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <HAL_I2C_IsDeviceReady+0x13a>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	22a0      	movs	r2, #160	@ 0xa0
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f46:	d005      	beq.n	8002f54 <HAL_I2C_IsDeviceReady+0x188>
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_I2C_IsDeviceReady+0x188>
 8002f4e:	7dbb      	ldrb	r3, [r7, #22]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0cd      	beq.n	8002ef0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d129      	bne.n	8002fbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	4921      	ldr	r1, [pc, #132]	@ (8003020 <HAL_I2C_IsDeviceReady+0x254>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f9c2 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e036      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e02c      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2319      	movs	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	490f      	ldr	r1, [pc, #60]	@ (8003020 <HAL_I2C_IsDeviceReady+0x254>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f99e 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e012      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f4ff af32 	bcc.w	8002e66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000

08003028 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2200      	movs	r2, #0
 800305a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f960 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003078:	d103      	bne.n	8003082 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e05f      	b.n	8003146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	492d      	ldr	r1, [pc, #180]	@ (8003150 <I2C_RequestMemoryWrite+0x128>)
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f9bb 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e04c      	b.n	8003146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c4:	6a39      	ldr	r1, [r7, #32]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa46 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d107      	bne.n	80030ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e02b      	b.n	8003146 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	e021      	b.n	8003144 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa20 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2b04      	cmp	r3, #4
 8003124:	d107      	bne.n	8003136 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e005      	b.n	8003146 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800313a:	893b      	ldrh	r3, [r7, #8]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	00010002 	.word	0x00010002

08003154 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800317c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2200      	movs	r2, #0
 8003196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f8c2 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b4:	d103      	bne.n	80031be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0aa      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	4952      	ldr	r1, [pc, #328]	@ (8003320 <I2C_RequestMemoryRead+0x1cc>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f91d 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e097      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9a8 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e076      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e021      	b.n	8003280 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29b      	uxth	r3, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f982 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e050      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003276:	893b      	ldrh	r3, [r7, #8]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003282:	6a39      	ldr	r1, [r7, #32]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f967 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00d      	beq.n	80032ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	2b04      	cmp	r3, #4
 8003296:	d107      	bne.n	80032a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e035      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f82b 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e2:	d103      	bne.n	80032ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e013      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f0:	897b      	ldrh	r3, [r7, #10]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	6a3a      	ldr	r2, [r7, #32]
 8003304:	4906      	ldr	r1, [pc, #24]	@ (8003320 <I2C_RequestMemoryRead+0x1cc>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f886 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003334:	e048      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d044      	beq.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fbdf 	bl	8001b00 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d139      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <I2C_WaitOnFlagUntilTimeout+0x56>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	e00c      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x70>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	429a      	cmp	r2, r3
 8003398:	d116      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e023      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	e00c      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	429a      	cmp	r2, r3
 800340c:	d093      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003426:	e071      	b.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d123      	bne.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e067      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d041      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fe fb3a 	bl	8001b00 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d136      	bne.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10c      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e00b      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e021      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10c      	bne.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e00b      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f af6d 	bne.w	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003564:	e034      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8e3 	bl	8003732 <I2C_IsAcknowledgeFailed>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e034      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d028      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fe fabf 	bl	8001b00 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d11d      	bne.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d016      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	d1c3      	bne.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f89b 	bl	8003732 <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e034      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fa77 	bl	8001b00 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11d      	bne.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d016      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d1c3      	bne.n	80035f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003684:	e049      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d119      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e030      	b.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fe fa1a 	bl	8001b00 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d016      	beq.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e007      	b.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d1ae      	bne.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003748:	d11b      	bne.n	8003782 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003752:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
	...

08003790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e272      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8087 	beq.w	80038be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b0:	4b92      	ldr	r3, [pc, #584]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d00c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037bc:	4b8f      	ldr	r3, [pc, #572]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d112      	bne.n	80037ee <HAL_RCC_OscConfig+0x5e>
 80037c8:	4b8c      	ldr	r3, [pc, #560]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d10b      	bne.n	80037ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d6:	4b89      	ldr	r3, [pc, #548]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d06c      	beq.n	80038bc <HAL_RCC_OscConfig+0x12c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d168      	bne.n	80038bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e24c      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x76>
 80037f8:	4b80      	ldr	r3, [pc, #512]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7f      	ldr	r2, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e02e      	b.n	8003864 <HAL_RCC_OscConfig+0xd4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x98>
 800380e:	4b7b      	ldr	r3, [pc, #492]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a7a      	ldr	r2, [pc, #488]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b78      	ldr	r3, [pc, #480]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a77      	ldr	r2, [pc, #476]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e01d      	b.n	8003864 <HAL_RCC_OscConfig+0xd4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0xbc>
 8003832:	4b72      	ldr	r3, [pc, #456]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a71      	ldr	r2, [pc, #452]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0xd4>
 800384c:	4b6b      	ldr	r3, [pc, #428]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6a      	ldr	r2, [pc, #424]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a67      	ldr	r2, [pc, #412]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 800385e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe f948 	bl	8001b00 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe f944 	bl	8001b00 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e200      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b5d      	ldr	r3, [pc, #372]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0xe4>
 8003892:	e014      	b.n	80038be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe f934 	bl	8001b00 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389c:	f7fe f930 	bl	8001b00 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	@ 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1ec      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x10c>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ca:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d6:	4b49      	ldr	r3, [pc, #292]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d11c      	bne.n	800391c <HAL_RCC_OscConfig+0x18c>
 80038e2:	4b46      	ldr	r3, [pc, #280]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d116      	bne.n	800391c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_RCC_OscConfig+0x176>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1c0      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4939      	ldr	r1, [pc, #228]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	e03a      	b.n	8003992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003924:	4b36      	ldr	r3, [pc, #216]	@ (8003a00 <HAL_RCC_OscConfig+0x270>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe f8e9 	bl	8001b00 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003932:	f7fe f8e5 	bl	8001b00 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1a1      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4927      	ldr	r1, [pc, #156]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]
 8003964:	e015      	b.n	8003992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <HAL_RCC_OscConfig+0x270>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe f8c8 	bl	8001b00 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003974:	f7fe f8c4 	bl	8001b00 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e180      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d03a      	beq.n	8003a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d019      	beq.n	80039da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fe f8a8 	bl	8001b00 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7fe f8a4 	bl	8001b00 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e160      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <HAL_RCC_OscConfig+0x26c>)
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039d2:	2001      	movs	r0, #1
 80039d4:	f000 faba 	bl	8003f4c <RCC_Delay>
 80039d8:	e01c      	b.n	8003a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fe f88e 	bl	8001b00 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e6:	e00f      	b.n	8003a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fe f88a 	bl	8001b00 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d908      	bls.n	8003a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e146      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	42420000 	.word	0x42420000
 8003a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	4b92      	ldr	r3, [pc, #584]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e9      	bne.n	80039e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a6 	beq.w	8003b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a26:	4b8b      	ldr	r3, [pc, #556]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	4a87      	ldr	r2, [pc, #540]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	61d3      	str	r3, [r2, #28]
 8003a3e:	4b85      	ldr	r3, [pc, #532]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b82      	ldr	r3, [pc, #520]	@ (8003c58 <HAL_RCC_OscConfig+0x4c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCC_OscConfig+0x4c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c58 <HAL_RCC_OscConfig+0x4c8>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fe f84b 	bl	8001b00 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fe f847 	bl	8001b00 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b64      	cmp	r3, #100	@ 0x64
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e103      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b75      	ldr	r3, [pc, #468]	@ (8003c58 <HAL_RCC_OscConfig+0x4c8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x312>
 8003a94:	4b6f      	ldr	r3, [pc, #444]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4a6e      	ldr	r2, [pc, #440]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6213      	str	r3, [r2, #32]
 8003aa0:	e02d      	b.n	8003afe <HAL_RCC_OscConfig+0x36e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x334>
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a69      	ldr	r2, [pc, #420]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	4b67      	ldr	r3, [pc, #412]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a66      	ldr	r2, [pc, #408]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	e01c      	b.n	8003afe <HAL_RCC_OscConfig+0x36e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d10c      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x356>
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4a60      	ldr	r2, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	6213      	str	r3, [r2, #32]
 8003ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a5d      	ldr	r2, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	e00b      	b.n	8003afe <HAL_RCC_OscConfig+0x36e>
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4a5a      	ldr	r2, [pc, #360]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	6213      	str	r3, [r2, #32]
 8003af2:	4b58      	ldr	r3, [pc, #352]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4a57      	ldr	r2, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d015      	beq.n	8003b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b06:	f7fd fffb 	bl	8001b00 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fff7 	bl	8001b00 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e0b1      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	4b4b      	ldr	r3, [pc, #300]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ee      	beq.n	8003b0e <HAL_RCC_OscConfig+0x37e>
 8003b30:	e014      	b.n	8003b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fd ffe5 	bl	8001b00 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd ffe1 	bl	8001b00 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e09b      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	4b40      	ldr	r3, [pc, #256]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ee      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	4b3c      	ldr	r3, [pc, #240]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8087 	beq.w	8003c86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b78:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d061      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d146      	bne.n	8003c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <HAL_RCC_OscConfig+0x4cc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fd ffb5 	bl	8001b00 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fd ffb1 	bl	8001b00 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e06d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bac:	4b29      	ldr	r3, [pc, #164]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	4921      	ldr	r1, [pc, #132]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a19      	ldr	r1, [r3, #32]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	430b      	orrs	r3, r1
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fd ff85 	bl	8001b00 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fd ff81 	bl	8001b00 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x46a>
 8003c18:	e035      	b.n	8003c86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCC_OscConfig+0x4cc>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd ff6e 	bl	8001b00 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd ff6a 	bl	8001b00 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e026      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x498>
 8003c46:	e01e      	b.n	8003c86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e019      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_RCC_OscConfig+0x500>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0d0      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d910      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b67      	ldr	r3, [pc, #412]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	4965      	ldr	r1, [pc, #404]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d040      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d115      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d52:	4b41      	ldr	r3, [pc, #260]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e073      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d62:	4b3d      	ldr	r3, [pc, #244]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06b      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d72:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f023 0203 	bic.w	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4936      	ldr	r1, [pc, #216]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fd febc 	bl	8001b00 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8c:	f7fd feb8 	bl	8001b00 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e053      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 020c 	and.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d1eb      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db4:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d210      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 0207 	bic.w	r2, r3, #7
 8003dca:	4922      	ldr	r1, [pc, #136]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	@ (8003e60 <HAL_RCC_ClockConfig+0x1cc>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1d0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fe1a 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40022000 	.word	0x40022000
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	080055c0 	.word	0x080055c0
 8003e60:	20000000 	.word	0x20000000
 8003e64:	20000004 	.word	0x20000004

08003e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x30>
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x36>
 8003e96:	e027      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e9a:	613b      	str	r3, [r7, #16]
      break;
 8003e9c:	e027      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0c9b      	lsrs	r3, r3, #18
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ea8:	5cd3      	ldrb	r3, [r2, r3]
 8003eaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eb6:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	0c5b      	lsrs	r3, r3, #17
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	4a11      	ldr	r2, [pc, #68]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eca:	fb03 f202 	mul.w	r2, r3, r2
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e004      	b.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a0c      	ldr	r2, [pc, #48]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eea:	613b      	str	r3, [r7, #16]
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	693b      	ldr	r3, [r7, #16]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000
 8003f00:	007a1200 	.word	0x007a1200
 8003f04:	080055d8 	.word	0x080055d8
 8003f08:	080055e8 	.word	0x080055e8
 8003f0c:	003d0900 	.word	0x003d0900

08003f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b02      	ldr	r3, [pc, #8]	@ (8003f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	20000000 	.word	0x20000000

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff2 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	080055d0 	.word	0x080055d0

08003f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <RCC_Delay+0x34>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <RCC_Delay+0x38>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a5b      	lsrs	r3, r3, #9
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f68:	bf00      	nop
  }
  while (Delay --);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f9      	bne.n	8003f68 <RCC_Delay+0x1c>
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	20000000 	.word	0x20000000
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d07d      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	61d3      	str	r3, [r2, #28]
 8003fc0:	4b49      	ldr	r3, [pc, #292]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b46      	ldr	r3, [pc, #280]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d118      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fdc:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a42      	ldr	r2, [pc, #264]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fd8a 	bl	8001b00 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	e008      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff0:	f7fd fd86 	bl	8001b00 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e06d      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b3a      	ldr	r3, [pc, #232]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800400e:	4b36      	ldr	r3, [pc, #216]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004016:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d02e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d027      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402c:	4b2e      	ldr	r3, [pc, #184]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004034:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004036:	4b2e      	ldr	r3, [pc, #184]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800403c:	4b2c      	ldr	r3, [pc, #176]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004042:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d014      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fd fd55 	bl	8001b00 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd fd51 	bl	8001b00 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e036      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ee      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4917      	ldr	r1, [pc, #92]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	4313      	orrs	r3, r2
 800408c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4a13      	ldr	r2, [pc, #76]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040ac:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	490b      	ldr	r1, [pc, #44]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ca:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4904      	ldr	r1, [pc, #16]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
 80040f0:	42420440 	.word	0x42420440

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fb5e 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 f940 	bl	80043b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	@ (800421c <HAL_TIM_Base_Start+0x88>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d009      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <HAL_TIM_Base_Start+0x8c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <HAL_TIM_Base_Start+0x90>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d010      	beq.n	8004210 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fe:	e007      	b.n	8004210 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800

08004228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIM_ConfigClockSource+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e0b4      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x186>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800426a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d03e      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xd4>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004282:	f200 8087 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	f000 8086 	beq.w	800439a <HAL_TIM_ConfigClockSource+0x172>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004292:	d87f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b70      	cmp	r3, #112	@ 0x70
 8004296:	d01a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xa6>
 8004298:	2b70      	cmp	r3, #112	@ 0x70
 800429a:	d87b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b60      	cmp	r3, #96	@ 0x60
 800429e:	d050      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x11a>
 80042a0:	2b60      	cmp	r3, #96	@ 0x60
 80042a2:	d877      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b50      	cmp	r3, #80	@ 0x50
 80042a6:	d03c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xfa>
 80042a8:	2b50      	cmp	r3, #80	@ 0x50
 80042aa:	d873      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b40      	cmp	r3, #64	@ 0x40
 80042ae:	d058      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x13a>
 80042b0:	2b40      	cmp	r3, #64	@ 0x40
 80042b2:	d86f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b30      	cmp	r3, #48	@ 0x30
 80042b6:	d064      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b30      	cmp	r3, #48	@ 0x30
 80042ba:	d86b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d060      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d867      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d05a      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x15a>
 80042cc:	e062      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042de:	f000 f944 	bl	800456a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e04f      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800430c:	f000 f92d 	bl	800456a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800431e:	609a      	str	r2, [r3, #8]
      break;
 8004320:	e03c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	461a      	mov	r2, r3
 8004330:	f000 f8a4 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2150      	movs	r1, #80	@ 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f8fb 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004340:	e02c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434e:	461a      	mov	r2, r3
 8004350:	f000 f8c2 	bl	80044d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2160      	movs	r1, #96	@ 0x60
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f8eb 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004360:	e01c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	461a      	mov	r2, r3
 8004370:	f000 f884 	bl	800447c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	@ 0x40
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f8db 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004380:	e00c      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f000 f8d2 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004392:	e003      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	e000      	b.n	800439c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800439a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a29      	ldr	r2, [pc, #164]	@ (8004470 <TIM_Base_SetConfig+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <TIM_Base_SetConfig+0x30>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d6:	d007      	beq.n	80043e8 <TIM_Base_SetConfig+0x30>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a26      	ldr	r2, [pc, #152]	@ (8004474 <TIM_Base_SetConfig+0xbc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0x30>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a25      	ldr	r2, [pc, #148]	@ (8004478 <TIM_Base_SetConfig+0xc0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <TIM_Base_SetConfig+0xb8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0x62>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0x62>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <TIM_Base_SetConfig+0xbc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <TIM_Base_SetConfig+0xc0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a07      	ldr	r2, [pc, #28]	@ (8004470 <TIM_Base_SetConfig+0xb8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800

0800447c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 030a 	bic.w	r3, r3, #10
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0210 	bic.w	r2, r3, #16
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	031b      	lsls	r3, r3, #12
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	f043 0307 	orr.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	021a      	lsls	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	431a      	orrs	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4313      	orrs	r3, r2
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	609a      	str	r2, [r3, #8]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045bc:	2302      	movs	r3, #2
 80045be:	e046      	b.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460c:	d009      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a10      	ldr	r2, [pc, #64]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10c      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4313      	orrs	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800

08004664 <std>:
 8004664:	2300      	movs	r3, #0
 8004666:	b510      	push	{r4, lr}
 8004668:	4604      	mov	r4, r0
 800466a:	e9c0 3300 	strd	r3, r3, [r0]
 800466e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004672:	6083      	str	r3, [r0, #8]
 8004674:	8181      	strh	r1, [r0, #12]
 8004676:	6643      	str	r3, [r0, #100]	@ 0x64
 8004678:	81c2      	strh	r2, [r0, #14]
 800467a:	6183      	str	r3, [r0, #24]
 800467c:	4619      	mov	r1, r3
 800467e:	2208      	movs	r2, #8
 8004680:	305c      	adds	r0, #92	@ 0x5c
 8004682:	f000 f9e7 	bl	8004a54 <memset>
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <std+0x58>)
 8004688:	6224      	str	r4, [r4, #32]
 800468a:	6263      	str	r3, [r4, #36]	@ 0x24
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <std+0x5c>)
 800468e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004690:	4b0c      	ldr	r3, [pc, #48]	@ (80046c4 <std+0x60>)
 8004692:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <std+0x64>)
 8004696:	6323      	str	r3, [r4, #48]	@ 0x30
 8004698:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <std+0x68>)
 800469a:	429c      	cmp	r4, r3
 800469c:	d006      	beq.n	80046ac <std+0x48>
 800469e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046a2:	4294      	cmp	r4, r2
 80046a4:	d002      	beq.n	80046ac <std+0x48>
 80046a6:	33d0      	adds	r3, #208	@ 0xd0
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d105      	bne.n	80046b8 <std+0x54>
 80046ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b4:	f000 ba46 	b.w	8004b44 <__retarget_lock_init_recursive>
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	bf00      	nop
 80046bc:	080048a5 	.word	0x080048a5
 80046c0:	080048c7 	.word	0x080048c7
 80046c4:	080048ff 	.word	0x080048ff
 80046c8:	08004923 	.word	0x08004923
 80046cc:	20000160 	.word	0x20000160

080046d0 <stdio_exit_handler>:
 80046d0:	4a02      	ldr	r2, [pc, #8]	@ (80046dc <stdio_exit_handler+0xc>)
 80046d2:	4903      	ldr	r1, [pc, #12]	@ (80046e0 <stdio_exit_handler+0x10>)
 80046d4:	4803      	ldr	r0, [pc, #12]	@ (80046e4 <stdio_exit_handler+0x14>)
 80046d6:	f000 b869 	b.w	80047ac <_fwalk_sglue>
 80046da:	bf00      	nop
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	08004e39 	.word	0x08004e39
 80046e4:	2000001c 	.word	0x2000001c

080046e8 <cleanup_stdio>:
 80046e8:	6841      	ldr	r1, [r0, #4]
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <cleanup_stdio+0x34>)
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4299      	cmp	r1, r3
 80046f0:	4604      	mov	r4, r0
 80046f2:	d001      	beq.n	80046f8 <cleanup_stdio+0x10>
 80046f4:	f000 fba0 	bl	8004e38 <_fflush_r>
 80046f8:	68a1      	ldr	r1, [r4, #8]
 80046fa:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <cleanup_stdio+0x38>)
 80046fc:	4299      	cmp	r1, r3
 80046fe:	d002      	beq.n	8004706 <cleanup_stdio+0x1e>
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fb99 	bl	8004e38 <_fflush_r>
 8004706:	68e1      	ldr	r1, [r4, #12]
 8004708:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <cleanup_stdio+0x3c>)
 800470a:	4299      	cmp	r1, r3
 800470c:	d004      	beq.n	8004718 <cleanup_stdio+0x30>
 800470e:	4620      	mov	r0, r4
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	f000 bb90 	b.w	8004e38 <_fflush_r>
 8004718:	bd10      	pop	{r4, pc}
 800471a:	bf00      	nop
 800471c:	20000160 	.word	0x20000160
 8004720:	200001c8 	.word	0x200001c8
 8004724:	20000230 	.word	0x20000230

08004728 <global_stdio_init.part.0>:
 8004728:	b510      	push	{r4, lr}
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <global_stdio_init.part.0+0x30>)
 800472c:	4c0b      	ldr	r4, [pc, #44]	@ (800475c <global_stdio_init.part.0+0x34>)
 800472e:	4a0c      	ldr	r2, [pc, #48]	@ (8004760 <global_stdio_init.part.0+0x38>)
 8004730:	4620      	mov	r0, r4
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	2104      	movs	r1, #4
 8004736:	2200      	movs	r2, #0
 8004738:	f7ff ff94 	bl	8004664 <std>
 800473c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004740:	2201      	movs	r2, #1
 8004742:	2109      	movs	r1, #9
 8004744:	f7ff ff8e 	bl	8004664 <std>
 8004748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800474c:	2202      	movs	r2, #2
 800474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004752:	2112      	movs	r1, #18
 8004754:	f7ff bf86 	b.w	8004664 <std>
 8004758:	20000298 	.word	0x20000298
 800475c:	20000160 	.word	0x20000160
 8004760:	080046d1 	.word	0x080046d1

08004764 <__sfp_lock_acquire>:
 8004764:	4801      	ldr	r0, [pc, #4]	@ (800476c <__sfp_lock_acquire+0x8>)
 8004766:	f000 b9ee 	b.w	8004b46 <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	200002a1 	.word	0x200002a1

08004770 <__sfp_lock_release>:
 8004770:	4801      	ldr	r0, [pc, #4]	@ (8004778 <__sfp_lock_release+0x8>)
 8004772:	f000 b9e9 	b.w	8004b48 <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	200002a1 	.word	0x200002a1

0800477c <__sinit>:
 800477c:	b510      	push	{r4, lr}
 800477e:	4604      	mov	r4, r0
 8004780:	f7ff fff0 	bl	8004764 <__sfp_lock_acquire>
 8004784:	6a23      	ldr	r3, [r4, #32]
 8004786:	b11b      	cbz	r3, 8004790 <__sinit+0x14>
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	f7ff bff0 	b.w	8004770 <__sfp_lock_release>
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <__sinit+0x28>)
 8004792:	6223      	str	r3, [r4, #32]
 8004794:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <__sinit+0x2c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f5      	bne.n	8004788 <__sinit+0xc>
 800479c:	f7ff ffc4 	bl	8004728 <global_stdio_init.part.0>
 80047a0:	e7f2      	b.n	8004788 <__sinit+0xc>
 80047a2:	bf00      	nop
 80047a4:	080046e9 	.word	0x080046e9
 80047a8:	20000298 	.word	0x20000298

080047ac <_fwalk_sglue>:
 80047ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b0:	4607      	mov	r7, r0
 80047b2:	4688      	mov	r8, r1
 80047b4:	4614      	mov	r4, r2
 80047b6:	2600      	movs	r6, #0
 80047b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047bc:	f1b9 0901 	subs.w	r9, r9, #1
 80047c0:	d505      	bpl.n	80047ce <_fwalk_sglue+0x22>
 80047c2:	6824      	ldr	r4, [r4, #0]
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	d1f7      	bne.n	80047b8 <_fwalk_sglue+0xc>
 80047c8:	4630      	mov	r0, r6
 80047ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d907      	bls.n	80047e4 <_fwalk_sglue+0x38>
 80047d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d8:	3301      	adds	r3, #1
 80047da:	d003      	beq.n	80047e4 <_fwalk_sglue+0x38>
 80047dc:	4629      	mov	r1, r5
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	4306      	orrs	r6, r0
 80047e4:	3568      	adds	r5, #104	@ 0x68
 80047e6:	e7e9      	b.n	80047bc <_fwalk_sglue+0x10>

080047e8 <_puts_r>:
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	b570      	push	{r4, r5, r6, lr}
 80047ec:	4605      	mov	r5, r0
 80047ee:	460e      	mov	r6, r1
 80047f0:	6884      	ldr	r4, [r0, #8]
 80047f2:	b90b      	cbnz	r3, 80047f8 <_puts_r+0x10>
 80047f4:	f7ff ffc2 	bl	800477c <__sinit>
 80047f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047fa:	07db      	lsls	r3, r3, #31
 80047fc:	d405      	bmi.n	800480a <_puts_r+0x22>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	0598      	lsls	r0, r3, #22
 8004802:	d402      	bmi.n	800480a <_puts_r+0x22>
 8004804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004806:	f000 f99e 	bl	8004b46 <__retarget_lock_acquire_recursive>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	0719      	lsls	r1, r3, #28
 800480e:	d502      	bpl.n	8004816 <_puts_r+0x2e>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d135      	bne.n	8004882 <_puts_r+0x9a>
 8004816:	4621      	mov	r1, r4
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f8c5 	bl	80049a8 <__swsetup_r>
 800481e:	b380      	cbz	r0, 8004882 <_puts_r+0x9a>
 8004820:	f04f 35ff 	mov.w	r5, #4294967295
 8004824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d405      	bmi.n	8004836 <_puts_r+0x4e>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	d402      	bmi.n	8004836 <_puts_r+0x4e>
 8004830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004832:	f000 f989 	bl	8004b48 <__retarget_lock_release_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	2b00      	cmp	r3, #0
 800483c:	da04      	bge.n	8004848 <_puts_r+0x60>
 800483e:	69a2      	ldr	r2, [r4, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	dc17      	bgt.n	8004874 <_puts_r+0x8c>
 8004844:	290a      	cmp	r1, #10
 8004846:	d015      	beq.n	8004874 <_puts_r+0x8c>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	7019      	strb	r1, [r3, #0]
 8004850:	68a3      	ldr	r3, [r4, #8]
 8004852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004856:	3b01      	subs	r3, #1
 8004858:	60a3      	str	r3, [r4, #8]
 800485a:	2900      	cmp	r1, #0
 800485c:	d1ed      	bne.n	800483a <_puts_r+0x52>
 800485e:	2b00      	cmp	r3, #0
 8004860:	da11      	bge.n	8004886 <_puts_r+0x9e>
 8004862:	4622      	mov	r2, r4
 8004864:	210a      	movs	r1, #10
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f85f 	bl	800492a <__swbuf_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d0d7      	beq.n	8004820 <_puts_r+0x38>
 8004870:	250a      	movs	r5, #10
 8004872:	e7d7      	b.n	8004824 <_puts_r+0x3c>
 8004874:	4622      	mov	r2, r4
 8004876:	4628      	mov	r0, r5
 8004878:	f000 f857 	bl	800492a <__swbuf_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d1e7      	bne.n	8004850 <_puts_r+0x68>
 8004880:	e7ce      	b.n	8004820 <_puts_r+0x38>
 8004882:	3e01      	subs	r6, #1
 8004884:	e7e4      	b.n	8004850 <_puts_r+0x68>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	220a      	movs	r2, #10
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e7ee      	b.n	8004870 <_puts_r+0x88>
	...

08004894 <puts>:
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <puts+0xc>)
 8004896:	4601      	mov	r1, r0
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f7ff bfa5 	b.w	80047e8 <_puts_r>
 800489e:	bf00      	nop
 80048a0:	20000018 	.word	0x20000018

080048a4 <__sread>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	460c      	mov	r4, r1
 80048a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ac:	f000 f8fc 	bl	8004aa8 <_read_r>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	bfab      	itete	ge
 80048b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048b6:	89a3      	ldrhlt	r3, [r4, #12]
 80048b8:	181b      	addge	r3, r3, r0
 80048ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048be:	bfac      	ite	ge
 80048c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048c2:	81a3      	strhlt	r3, [r4, #12]
 80048c4:	bd10      	pop	{r4, pc}

080048c6 <__swrite>:
 80048c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ca:	461f      	mov	r7, r3
 80048cc:	898b      	ldrh	r3, [r1, #12]
 80048ce:	4605      	mov	r5, r0
 80048d0:	05db      	lsls	r3, r3, #23
 80048d2:	460c      	mov	r4, r1
 80048d4:	4616      	mov	r6, r2
 80048d6:	d505      	bpl.n	80048e4 <__swrite+0x1e>
 80048d8:	2302      	movs	r3, #2
 80048da:	2200      	movs	r2, #0
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	f000 f8d0 	bl	8004a84 <_lseek_r>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	4632      	mov	r2, r6
 80048e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	4628      	mov	r0, r5
 80048f0:	463b      	mov	r3, r7
 80048f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048fa:	f000 b8e7 	b.w	8004acc <_write_r>

080048fe <__sseek>:
 80048fe:	b510      	push	{r4, lr}
 8004900:	460c      	mov	r4, r1
 8004902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004906:	f000 f8bd 	bl	8004a84 <_lseek_r>
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	bf15      	itete	ne
 8004910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800491a:	81a3      	strheq	r3, [r4, #12]
 800491c:	bf18      	it	ne
 800491e:	81a3      	strhne	r3, [r4, #12]
 8004920:	bd10      	pop	{r4, pc}

08004922 <__sclose>:
 8004922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004926:	f000 b89d 	b.w	8004a64 <_close_r>

0800492a <__swbuf_r>:
 800492a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492c:	460e      	mov	r6, r1
 800492e:	4614      	mov	r4, r2
 8004930:	4605      	mov	r5, r0
 8004932:	b118      	cbz	r0, 800493c <__swbuf_r+0x12>
 8004934:	6a03      	ldr	r3, [r0, #32]
 8004936:	b90b      	cbnz	r3, 800493c <__swbuf_r+0x12>
 8004938:	f7ff ff20 	bl	800477c <__sinit>
 800493c:	69a3      	ldr	r3, [r4, #24]
 800493e:	60a3      	str	r3, [r4, #8]
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	071a      	lsls	r2, r3, #28
 8004944:	d501      	bpl.n	800494a <__swbuf_r+0x20>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b943      	cbnz	r3, 800495c <__swbuf_r+0x32>
 800494a:	4621      	mov	r1, r4
 800494c:	4628      	mov	r0, r5
 800494e:	f000 f82b 	bl	80049a8 <__swsetup_r>
 8004952:	b118      	cbz	r0, 800495c <__swbuf_r+0x32>
 8004954:	f04f 37ff 	mov.w	r7, #4294967295
 8004958:	4638      	mov	r0, r7
 800495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6922      	ldr	r2, [r4, #16]
 8004960:	b2f6      	uxtb	r6, r6
 8004962:	1a98      	subs	r0, r3, r2
 8004964:	6963      	ldr	r3, [r4, #20]
 8004966:	4637      	mov	r7, r6
 8004968:	4283      	cmp	r3, r0
 800496a:	dc05      	bgt.n	8004978 <__swbuf_r+0x4e>
 800496c:	4621      	mov	r1, r4
 800496e:	4628      	mov	r0, r5
 8004970:	f000 fa62 	bl	8004e38 <_fflush_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	d1ed      	bne.n	8004954 <__swbuf_r+0x2a>
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	3b01      	subs	r3, #1
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	6022      	str	r2, [r4, #0]
 8004984:	701e      	strb	r6, [r3, #0]
 8004986:	6962      	ldr	r2, [r4, #20]
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	429a      	cmp	r2, r3
 800498c:	d004      	beq.n	8004998 <__swbuf_r+0x6e>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	07db      	lsls	r3, r3, #31
 8004992:	d5e1      	bpl.n	8004958 <__swbuf_r+0x2e>
 8004994:	2e0a      	cmp	r6, #10
 8004996:	d1df      	bne.n	8004958 <__swbuf_r+0x2e>
 8004998:	4621      	mov	r1, r4
 800499a:	4628      	mov	r0, r5
 800499c:	f000 fa4c 	bl	8004e38 <_fflush_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d0d9      	beq.n	8004958 <__swbuf_r+0x2e>
 80049a4:	e7d6      	b.n	8004954 <__swbuf_r+0x2a>
	...

080049a8 <__swsetup_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4b29      	ldr	r3, [pc, #164]	@ (8004a50 <__swsetup_r+0xa8>)
 80049ac:	4605      	mov	r5, r0
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	460c      	mov	r4, r1
 80049b2:	b118      	cbz	r0, 80049bc <__swsetup_r+0x14>
 80049b4:	6a03      	ldr	r3, [r0, #32]
 80049b6:	b90b      	cbnz	r3, 80049bc <__swsetup_r+0x14>
 80049b8:	f7ff fee0 	bl	800477c <__sinit>
 80049bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c0:	0719      	lsls	r1, r3, #28
 80049c2:	d422      	bmi.n	8004a0a <__swsetup_r+0x62>
 80049c4:	06da      	lsls	r2, r3, #27
 80049c6:	d407      	bmi.n	80049d8 <__swsetup_r+0x30>
 80049c8:	2209      	movs	r2, #9
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	e033      	b.n	8004a40 <__swsetup_r+0x98>
 80049d8:	0758      	lsls	r0, r3, #29
 80049da:	d512      	bpl.n	8004a02 <__swsetup_r+0x5a>
 80049dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049de:	b141      	cbz	r1, 80049f2 <__swsetup_r+0x4a>
 80049e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <__swsetup_r+0x46>
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f8af 	bl	8004b4c <_free_r>
 80049ee:	2300      	movs	r3, #0
 80049f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	2300      	movs	r3, #0
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	b94b      	cbnz	r3, 8004a22 <__swsetup_r+0x7a>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a18:	d003      	beq.n	8004a22 <__swsetup_r+0x7a>
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 fa58 	bl	8004ed2 <__smakebuf_r>
 8004a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a26:	f013 0201 	ands.w	r2, r3, #1
 8004a2a:	d00a      	beq.n	8004a42 <__swsetup_r+0x9a>
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	60a2      	str	r2, [r4, #8]
 8004a30:	6962      	ldr	r2, [r4, #20]
 8004a32:	4252      	negs	r2, r2
 8004a34:	61a2      	str	r2, [r4, #24]
 8004a36:	6922      	ldr	r2, [r4, #16]
 8004a38:	b942      	cbnz	r2, 8004a4c <__swsetup_r+0xa4>
 8004a3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a3e:	d1c5      	bne.n	80049cc <__swsetup_r+0x24>
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	0799      	lsls	r1, r3, #30
 8004a44:	bf58      	it	pl
 8004a46:	6962      	ldrpl	r2, [r4, #20]
 8004a48:	60a2      	str	r2, [r4, #8]
 8004a4a:	e7f4      	b.n	8004a36 <__swsetup_r+0x8e>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e7f7      	b.n	8004a40 <__swsetup_r+0x98>
 8004a50:	20000018 	.word	0x20000018

08004a54 <memset>:
 8004a54:	4603      	mov	r3, r0
 8004a56:	4402      	add	r2, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <_close_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	2300      	movs	r3, #0
 8004a68:	4d05      	ldr	r5, [pc, #20]	@ (8004a80 <_close_r+0x1c>)
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	f7fc ff5b 	bl	800192a <_close>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_close_r+0x1a>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_close_r+0x1a>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	2000029c 	.word	0x2000029c

08004a84 <_lseek_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4d05      	ldr	r5, [pc, #20]	@ (8004aa4 <_lseek_r+0x20>)
 8004a90:	602a      	str	r2, [r5, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7fc ff6d 	bl	8001972 <_lseek>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_lseek_r+0x1e>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_lseek_r+0x1e>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	2000029c 	.word	0x2000029c

08004aa8 <_read_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4d05      	ldr	r5, [pc, #20]	@ (8004ac8 <_read_r+0x20>)
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fc fefe 	bl	80018b8 <_read>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_read_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_read_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	2000029c 	.word	0x2000029c

08004acc <_write_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4d05      	ldr	r5, [pc, #20]	@ (8004aec <_write_r+0x20>)
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fc ff09 	bl	80018f2 <_write>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_write_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_write_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	2000029c 	.word	0x2000029c

08004af0 <__errno>:
 8004af0:	4b01      	ldr	r3, [pc, #4]	@ (8004af8 <__errno+0x8>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000018 	.word	0x20000018

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	2600      	movs	r6, #0
 8004b00:	4d0c      	ldr	r5, [pc, #48]	@ (8004b34 <__libc_init_array+0x38>)
 8004b02:	4c0d      	ldr	r4, [pc, #52]	@ (8004b38 <__libc_init_array+0x3c>)
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	f000 fcbc 	bl	8005488 <_init>
 8004b10:	2600      	movs	r6, #0
 8004b12:	4d0a      	ldr	r5, [pc, #40]	@ (8004b3c <__libc_init_array+0x40>)
 8004b14:	4c0a      	ldr	r4, [pc, #40]	@ (8004b40 <__libc_init_array+0x44>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08005660 	.word	0x08005660
 8004b38:	08005660 	.word	0x08005660
 8004b3c:	08005660 	.word	0x08005660
 8004b40:	08005664 	.word	0x08005664

08004b44 <__retarget_lock_init_recursive>:
 8004b44:	4770      	bx	lr

08004b46 <__retarget_lock_acquire_recursive>:
 8004b46:	4770      	bx	lr

08004b48 <__retarget_lock_release_recursive>:
 8004b48:	4770      	bx	lr
	...

08004b4c <_free_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4605      	mov	r5, r0
 8004b50:	2900      	cmp	r1, #0
 8004b52:	d040      	beq.n	8004bd6 <_free_r+0x8a>
 8004b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b58:	1f0c      	subs	r4, r1, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bfb8      	it	lt
 8004b5e:	18e4      	addlt	r4, r4, r3
 8004b60:	f000 f8de 	bl	8004d20 <__malloc_lock>
 8004b64:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <_free_r+0x8c>)
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	b933      	cbnz	r3, 8004b78 <_free_r+0x2c>
 8004b6a:	6063      	str	r3, [r4, #4]
 8004b6c:	6014      	str	r4, [r2, #0]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b74:	f000 b8da 	b.w	8004d2c <__malloc_unlock>
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	d908      	bls.n	8004b8e <_free_r+0x42>
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	1821      	adds	r1, r4, r0
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf01      	itttt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	1809      	addeq	r1, r1, r0
 8004b8a:	6021      	streq	r1, [r4, #0]
 8004b8c:	e7ed      	b.n	8004b6a <_free_r+0x1e>
 8004b8e:	461a      	mov	r2, r3
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b10b      	cbz	r3, 8004b98 <_free_r+0x4c>
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	d9fa      	bls.n	8004b8e <_free_r+0x42>
 8004b98:	6811      	ldr	r1, [r2, #0]
 8004b9a:	1850      	adds	r0, r2, r1
 8004b9c:	42a0      	cmp	r0, r4
 8004b9e:	d10b      	bne.n	8004bb8 <_free_r+0x6c>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	4401      	add	r1, r0
 8004ba4:	1850      	adds	r0, r2, r1
 8004ba6:	4283      	cmp	r3, r0
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	d1e0      	bne.n	8004b6e <_free_r+0x22>
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4408      	add	r0, r1
 8004bb2:	6010      	str	r0, [r2, #0]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	e7da      	b.n	8004b6e <_free_r+0x22>
 8004bb8:	d902      	bls.n	8004bc0 <_free_r+0x74>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	e7d6      	b.n	8004b6e <_free_r+0x22>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	1821      	adds	r1, r4, r0
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	bf01      	itttt	eq
 8004bc8:	6819      	ldreq	r1, [r3, #0]
 8004bca:	685b      	ldreq	r3, [r3, #4]
 8004bcc:	1809      	addeq	r1, r1, r0
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	6054      	str	r4, [r2, #4]
 8004bd4:	e7cb      	b.n	8004b6e <_free_r+0x22>
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200002a8 	.word	0x200002a8

08004bdc <sbrk_aligned>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4e0f      	ldr	r6, [pc, #60]	@ (8004c1c <sbrk_aligned+0x40>)
 8004be0:	460c      	mov	r4, r1
 8004be2:	6831      	ldr	r1, [r6, #0]
 8004be4:	4605      	mov	r5, r0
 8004be6:	b911      	cbnz	r1, 8004bee <sbrk_aligned+0x12>
 8004be8:	f000 f9d2 	bl	8004f90 <_sbrk_r>
 8004bec:	6030      	str	r0, [r6, #0]
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 f9cd 	bl	8004f90 <_sbrk_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d103      	bne.n	8004c02 <sbrk_aligned+0x26>
 8004bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8004bfe:	4620      	mov	r0, r4
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	1cc4      	adds	r4, r0, #3
 8004c04:	f024 0403 	bic.w	r4, r4, #3
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d0f8      	beq.n	8004bfe <sbrk_aligned+0x22>
 8004c0c:	1a21      	subs	r1, r4, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 f9be 	bl	8004f90 <_sbrk_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1f2      	bne.n	8004bfe <sbrk_aligned+0x22>
 8004c18:	e7ef      	b.n	8004bfa <sbrk_aligned+0x1e>
 8004c1a:	bf00      	nop
 8004c1c:	200002a4 	.word	0x200002a4

08004c20 <_malloc_r>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	1ccd      	adds	r5, r1, #3
 8004c26:	f025 0503 	bic.w	r5, r5, #3
 8004c2a:	3508      	adds	r5, #8
 8004c2c:	2d0c      	cmp	r5, #12
 8004c2e:	bf38      	it	cc
 8004c30:	250c      	movcc	r5, #12
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	4606      	mov	r6, r0
 8004c36:	db01      	blt.n	8004c3c <_malloc_r+0x1c>
 8004c38:	42a9      	cmp	r1, r5
 8004c3a:	d904      	bls.n	8004c46 <_malloc_r+0x26>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d1c <_malloc_r+0xfc>
 8004c4a:	f000 f869 	bl	8004d20 <__malloc_lock>
 8004c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c52:	461c      	mov	r4, r3
 8004c54:	bb44      	cbnz	r4, 8004ca8 <_malloc_r+0x88>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7ff ffbf 	bl	8004bdc <sbrk_aligned>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	4604      	mov	r4, r0
 8004c62:	d158      	bne.n	8004d16 <_malloc_r+0xf6>
 8004c64:	f8d8 4000 	ldr.w	r4, [r8]
 8004c68:	4627      	mov	r7, r4
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	d143      	bne.n	8004cf6 <_malloc_r+0xd6>
 8004c6e:	2c00      	cmp	r4, #0
 8004c70:	d04b      	beq.n	8004d0a <_malloc_r+0xea>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	4639      	mov	r1, r7
 8004c76:	4630      	mov	r0, r6
 8004c78:	eb04 0903 	add.w	r9, r4, r3
 8004c7c:	f000 f988 	bl	8004f90 <_sbrk_r>
 8004c80:	4581      	cmp	r9, r0
 8004c82:	d142      	bne.n	8004d0a <_malloc_r+0xea>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	4630      	mov	r0, r6
 8004c88:	1a6d      	subs	r5, r5, r1
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	f7ff ffa6 	bl	8004bdc <sbrk_aligned>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d03a      	beq.n	8004d0a <_malloc_r+0xea>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	442b      	add	r3, r5
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	bb62      	cbnz	r2, 8004cfc <_malloc_r+0xdc>
 8004ca2:	f8c8 7000 	str.w	r7, [r8]
 8004ca6:	e00f      	b.n	8004cc8 <_malloc_r+0xa8>
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	1b52      	subs	r2, r2, r5
 8004cac:	d420      	bmi.n	8004cf0 <_malloc_r+0xd0>
 8004cae:	2a0b      	cmp	r2, #11
 8004cb0:	d917      	bls.n	8004ce2 <_malloc_r+0xc2>
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	6025      	str	r5, [r4, #0]
 8004cb8:	bf18      	it	ne
 8004cba:	6059      	strne	r1, [r3, #4]
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	bf08      	it	eq
 8004cc0:	f8c8 1000 	streq.w	r1, [r8]
 8004cc4:	5162      	str	r2, [r4, r5]
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f82f 	bl	8004d2c <__malloc_unlock>
 8004cce:	f104 000b 	add.w	r0, r4, #11
 8004cd2:	1d23      	adds	r3, r4, #4
 8004cd4:	f020 0007 	bic.w	r0, r0, #7
 8004cd8:	1ac2      	subs	r2, r0, r3
 8004cda:	bf1c      	itt	ne
 8004cdc:	1a1b      	subne	r3, r3, r0
 8004cde:	50a3      	strne	r3, [r4, r2]
 8004ce0:	e7af      	b.n	8004c42 <_malloc_r+0x22>
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	f8c8 2000 	streq.w	r2, [r8]
 8004cec:	605a      	strne	r2, [r3, #4]
 8004cee:	e7eb      	b.n	8004cc8 <_malloc_r+0xa8>
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	6864      	ldr	r4, [r4, #4]
 8004cf4:	e7ae      	b.n	8004c54 <_malloc_r+0x34>
 8004cf6:	463c      	mov	r4, r7
 8004cf8:	687f      	ldr	r7, [r7, #4]
 8004cfa:	e7b6      	b.n	8004c6a <_malloc_r+0x4a>
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	42a3      	cmp	r3, r4
 8004d02:	d1fb      	bne.n	8004cfc <_malloc_r+0xdc>
 8004d04:	2300      	movs	r3, #0
 8004d06:	6053      	str	r3, [r2, #4]
 8004d08:	e7de      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	6033      	str	r3, [r6, #0]
 8004d10:	f000 f80c 	bl	8004d2c <__malloc_unlock>
 8004d14:	e794      	b.n	8004c40 <_malloc_r+0x20>
 8004d16:	6005      	str	r5, [r0, #0]
 8004d18:	e7d6      	b.n	8004cc8 <_malloc_r+0xa8>
 8004d1a:	bf00      	nop
 8004d1c:	200002a8 	.word	0x200002a8

08004d20 <__malloc_lock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	@ (8004d28 <__malloc_lock+0x8>)
 8004d22:	f7ff bf10 	b.w	8004b46 <__retarget_lock_acquire_recursive>
 8004d26:	bf00      	nop
 8004d28:	200002a0 	.word	0x200002a0

08004d2c <__malloc_unlock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	@ (8004d34 <__malloc_unlock+0x8>)
 8004d2e:	f7ff bf0b 	b.w	8004b48 <__retarget_lock_release_recursive>
 8004d32:	bf00      	nop
 8004d34:	200002a0 	.word	0x200002a0

08004d38 <__sflush_r>:
 8004d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	0716      	lsls	r6, r2, #28
 8004d40:	4605      	mov	r5, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	d454      	bmi.n	8004df0 <__sflush_r+0xb8>
 8004d46:	684b      	ldr	r3, [r1, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	dc02      	bgt.n	8004d52 <__sflush_r+0x1a>
 8004d4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dd48      	ble.n	8004de4 <__sflush_r+0xac>
 8004d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d54:	2e00      	cmp	r6, #0
 8004d56:	d045      	beq.n	8004de4 <__sflush_r+0xac>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d5e:	682f      	ldr	r7, [r5, #0]
 8004d60:	6a21      	ldr	r1, [r4, #32]
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	d030      	beq.n	8004dc8 <__sflush_r+0x90>
 8004d66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	0759      	lsls	r1, r3, #29
 8004d6c:	d505      	bpl.n	8004d7a <__sflush_r+0x42>
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	1ad2      	subs	r2, r2, r3
 8004d72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d74:	b10b      	cbz	r3, 8004d7a <__sflush_r+0x42>
 8004d76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d78:	1ad2      	subs	r2, r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d80:	6a21      	ldr	r1, [r4, #32]
 8004d82:	47b0      	blx	r6
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	d106      	bne.n	8004d98 <__sflush_r+0x60>
 8004d8a:	6829      	ldr	r1, [r5, #0]
 8004d8c:	291d      	cmp	r1, #29
 8004d8e:	d82b      	bhi.n	8004de8 <__sflush_r+0xb0>
 8004d90:	4a28      	ldr	r2, [pc, #160]	@ (8004e34 <__sflush_r+0xfc>)
 8004d92:	410a      	asrs	r2, r1
 8004d94:	07d6      	lsls	r6, r2, #31
 8004d96:	d427      	bmi.n	8004de8 <__sflush_r+0xb0>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	6062      	str	r2, [r4, #4]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	04d9      	lsls	r1, r3, #19
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	d504      	bpl.n	8004dae <__sflush_r+0x76>
 8004da4:	1c42      	adds	r2, r0, #1
 8004da6:	d101      	bne.n	8004dac <__sflush_r+0x74>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b903      	cbnz	r3, 8004dae <__sflush_r+0x76>
 8004dac:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004db0:	602f      	str	r7, [r5, #0]
 8004db2:	b1b9      	cbz	r1, 8004de4 <__sflush_r+0xac>
 8004db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004db8:	4299      	cmp	r1, r3
 8004dba:	d002      	beq.n	8004dc2 <__sflush_r+0x8a>
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7ff fec5 	bl	8004b4c <_free_r>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dc6:	e00d      	b.n	8004de4 <__sflush_r+0xac>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b0      	blx	r6
 8004dce:	4602      	mov	r2, r0
 8004dd0:	1c50      	adds	r0, r2, #1
 8004dd2:	d1c9      	bne.n	8004d68 <__sflush_r+0x30>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0c6      	beq.n	8004d68 <__sflush_r+0x30>
 8004dda:	2b1d      	cmp	r3, #29
 8004ddc:	d001      	beq.n	8004de2 <__sflush_r+0xaa>
 8004dde:	2b16      	cmp	r3, #22
 8004de0:	d11d      	bne.n	8004e1e <__sflush_r+0xe6>
 8004de2:	602f      	str	r7, [r5, #0]
 8004de4:	2000      	movs	r0, #0
 8004de6:	e021      	b.n	8004e2c <__sflush_r+0xf4>
 8004de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dec:	b21b      	sxth	r3, r3
 8004dee:	e01a      	b.n	8004e26 <__sflush_r+0xee>
 8004df0:	690f      	ldr	r7, [r1, #16]
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	d0f6      	beq.n	8004de4 <__sflush_r+0xac>
 8004df6:	0793      	lsls	r3, r2, #30
 8004df8:	bf18      	it	ne
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	680e      	ldr	r6, [r1, #0]
 8004dfe:	bf08      	it	eq
 8004e00:	694b      	ldreq	r3, [r1, #20]
 8004e02:	1bf6      	subs	r6, r6, r7
 8004e04:	600f      	str	r7, [r1, #0]
 8004e06:	608b      	str	r3, [r1, #8]
 8004e08:	2e00      	cmp	r6, #0
 8004e0a:	ddeb      	ble.n	8004de4 <__sflush_r+0xac>
 8004e0c:	4633      	mov	r3, r6
 8004e0e:	463a      	mov	r2, r7
 8004e10:	4628      	mov	r0, r5
 8004e12:	6a21      	ldr	r1, [r4, #32]
 8004e14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004e18:	47e0      	blx	ip
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	dc07      	bgt.n	8004e2e <__sflush_r+0xf6>
 8004e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e26:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2e:	4407      	add	r7, r0
 8004e30:	1a36      	subs	r6, r6, r0
 8004e32:	e7e9      	b.n	8004e08 <__sflush_r+0xd0>
 8004e34:	dfbffffe 	.word	0xdfbffffe

08004e38 <_fflush_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b913      	cbnz	r3, 8004e48 <_fflush_r+0x10>
 8004e42:	2500      	movs	r5, #0
 8004e44:	4628      	mov	r0, r5
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	b118      	cbz	r0, 8004e52 <_fflush_r+0x1a>
 8004e4a:	6a03      	ldr	r3, [r0, #32]
 8004e4c:	b90b      	cbnz	r3, 8004e52 <_fflush_r+0x1a>
 8004e4e:	f7ff fc95 	bl	800477c <__sinit>
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f3      	beq.n	8004e42 <_fflush_r+0xa>
 8004e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e5c:	07d0      	lsls	r0, r2, #31
 8004e5e:	d404      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e60:	0599      	lsls	r1, r3, #22
 8004e62:	d402      	bmi.n	8004e6a <_fflush_r+0x32>
 8004e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e66:	f7ff fe6e 	bl	8004b46 <__retarget_lock_acquire_recursive>
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f7ff ff63 	bl	8004d38 <__sflush_r>
 8004e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e74:	4605      	mov	r5, r0
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d4e4      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d4e1      	bmi.n	8004e44 <_fflush_r+0xc>
 8004e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e82:	f7ff fe61 	bl	8004b48 <__retarget_lock_release_recursive>
 8004e86:	e7dd      	b.n	8004e44 <_fflush_r+0xc>

08004e88 <__swhatbuf_r>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e90:	4615      	mov	r5, r2
 8004e92:	2900      	cmp	r1, #0
 8004e94:	461e      	mov	r6, r3
 8004e96:	b096      	sub	sp, #88	@ 0x58
 8004e98:	da0c      	bge.n	8004eb4 <__swhatbuf_r+0x2c>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ea2:	bf14      	ite	ne
 8004ea4:	2340      	movne	r3, #64	@ 0x40
 8004ea6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004eaa:	2000      	movs	r0, #0
 8004eac:	6031      	str	r1, [r6, #0]
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	b016      	add	sp, #88	@ 0x58
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	466a      	mov	r2, sp
 8004eb6:	f000 f849 	bl	8004f4c <_fstat_r>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	dbed      	blt.n	8004e9a <__swhatbuf_r+0x12>
 8004ebe:	9901      	ldr	r1, [sp, #4]
 8004ec0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ec4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ec8:	4259      	negs	r1, r3
 8004eca:	4159      	adcs	r1, r3
 8004ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ed0:	e7eb      	b.n	8004eaa <__swhatbuf_r+0x22>

08004ed2 <__smakebuf_r>:
 8004ed2:	898b      	ldrh	r3, [r1, #12]
 8004ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed6:	079d      	lsls	r5, r3, #30
 8004ed8:	4606      	mov	r6, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	d507      	bpl.n	8004eee <__smakebuf_r+0x1c>
 8004ede:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	6163      	str	r3, [r4, #20]
 8004eea:	b003      	add	sp, #12
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eee:	466a      	mov	r2, sp
 8004ef0:	ab01      	add	r3, sp, #4
 8004ef2:	f7ff ffc9 	bl	8004e88 <__swhatbuf_r>
 8004ef6:	9f00      	ldr	r7, [sp, #0]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	4639      	mov	r1, r7
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff fe8f 	bl	8004c20 <_malloc_r>
 8004f02:	b948      	cbnz	r0, 8004f18 <__smakebuf_r+0x46>
 8004f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f08:	059a      	lsls	r2, r3, #22
 8004f0a:	d4ee      	bmi.n	8004eea <__smakebuf_r+0x18>
 8004f0c:	f023 0303 	bic.w	r3, r3, #3
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	e7e2      	b.n	8004ede <__smakebuf_r+0xc>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	6020      	str	r0, [r4, #0]
 8004f28:	b15b      	cbz	r3, 8004f42 <__smakebuf_r+0x70>
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f30:	f000 f81e 	bl	8004f70 <_isatty_r>
 8004f34:	b128      	cbz	r0, 8004f42 <__smakebuf_r+0x70>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f023 0303 	bic.w	r3, r3, #3
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	431d      	orrs	r5, r3
 8004f46:	81a5      	strh	r5, [r4, #12]
 8004f48:	e7cf      	b.n	8004eea <__smakebuf_r+0x18>
	...

08004f4c <_fstat_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	2300      	movs	r3, #0
 8004f50:	4d06      	ldr	r5, [pc, #24]	@ (8004f6c <_fstat_r+0x20>)
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	f7fc fcf1 	bl	8001940 <_fstat>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d102      	bne.n	8004f68 <_fstat_r+0x1c>
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	b103      	cbz	r3, 8004f68 <_fstat_r+0x1c>
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000029c 	.word	0x2000029c

08004f70 <_isatty_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d05      	ldr	r5, [pc, #20]	@ (8004f8c <_isatty_r+0x1c>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fc fcef 	bl	800195e <_isatty>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_isatty_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_isatty_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	2000029c 	.word	0x2000029c

08004f90 <_sbrk_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	2300      	movs	r3, #0
 8004f94:	4d05      	ldr	r5, [pc, #20]	@ (8004fac <_sbrk_r+0x1c>)
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fc fcf6 	bl	800198c <_sbrk>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_sbrk_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_sbrk_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	2000029c 	.word	0x2000029c

08004fb0 <atan2>:
 8004fb0:	f000 b802 	b.w	8004fb8 <__ieee754_atan2>
 8004fb4:	0000      	movs	r0, r0
	...

08004fb8 <__ieee754_atan2>:
 8004fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fbc:	4617      	mov	r7, r2
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	4699      	mov	r9, r3
 8004fc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fc6:	427b      	negs	r3, r7
 8004fc8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8005150 <__ieee754_atan2+0x198>
 8004fcc:	433b      	orrs	r3, r7
 8004fce:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004fd2:	4553      	cmp	r3, sl
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	460d      	mov	r5, r1
 8004fd8:	d809      	bhi.n	8004fee <__ieee754_atan2+0x36>
 8004fda:	4246      	negs	r6, r0
 8004fdc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004fe0:	4306      	orrs	r6, r0
 8004fe2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8004fe6:	4556      	cmp	r6, sl
 8004fe8:	468e      	mov	lr, r1
 8004fea:	4683      	mov	fp, r0
 8004fec:	d908      	bls.n	8005000 <__ieee754_atan2+0x48>
 8004fee:	4642      	mov	r2, r8
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb f8b1 	bl	800015c <__adddf3>
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	460d      	mov	r5, r1
 8004ffe:	e016      	b.n	800502e <__ieee754_atan2+0x76>
 8005000:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8005004:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005008:	433e      	orrs	r6, r7
 800500a:	d103      	bne.n	8005014 <__ieee754_atan2+0x5c>
 800500c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	f000 b8a6 	b.w	8005160 <atan>
 8005014:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005018:	f006 0602 	and.w	r6, r6, #2
 800501c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005020:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005024:	d107      	bne.n	8005036 <__ieee754_atan2+0x7e>
 8005026:	2e02      	cmp	r6, #2
 8005028:	d064      	beq.n	80050f4 <__ieee754_atan2+0x13c>
 800502a:	2e03      	cmp	r6, #3
 800502c:	d066      	beq.n	80050fc <__ieee754_atan2+0x144>
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	4317      	orrs	r7, r2
 8005038:	d106      	bne.n	8005048 <__ieee754_atan2+0x90>
 800503a:	f1be 0f00 	cmp.w	lr, #0
 800503e:	da68      	bge.n	8005112 <__ieee754_atan2+0x15a>
 8005040:	a537      	add	r5, pc, #220	@ (adr r5, 8005120 <__ieee754_atan2+0x168>)
 8005042:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005046:	e7f2      	b.n	800502e <__ieee754_atan2+0x76>
 8005048:	4552      	cmp	r2, sl
 800504a:	d10f      	bne.n	800506c <__ieee754_atan2+0xb4>
 800504c:	4293      	cmp	r3, r2
 800504e:	f106 36ff 	add.w	r6, r6, #4294967295
 8005052:	d107      	bne.n	8005064 <__ieee754_atan2+0xac>
 8005054:	2e02      	cmp	r6, #2
 8005056:	d855      	bhi.n	8005104 <__ieee754_atan2+0x14c>
 8005058:	4b3e      	ldr	r3, [pc, #248]	@ (8005154 <__ieee754_atan2+0x19c>)
 800505a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800505e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005062:	e7e4      	b.n	800502e <__ieee754_atan2+0x76>
 8005064:	2e02      	cmp	r6, #2
 8005066:	d851      	bhi.n	800510c <__ieee754_atan2+0x154>
 8005068:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <__ieee754_atan2+0x1a0>)
 800506a:	e7f6      	b.n	800505a <__ieee754_atan2+0xa2>
 800506c:	4553      	cmp	r3, sl
 800506e:	d0e4      	beq.n	800503a <__ieee754_atan2+0x82>
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005076:	ea4f 5223 	mov.w	r2, r3, asr #20
 800507a:	da21      	bge.n	80050c0 <__ieee754_atan2+0x108>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	da01      	bge.n	8005086 <__ieee754_atan2+0xce>
 8005082:	323c      	adds	r2, #60	@ 0x3c
 8005084:	db20      	blt.n	80050c8 <__ieee754_atan2+0x110>
 8005086:	4642      	mov	r2, r8
 8005088:	464b      	mov	r3, r9
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	f7fb fb45 	bl	800071c <__aeabi_ddiv>
 8005092:	f000 f9f5 	bl	8005480 <fabs>
 8005096:	f000 f863 	bl	8005160 <atan>
 800509a:	4604      	mov	r4, r0
 800509c:	460d      	mov	r5, r1
 800509e:	2e01      	cmp	r6, #1
 80050a0:	d015      	beq.n	80050ce <__ieee754_atan2+0x116>
 80050a2:	2e02      	cmp	r6, #2
 80050a4:	d017      	beq.n	80050d6 <__ieee754_atan2+0x11e>
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	d0c1      	beq.n	800502e <__ieee754_atan2+0x76>
 80050aa:	a31f      	add	r3, pc, #124	@ (adr r3, 8005128 <__ieee754_atan2+0x170>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	4620      	mov	r0, r4
 80050b2:	4629      	mov	r1, r5
 80050b4:	f7fb f850 	bl	8000158 <__aeabi_dsub>
 80050b8:	a31d      	add	r3, pc, #116	@ (adr r3, 8005130 <__ieee754_atan2+0x178>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	e016      	b.n	80050ee <__ieee754_atan2+0x136>
 80050c0:	a51d      	add	r5, pc, #116	@ (adr r5, 8005138 <__ieee754_atan2+0x180>)
 80050c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80050c6:	e7ea      	b.n	800509e <__ieee754_atan2+0xe6>
 80050c8:	2400      	movs	r4, #0
 80050ca:	2500      	movs	r5, #0
 80050cc:	e7e7      	b.n	800509e <__ieee754_atan2+0xe6>
 80050ce:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80050d2:	461d      	mov	r5, r3
 80050d4:	e7ab      	b.n	800502e <__ieee754_atan2+0x76>
 80050d6:	a314      	add	r3, pc, #80	@ (adr r3, 8005128 <__ieee754_atan2+0x170>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb f83a 	bl	8000158 <__aeabi_dsub>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	a111      	add	r1, pc, #68	@ (adr r1, 8005130 <__ieee754_atan2+0x178>)
 80050ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ee:	f7fb f833 	bl	8000158 <__aeabi_dsub>
 80050f2:	e782      	b.n	8004ffa <__ieee754_atan2+0x42>
 80050f4:	a50e      	add	r5, pc, #56	@ (adr r5, 8005130 <__ieee754_atan2+0x178>)
 80050f6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80050fa:	e798      	b.n	800502e <__ieee754_atan2+0x76>
 80050fc:	a510      	add	r5, pc, #64	@ (adr r5, 8005140 <__ieee754_atan2+0x188>)
 80050fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005102:	e794      	b.n	800502e <__ieee754_atan2+0x76>
 8005104:	a510      	add	r5, pc, #64	@ (adr r5, 8005148 <__ieee754_atan2+0x190>)
 8005106:	e9d5 4500 	ldrd	r4, r5, [r5]
 800510a:	e790      	b.n	800502e <__ieee754_atan2+0x76>
 800510c:	2400      	movs	r4, #0
 800510e:	2500      	movs	r5, #0
 8005110:	e78d      	b.n	800502e <__ieee754_atan2+0x76>
 8005112:	a509      	add	r5, pc, #36	@ (adr r5, 8005138 <__ieee754_atan2+0x180>)
 8005114:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005118:	e789      	b.n	800502e <__ieee754_atan2+0x76>
 800511a:	bf00      	nop
 800511c:	f3af 8000 	nop.w
 8005120:	54442d18 	.word	0x54442d18
 8005124:	bff921fb 	.word	0xbff921fb
 8005128:	33145c07 	.word	0x33145c07
 800512c:	3ca1a626 	.word	0x3ca1a626
 8005130:	54442d18 	.word	0x54442d18
 8005134:	400921fb 	.word	0x400921fb
 8005138:	54442d18 	.word	0x54442d18
 800513c:	3ff921fb 	.word	0x3ff921fb
 8005140:	54442d18 	.word	0x54442d18
 8005144:	c00921fb 	.word	0xc00921fb
 8005148:	54442d18 	.word	0x54442d18
 800514c:	3fe921fb 	.word	0x3fe921fb
 8005150:	7ff00000 	.word	0x7ff00000
 8005154:	08005608 	.word	0x08005608
 8005158:	080055f0 	.word	0x080055f0
 800515c:	00000000 	.word	0x00000000

08005160 <atan>:
 8005160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	4bbc      	ldr	r3, [pc, #752]	@ (8005458 <atan+0x2f8>)
 8005166:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800516a:	429e      	cmp	r6, r3
 800516c:	4604      	mov	r4, r0
 800516e:	460d      	mov	r5, r1
 8005170:	468b      	mov	fp, r1
 8005172:	d918      	bls.n	80051a6 <atan+0x46>
 8005174:	4bb9      	ldr	r3, [pc, #740]	@ (800545c <atan+0x2fc>)
 8005176:	429e      	cmp	r6, r3
 8005178:	d801      	bhi.n	800517e <atan+0x1e>
 800517a:	d109      	bne.n	8005190 <atan+0x30>
 800517c:	b140      	cbz	r0, 8005190 <atan+0x30>
 800517e:	4622      	mov	r2, r4
 8005180:	462b      	mov	r3, r5
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fa ffe9 	bl	800015c <__adddf3>
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	e006      	b.n	800519e <atan+0x3e>
 8005190:	f1bb 0f00 	cmp.w	fp, #0
 8005194:	f340 8123 	ble.w	80053de <atan+0x27e>
 8005198:	a593      	add	r5, pc, #588	@ (adr r5, 80053e8 <atan+0x288>)
 800519a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	4bae      	ldr	r3, [pc, #696]	@ (8005460 <atan+0x300>)
 80051a8:	429e      	cmp	r6, r3
 80051aa:	d811      	bhi.n	80051d0 <atan+0x70>
 80051ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80051b0:	429e      	cmp	r6, r3
 80051b2:	d80a      	bhi.n	80051ca <atan+0x6a>
 80051b4:	a38e      	add	r3, pc, #568	@ (adr r3, 80053f0 <atan+0x290>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fa ffcf 	bl	800015c <__adddf3>
 80051be:	2200      	movs	r2, #0
 80051c0:	4ba8      	ldr	r3, [pc, #672]	@ (8005464 <atan+0x304>)
 80051c2:	f7fb fc11 	bl	80009e8 <__aeabi_dcmpgt>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d1e9      	bne.n	800519e <atan+0x3e>
 80051ca:	f04f 3aff 	mov.w	sl, #4294967295
 80051ce:	e027      	b.n	8005220 <atan+0xc0>
 80051d0:	f000 f956 	bl	8005480 <fabs>
 80051d4:	4ba4      	ldr	r3, [pc, #656]	@ (8005468 <atan+0x308>)
 80051d6:	4604      	mov	r4, r0
 80051d8:	429e      	cmp	r6, r3
 80051da:	460d      	mov	r5, r1
 80051dc:	f200 80b8 	bhi.w	8005350 <atan+0x1f0>
 80051e0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80051e4:	429e      	cmp	r6, r3
 80051e6:	f200 809c 	bhi.w	8005322 <atan+0x1c2>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	f7fa ffb5 	bl	800015c <__adddf3>
 80051f2:	2200      	movs	r2, #0
 80051f4:	4b9b      	ldr	r3, [pc, #620]	@ (8005464 <atan+0x304>)
 80051f6:	f7fa ffaf 	bl	8000158 <__aeabi_dsub>
 80051fa:	2200      	movs	r2, #0
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fa ffa8 	bl	800015c <__adddf3>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	f7fb fa82 	bl	800071c <__aeabi_ddiv>
 8005218:	f04f 0a00 	mov.w	sl, #0
 800521c:	4604      	mov	r4, r0
 800521e:	460d      	mov	r5, r1
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fb f94e 	bl	80004c8 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4680      	mov	r8, r0
 8005232:	4689      	mov	r9, r1
 8005234:	f7fb f948 	bl	80004c8 <__aeabi_dmul>
 8005238:	a36f      	add	r3, pc, #444	@ (adr r3, 80053f8 <atan+0x298>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	4606      	mov	r6, r0
 8005240:	460f      	mov	r7, r1
 8005242:	f7fb f941 	bl	80004c8 <__aeabi_dmul>
 8005246:	a36e      	add	r3, pc, #440	@ (adr r3, 8005400 <atan+0x2a0>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f7fa ff86 	bl	800015c <__adddf3>
 8005250:	4632      	mov	r2, r6
 8005252:	463b      	mov	r3, r7
 8005254:	f7fb f938 	bl	80004c8 <__aeabi_dmul>
 8005258:	a36b      	add	r3, pc, #428	@ (adr r3, 8005408 <atan+0x2a8>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fa ff7d 	bl	800015c <__adddf3>
 8005262:	4632      	mov	r2, r6
 8005264:	463b      	mov	r3, r7
 8005266:	f7fb f92f 	bl	80004c8 <__aeabi_dmul>
 800526a:	a369      	add	r3, pc, #420	@ (adr r3, 8005410 <atan+0x2b0>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f7fa ff74 	bl	800015c <__adddf3>
 8005274:	4632      	mov	r2, r6
 8005276:	463b      	mov	r3, r7
 8005278:	f7fb f926 	bl	80004c8 <__aeabi_dmul>
 800527c:	a366      	add	r3, pc, #408	@ (adr r3, 8005418 <atan+0x2b8>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fa ff6b 	bl	800015c <__adddf3>
 8005286:	4632      	mov	r2, r6
 8005288:	463b      	mov	r3, r7
 800528a:	f7fb f91d 	bl	80004c8 <__aeabi_dmul>
 800528e:	a364      	add	r3, pc, #400	@ (adr r3, 8005420 <atan+0x2c0>)
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f7fa ff62 	bl	800015c <__adddf3>
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	f7fb f914 	bl	80004c8 <__aeabi_dmul>
 80052a0:	a361      	add	r3, pc, #388	@ (adr r3, 8005428 <atan+0x2c8>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	4680      	mov	r8, r0
 80052a8:	4689      	mov	r9, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb f90b 	bl	80004c8 <__aeabi_dmul>
 80052b2:	a35f      	add	r3, pc, #380	@ (adr r3, 8005430 <atan+0x2d0>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fa ff4e 	bl	8000158 <__aeabi_dsub>
 80052bc:	4632      	mov	r2, r6
 80052be:	463b      	mov	r3, r7
 80052c0:	f7fb f902 	bl	80004c8 <__aeabi_dmul>
 80052c4:	a35c      	add	r3, pc, #368	@ (adr r3, 8005438 <atan+0x2d8>)
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f7fa ff45 	bl	8000158 <__aeabi_dsub>
 80052ce:	4632      	mov	r2, r6
 80052d0:	463b      	mov	r3, r7
 80052d2:	f7fb f8f9 	bl	80004c8 <__aeabi_dmul>
 80052d6:	a35a      	add	r3, pc, #360	@ (adr r3, 8005440 <atan+0x2e0>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	f7fa ff3c 	bl	8000158 <__aeabi_dsub>
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	f7fb f8f0 	bl	80004c8 <__aeabi_dmul>
 80052e8:	a357      	add	r3, pc, #348	@ (adr r3, 8005448 <atan+0x2e8>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fa ff33 	bl	8000158 <__aeabi_dsub>
 80052f2:	4632      	mov	r2, r6
 80052f4:	463b      	mov	r3, r7
 80052f6:	f7fb f8e7 	bl	80004c8 <__aeabi_dmul>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4640      	mov	r0, r8
 8005300:	4649      	mov	r1, r9
 8005302:	f7fa ff2b 	bl	800015c <__adddf3>
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	f7fb f8dd 	bl	80004c8 <__aeabi_dmul>
 800530e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	d144      	bne.n	80053a2 <atan+0x242>
 8005318:	4620      	mov	r0, r4
 800531a:	4629      	mov	r1, r5
 800531c:	f7fa ff1c 	bl	8000158 <__aeabi_dsub>
 8005320:	e733      	b.n	800518a <atan+0x2a>
 8005322:	2200      	movs	r2, #0
 8005324:	4b4f      	ldr	r3, [pc, #316]	@ (8005464 <atan+0x304>)
 8005326:	f7fa ff17 	bl	8000158 <__aeabi_dsub>
 800532a:	2200      	movs	r2, #0
 800532c:	4606      	mov	r6, r0
 800532e:	460f      	mov	r7, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	4b4b      	ldr	r3, [pc, #300]	@ (8005464 <atan+0x304>)
 8005336:	f7fa ff11 	bl	800015c <__adddf3>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	f7fb f9eb 	bl	800071c <__aeabi_ddiv>
 8005346:	f04f 0a01 	mov.w	sl, #1
 800534a:	4604      	mov	r4, r0
 800534c:	460d      	mov	r5, r1
 800534e:	e767      	b.n	8005220 <atan+0xc0>
 8005350:	4b46      	ldr	r3, [pc, #280]	@ (800546c <atan+0x30c>)
 8005352:	429e      	cmp	r6, r3
 8005354:	d21a      	bcs.n	800538c <atan+0x22c>
 8005356:	2200      	movs	r2, #0
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <atan+0x310>)
 800535a:	f7fa fefd 	bl	8000158 <__aeabi_dsub>
 800535e:	2200      	movs	r2, #0
 8005360:	4606      	mov	r6, r0
 8005362:	460f      	mov	r7, r1
 8005364:	4620      	mov	r0, r4
 8005366:	4629      	mov	r1, r5
 8005368:	4b41      	ldr	r3, [pc, #260]	@ (8005470 <atan+0x310>)
 800536a:	f7fb f8ad 	bl	80004c8 <__aeabi_dmul>
 800536e:	2200      	movs	r2, #0
 8005370:	4b3c      	ldr	r3, [pc, #240]	@ (8005464 <atan+0x304>)
 8005372:	f7fa fef3 	bl	800015c <__adddf3>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f7fb f9cd 	bl	800071c <__aeabi_ddiv>
 8005382:	f04f 0a02 	mov.w	sl, #2
 8005386:	4604      	mov	r4, r0
 8005388:	460d      	mov	r5, r1
 800538a:	e749      	b.n	8005220 <atan+0xc0>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	2000      	movs	r0, #0
 8005392:	4938      	ldr	r1, [pc, #224]	@ (8005474 <atan+0x314>)
 8005394:	f7fb f9c2 	bl	800071c <__aeabi_ddiv>
 8005398:	f04f 0a03 	mov.w	sl, #3
 800539c:	4604      	mov	r4, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	e73e      	b.n	8005220 <atan+0xc0>
 80053a2:	4b35      	ldr	r3, [pc, #212]	@ (8005478 <atan+0x318>)
 80053a4:	4e35      	ldr	r6, [pc, #212]	@ (800547c <atan+0x31c>)
 80053a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fa fed3 	bl	8000158 <__aeabi_dsub>
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	f7fa fecf 	bl	8000158 <__aeabi_dsub>
 80053ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80053c6:	f7fa fec7 	bl	8000158 <__aeabi_dsub>
 80053ca:	f1bb 0f00 	cmp.w	fp, #0
 80053ce:	4604      	mov	r4, r0
 80053d0:	460d      	mov	r5, r1
 80053d2:	f6bf aee4 	bge.w	800519e <atan+0x3e>
 80053d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053da:	461d      	mov	r5, r3
 80053dc:	e6df      	b.n	800519e <atan+0x3e>
 80053de:	a51c      	add	r5, pc, #112	@ (adr r5, 8005450 <atan+0x2f0>)
 80053e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80053e4:	e6db      	b.n	800519e <atan+0x3e>
 80053e6:	bf00      	nop
 80053e8:	54442d18 	.word	0x54442d18
 80053ec:	3ff921fb 	.word	0x3ff921fb
 80053f0:	8800759c 	.word	0x8800759c
 80053f4:	7e37e43c 	.word	0x7e37e43c
 80053f8:	e322da11 	.word	0xe322da11
 80053fc:	3f90ad3a 	.word	0x3f90ad3a
 8005400:	24760deb 	.word	0x24760deb
 8005404:	3fa97b4b 	.word	0x3fa97b4b
 8005408:	a0d03d51 	.word	0xa0d03d51
 800540c:	3fb10d66 	.word	0x3fb10d66
 8005410:	c54c206e 	.word	0xc54c206e
 8005414:	3fb745cd 	.word	0x3fb745cd
 8005418:	920083ff 	.word	0x920083ff
 800541c:	3fc24924 	.word	0x3fc24924
 8005420:	5555550d 	.word	0x5555550d
 8005424:	3fd55555 	.word	0x3fd55555
 8005428:	2c6a6c2f 	.word	0x2c6a6c2f
 800542c:	bfa2b444 	.word	0xbfa2b444
 8005430:	52defd9a 	.word	0x52defd9a
 8005434:	3fadde2d 	.word	0x3fadde2d
 8005438:	af749a6d 	.word	0xaf749a6d
 800543c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005440:	fe231671 	.word	0xfe231671
 8005444:	3fbc71c6 	.word	0x3fbc71c6
 8005448:	9998ebc4 	.word	0x9998ebc4
 800544c:	3fc99999 	.word	0x3fc99999
 8005450:	54442d18 	.word	0x54442d18
 8005454:	bff921fb 	.word	0xbff921fb
 8005458:	440fffff 	.word	0x440fffff
 800545c:	7ff00000 	.word	0x7ff00000
 8005460:	3fdbffff 	.word	0x3fdbffff
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	3ff2ffff 	.word	0x3ff2ffff
 800546c:	40038000 	.word	0x40038000
 8005470:	3ff80000 	.word	0x3ff80000
 8005474:	bff00000 	.word	0xbff00000
 8005478:	08005620 	.word	0x08005620
 800547c:	08005640 	.word	0x08005640

08005480 <fabs>:
 8005480:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005484:	4619      	mov	r1, r3
 8005486:	4770      	bx	lr

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
