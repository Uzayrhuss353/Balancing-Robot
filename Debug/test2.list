
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005d98  08005d98  00006d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f58  08005f58  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f58  08005f58  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f58  08005f58  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f58  08005f58  00006f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f5c  08005f5c  00006f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005f60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000006c  08005fcc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005fcc  000072cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cefb  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  00013f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000160f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b16  00000000  00000000  00016f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001974d  00000000  00000000  00017a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115f0  00000000  00000000  00031193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b6f  00000000  00000000  00042783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d42f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004500  00000000  00000000  000d4338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d8838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d80 	.word	0x08005d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005d80 	.word	0x08005d80

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fe6b 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f841 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 f97b 	bl	80012a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000faa:	f000 f88d 	bl	80010c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fae:	f000 f8c9 	bl	8001144 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fb2:	f000 f8f5 	bl	80011a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4819      	ldr	r0, [pc, #100]	@ (8001020 <main+0x88>)
 8000fba:	f003 faa1 	bl	8004500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4817      	ldr	r0, [pc, #92]	@ (8001020 <main+0x88>)
 8000fc2:	f003 fa9d 	bl	8004500 <HAL_TIM_PWM_Start>
  mpu6050_init();
 8000fc6:	f000 fa29 	bl	800141c <mpu6050_init>
  HAL_TIM_Base_Start(&htim2);
 8000fca:	4815      	ldr	r0, [pc, #84]	@ (8001020 <main+0x88>)
 8000fcc:	f003 f9f6 	bl	80043bc <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4813      	ldr	r0, [pc, #76]	@ (8001024 <main+0x8c>)
 8000fd6:	f001 fb4f 	bl	8002678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4811      	ldr	r0, [pc, #68]	@ (8001024 <main+0x8c>)
 8000fe0:	f001 fb4a 	bl	8002678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2140      	movs	r1, #64	@ 0x40
 8000fe8:	480e      	ldr	r0, [pc, #56]	@ (8001024 <main+0x8c>)
 8000fea:	f001 fb45 	bl	8002678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <main+0x8c>)
 8000ff4:	f001 fb40 	bl	8002678 <HAL_GPIO_WritePin>

  float Kp = 1.0;  // Proportional gain
 8000ff8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ffc:	60fb      	str	r3, [r7, #12]
  float Ki = 0.0;  // Integral gain
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  float Kd = 0.0;  // Derivative gain
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  float value = 0;
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value = mpu6050_read();
 8001010:	f000 fa9e 	bl	8001550 <mpu6050_read>
 8001014:	6038      	str	r0, [r7, #0]
	  HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f000 fe90 	bl	8001d3c <HAL_Delay>
	  value = mpu6050_read();
 800101c:	bf00      	nop
 800101e:	e7f7      	b.n	8001010 <main+0x78>
 8001020:	2000010c 	.word	0x2000010c
 8001024:	40010800 	.word	0x40010800

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	@ 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001032:	2228      	movs	r2, #40	@ 0x28
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 f988 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001064:	2300      	movs	r3, #0
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fca3 	bl	80039b8 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001078:	f000 f950 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff10 	bl	8003ebc <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010a2:	f000 f93b 	bl	800131c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a6:	2302      	movs	r3, #2
 80010a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f87d 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010bc:	f000 f92e 	bl	800131c <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3750      	adds	r7, #80	@ 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC1_Init+0x74>)
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <MX_ADC1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_ADC1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_ADC1_Init+0x74>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_ADC1_Init+0x74>)
 80010f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_ADC1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_ADC1_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_ADC1_Init+0x74>)
 8001106:	f000 fe3d 	bl	8001d84 <HAL_ADC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 f904 	bl	800131c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001114:	2309      	movs	r3, #9
 8001116:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_ADC1_Init+0x74>)
 8001126:	f000 ff05 	bl	8001f34 <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001130:	f000 f8f4 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000088 	.word	0x20000088
 8001140:	40012400 	.word	0x40012400

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f001 fa91 	bl	80026a8 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f8c6 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000b8 	.word	0x200000b8
 8001198:	40005400 	.word	0x40005400
 800119c:	000186a0 	.word	0x000186a0

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]
 80011ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d0:	4b32      	ldr	r3, [pc, #200]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011e6:	f240 128f 	movw	r2, #399	@ 0x18f
 80011ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f8:	4828      	ldr	r0, [pc, #160]	@ (800129c <MX_TIM2_Init+0xfc>)
 80011fa:	f003 f88f 	bl	800431c <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 f88a 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	4821      	ldr	r0, [pc, #132]	@ (800129c <MX_TIM2_Init+0xfc>)
 8001216:	f003 fad7 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 f87c 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001224:	481d      	ldr	r0, [pc, #116]	@ (800129c <MX_TIM2_Init+0xfc>)
 8001226:	f003 f913 	bl	8004450 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 f874 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	@ (800129c <MX_TIM2_Init+0xfc>)
 8001244:	f003 fe2c 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 f865 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <MX_TIM2_Init+0xfc>)
 800126a:	f003 f9eb 	bl	8004644 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 f852 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	@ (800129c <MX_TIM2_Init+0xfc>)
 8001280:	f003 f9e0 	bl	8004644 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800128a:	f000 f847 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800128e:	4803      	ldr	r0, [pc, #12]	@ (800129c <MX_TIM2_Init+0xfc>)
 8001290:	f000 fba4 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	@ 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000010c 	.word	0x2000010c

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a16      	ldr	r2, [pc, #88]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_GPIO_Init+0x74>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	21f0      	movs	r1, #240	@ 0xf0
 80012e8:	480b      	ldr	r0, [pc, #44]	@ (8001318 <MX_GPIO_Init+0x78>)
 80012ea:	f001 f9c5 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ee:	23f0      	movs	r3, #240	@ 0xf0
 80012f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_GPIO_Init+0x78>)
 8001306:	f001 f833 	bl	8002370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <pid_control>:
#include <motors.h>

extern I2C_HandleTypeDef hi2c1;
extern TIM_HandleTypeDef htim2;

void pid_control(float pitch, float *control_output, float *delta_time_seconds) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	static float Kp = 1.0;  // Proportional gain
	static float Ki = 0.0;  // Integral gain
	static float Kd = 0.0;  // Derivative gain

    // Calculate the error between the desired setpoint and the current pitch
    error = setpoint - pitch;
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <pid_control+0xd4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fbb2 	bl	8000aa4 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <pid_control+0xd8>)
 8001346:	601a      	str	r2, [r3, #0]

    // Calculate the integral (sum of errors over time)
    integral += error * *delta_time_seconds;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2c      	ldr	r2, [pc, #176]	@ (8001400 <pid_control+0xd8>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fcb0 	bl	8000cb8 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <pid_control+0xdc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fba0 	bl	8000aa8 <__addsf3>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <pid_control+0xdc>)
 800136e:	601a      	str	r2, [r3, #0]

    // Calculate the derivative (rate of change of error)
    derivative = (error - previous_error) / *delta_time_seconds;
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <pid_control+0xd8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <pid_control+0xe0>)
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb92 	bl	8000aa4 <__aeabi_fsub>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	4610      	mov	r0, r2
 800138c:	f7ff fd48 	bl	8000e20 <__aeabi_fdiv>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <pid_control+0xe4>)
 8001396:	601a      	str	r2, [r3, #0]

    // Compute the control output using the PID formula
    *control_output = Kp * error + Ki * integral + Kd * derivative;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <pid_control+0xe8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <pid_control+0xd8>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fc88 	bl	8000cb8 <__aeabi_fmul>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461c      	mov	r4, r3
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <pid_control+0xec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <pid_control+0xdc>)
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc7e 	bl	8000cb8 <__aeabi_fmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fb71 	bl	8000aa8 <__addsf3>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461c      	mov	r4, r3
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <pid_control+0xf0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <pid_control+0xe4>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc6f 	bl	8000cb8 <__aeabi_fmul>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff fb62 	bl	8000aa8 <__addsf3>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	601a      	str	r2, [r3, #0]

    // Store the current error as previous_error for the next loop iteration
    previous_error = error;
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <pid_control+0xd8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <pid_control+0xe0>)
 80013f2:	6013      	str	r3, [r2, #0]

    // Use the control output to adjust your system (e.g., motor speed)
    // Example: Adjust the PWM signal for the motors based on the control_output

    //adjust_motors(control_output);
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	20000154 	.word	0x20000154
 8001400:	20000158 	.word	0x20000158
 8001404:	2000015c 	.word	0x2000015c
 8001408:	20000160 	.word	0x20000160
 800140c:	20000164 	.word	0x20000164
 8001410:	20000000 	.word	0x20000000
 8001414:	20000168 	.word	0x20000168
 8001418:	2000016c 	.word	0x2000016c

0800141c <mpu6050_init>:
#define REG_DATA_ACC 0x3B
#define REG_DATA_GYRO 0x43

#define GYRO_WEIGHT 0.96 // Weight for gyroscope data in complementary filter

void mpu6050_init(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret;

    // Check if the device is ready
    ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS << 1), 1, 100);
 8001422:	2364      	movs	r3, #100	@ 0x64
 8001424:	2201      	movs	r2, #1
 8001426:	21d0      	movs	r1, #208	@ 0xd0
 8001428:	483d      	ldr	r0, [pc, #244]	@ (8001520 <mpu6050_init+0x104>)
 800142a:	f001 fde3 	bl	8002ff4 <HAL_I2C_IsDeviceReady>
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <mpu6050_init+0x24>
        printf("The device is ready\n");
 8001438:	483a      	ldr	r0, [pc, #232]	@ (8001524 <mpu6050_init+0x108>)
 800143a:	f003 fea7 	bl	800518c <puts>
 800143e:	e002      	b.n	8001446 <mpu6050_init+0x2a>
    } else {
        printf("The device is not ready. Check cables \n");
 8001440:	4839      	ldr	r0, [pc, #228]	@ (8001528 <mpu6050_init+0x10c>)
 8001442:	f003 fea3 	bl	800518c <puts>
    }

    // Wake up the MPU6050 by writing 0 to the power management register
    uint8_t temp_data = 0x00;
 8001446:	2300      	movs	r3, #0
 8001448:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_PWR_MGMT_1, 1, &temp_data, 1, 100);
 800144a:	2364      	movs	r3, #100	@ 0x64
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	226b      	movs	r2, #107	@ 0x6b
 800145a:	21d0      	movs	r1, #208	@ 0xd0
 800145c:	4830      	ldr	r0, [pc, #192]	@ (8001520 <mpu6050_init+0x104>)
 800145e:	f001 fa67 	bl	8002930 <HAL_I2C_Mem_Write>
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <mpu6050_init+0x58>
        printf("Exiting from sleep mode\n");
 800146c:	482f      	ldr	r0, [pc, #188]	@ (800152c <mpu6050_init+0x110>)
 800146e:	f003 fe8d 	bl	800518c <puts>
 8001472:	e002      	b.n	800147a <mpu6050_init+0x5e>
    } else {
        printf("Failed to exit sleep mode \n");
 8001474:	482e      	ldr	r0, [pc, #184]	@ (8001530 <mpu6050_init+0x114>)
 8001476:	f003 fe89 	bl	800518c <puts>
    }

    // Configure gyroscope sensitivity
    temp_data = 0x00; // Full scale range of ±250°/s
 800147a:	2300      	movs	r3, #0
 800147c:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 800147e:	2364      	movs	r3, #100	@ 0x64
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	221b      	movs	r2, #27
 800148e:	21d0      	movs	r1, #208	@ 0xd0
 8001490:	4823      	ldr	r0, [pc, #140]	@ (8001520 <mpu6050_init+0x104>)
 8001492:	f001 fa4d 	bl	8002930 <HAL_I2C_Mem_Write>
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <mpu6050_init+0x8c>
        printf("Configuring gyroscope \n");
 80014a0:	4824      	ldr	r0, [pc, #144]	@ (8001534 <mpu6050_init+0x118>)
 80014a2:	f003 fe73 	bl	800518c <puts>
 80014a6:	e002      	b.n	80014ae <mpu6050_init+0x92>
    } else {
        printf("Failed to configure gyroscope \n");
 80014a8:	4823      	ldr	r0, [pc, #140]	@ (8001538 <mpu6050_init+0x11c>)
 80014aa:	f003 fe6f 	bl	800518c <puts>
    }

    // Configure accelerometer sensitivity
    temp_data = 0x00; // Full scale range of ±2g
 80014ae:	2300      	movs	r3, #0
 80014b0:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 80014b2:	2364      	movs	r3, #100	@ 0x64
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	221c      	movs	r2, #28
 80014c2:	21d0      	movs	r1, #208	@ 0xd0
 80014c4:	4816      	ldr	r0, [pc, #88]	@ (8001520 <mpu6050_init+0x104>)
 80014c6:	f001 fa33 	bl	8002930 <HAL_I2C_Mem_Write>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <mpu6050_init+0xc0>
        printf("Configuring accelerometer \n");
 80014d4:	4819      	ldr	r0, [pc, #100]	@ (800153c <mpu6050_init+0x120>)
 80014d6:	f003 fe59 	bl	800518c <puts>
 80014da:	e002      	b.n	80014e2 <mpu6050_init+0xc6>
    } else {
        printf("Failed to configure accelerometer \n");
 80014dc:	4818      	ldr	r0, [pc, #96]	@ (8001540 <mpu6050_init+0x124>)
 80014de:	f003 fe55 	bl	800518c <puts>
    }

    // Disable sleep mode (already done above, so this might be redundant)
    temp_data = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS << 1), REG_USR_CTRL, 1, &temp_data, 1, 100);
 80014e6:	2364      	movs	r3, #100	@ 0x64
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2301      	movs	r3, #1
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	1dbb      	adds	r3, r7, #6
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	226a      	movs	r2, #106	@ 0x6a
 80014f6:	21d0      	movs	r1, #208	@ 0xd0
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <mpu6050_init+0x104>)
 80014fa:	f001 fa19 	bl	8002930 <HAL_I2C_Mem_Write>
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK){
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <mpu6050_init+0xf4>
        printf("Disabling sleep mode\n");
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <mpu6050_init+0x128>)
 800150a:	f003 fe3f 	bl	800518c <puts>
    } else {
        printf("Failed to disable sleep mode \n");
    }
}
 800150e:	e002      	b.n	8001516 <mpu6050_init+0xfa>
        printf("Failed to disable sleep mode \n");
 8001510:	480d      	ldr	r0, [pc, #52]	@ (8001548 <mpu6050_init+0x12c>)
 8001512:	f003 fe3b 	bl	800518c <puts>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000b8 	.word	0x200000b8
 8001524:	08005d98 	.word	0x08005d98
 8001528:	08005dac 	.word	0x08005dac
 800152c:	08005dd4 	.word	0x08005dd4
 8001530:	08005dec 	.word	0x08005dec
 8001534:	08005e08 	.word	0x08005e08
 8001538:	08005e20 	.word	0x08005e20
 800153c:	08005e40 	.word	0x08005e40
 8001540:	08005e5c 	.word	0x08005e5c
 8001544:	08005e80 	.word	0x08005e80
 8001548:	08005e98 	.word	0x08005e98
 800154c:	00000000 	.word	0x00000000

08001550 <mpu6050_read>:

float mpu6050_read(){
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b094      	sub	sp, #80	@ 0x50
 8001554:	af04      	add	r7, sp, #16
    float pitch;

    static float pitch_gyro_prev = 0.0;

    // Read accelerometer data
    HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1), REG_DATA_ACC, 1, data, 6, 100);
 8001556:	2364      	movs	r3, #100	@ 0x64
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2306      	movs	r3, #6
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	223b      	movs	r2, #59	@ 0x3b
 8001568:	21d0      	movs	r1, #208	@ 0xd0
 800156a:	48b3      	ldr	r0, [pc, #716]	@ (8001838 <mpu6050_read+0x2e8>)
 800156c:	f001 fada 	bl	8002b24 <HAL_I2C_Mem_Read>
    x_acc = ((int16_t)((data[0] << 8) | data[1])) / 16384.0;
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff38 	bl	80003f4 <__aeabi_i2d>
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4bac      	ldr	r3, [pc, #688]	@ (800183c <mpu6050_read+0x2ec>)
 800158a:	f7ff f8c7 	bl	800071c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fa31 	bl	80009fc <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    y_acc = ((int16_t)((data[2] << 8) | data[3])) / 16384.0;
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff21 	bl	80003f4 <__aeabi_i2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <mpu6050_read+0x2ec>)
 80015b8:	f7ff f8b0 	bl	800071c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa1a 	bl	80009fc <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    z_acc = ((int16_t)((data[4] << 8) | data[5])) / 16384.0;
 80015cc:	7c3b      	ldrb	r3, [r7, #16]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7c7b      	ldrb	r3, [r7, #17]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff0a 	bl	80003f4 <__aeabi_i2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b95      	ldr	r3, [pc, #596]	@ (800183c <mpu6050_read+0x2ec>)
 80015e6:	f7ff f899 	bl	800071c <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa03 	bl	80009fc <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate pitch angle based on accelerometer data
    float pitch_acc = atan2(y_acc, z_acc) * (180.0 / M_PI) + 1.58;  // Convert to degrees
 80015fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80015fc:	f7fe ff0c 	bl	8000418 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001606:	f7fe ff07 	bl	8000418 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f004 f949 	bl	80058a8 <atan2>
 8001616:	a37a      	add	r3, pc, #488	@ (adr r3, 8001800 <mpu6050_read+0x2b0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ff54 	bl	80004c8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	a377      	add	r3, pc, #476	@ (adr r3, 8001808 <mpu6050_read+0x2b8>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe fd95 	bl	800015c <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f9df 	bl	80009fc <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	633b      	str	r3, [r7, #48]	@ 0x30
    //float pitch_acc = (atan(-1 * x_acc / sqrt(pow(y_acc, 2) + pow(z_acc, 2))) * 180 / M_PI) + 1.58;
    // Read gyroscope data
    HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS << 1), REG_DATA_GYRO, 1, data, 6, 100);
 8001642:	2364      	movs	r3, #100	@ 0x64
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2306      	movs	r3, #6
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	2243      	movs	r2, #67	@ 0x43
 8001654:	21d0      	movs	r1, #208	@ 0xd0
 8001656:	4878      	ldr	r0, [pc, #480]	@ (8001838 <mpu6050_read+0x2e8>)
 8001658:	f001 fa64 	bl	8002b24 <HAL_I2C_Mem_Read>
    x_gyro = ((int16_t)((data[0] << 8) | data[1])) / 131.0;
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fec2 	bl	80003f4 <__aeabi_i2d>
 8001670:	a367      	add	r3, pc, #412	@ (adr r3, 8001810 <mpu6050_read+0x2c0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff f851 	bl	800071c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f9bb 	bl	80009fc <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    y_gyro = ((int16_t)((data[2] << 8) | data[3])) / 131.0;
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe feab 	bl	80003f4 <__aeabi_i2d>
 800169e:	a35c      	add	r3, pc, #368	@ (adr r3, 8001810 <mpu6050_read+0x2c0>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7ff f83a 	bl	800071c <__aeabi_ddiv>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f9a4 	bl	80009fc <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    z_gyro = ((int16_t)((data[4] << 8) | data[5])) / 131.0;
 80016b8:	7c3b      	ldrb	r3, [r7, #16]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7c7b      	ldrb	r3, [r7, #17]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe94 	bl	80003f4 <__aeabi_i2d>
 80016cc:	a350      	add	r3, pc, #320	@ (adr r3, 8001810 <mpu6050_read+0x2c0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f823 	bl	800071c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f98d 	bl	80009fc <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24

    // Optional: Correct the outputs with the calculated error values (if calibration is performed)

    x_gyro += 0.56;
 80016e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016e8:	f7fe fe96 	bl	8000418 <__aeabi_f2d>
 80016ec:	a34a      	add	r3, pc, #296	@ (adr r3, 8001818 <mpu6050_read+0x2c8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fd33 	bl	800015c <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff f97d 	bl	80009fc <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    y_gyro -= 2;
 8001706:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800170a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800170c:	f7ff f9ca 	bl	8000aa4 <__aeabi_fsub>
 8001710:	4603      	mov	r3, r0
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
    z_gyro += 0.79;
 8001714:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001716:	f7fe fe7f 	bl	8000418 <__aeabi_f2d>
 800171a:	a341      	add	r3, pc, #260	@ (adr r3, 8001820 <mpu6050_read+0x2d0>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fd1c 	bl	800015c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7ff f966 	bl	80009fc <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24

    // Get the current time from the timer
    current_time = HAL_GetTick();  // Get current time in milliseconds
 8001734:	f000 faf8 	bl	8001d28 <HAL_GetTick>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fa64 	bl	8000c08 <__aeabi_ui2f>
 8001740:	4603      	mov	r3, r0
 8001742:	623b      	str	r3, [r7, #32]
    delta_time = current_time - previous_time;
 8001744:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <mpu6050_read+0x2f0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fa5d 	bl	8000c08 <__aeabi_ui2f>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	6a38      	ldr	r0, [r7, #32]
 8001754:	f7ff f9a6 	bl	8000aa4 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	61fb      	str	r3, [r7, #28]
    previous_time = current_time;
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f7ff fbfb 	bl	8000f58 <__aeabi_f2uiz>
 8001762:	4603      	mov	r3, r0
 8001764:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <mpu6050_read+0x2f0>)
 8001766:	6013      	str	r3, [r2, #0]
    delta_time_seconds = delta_time / 1000.0;  // Convert milliseconds to seconds
 8001768:	4936      	ldr	r1, [pc, #216]	@ (8001844 <mpu6050_read+0x2f4>)
 800176a:	69f8      	ldr	r0, [r7, #28]
 800176c:	f7ff fb58 	bl	8000e20 <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	60bb      	str	r3, [r7, #8]

    // Calculate pitch from gyroscope
    float pitch_gyro = pitch_gyro_prev + (y_gyro * delta_time_seconds);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa9d 	bl	8000cb8 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <mpu6050_read+0x2f8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff f98d 	bl	8000aa8 <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]

    // Store the previous pitch_gyro for the next iteration
    pitch_gyro_prev = pitch_gyro;
 8001792:	4a2d      	ldr	r2, [pc, #180]	@ (8001848 <mpu6050_read+0x2f8>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6013      	str	r3, [r2, #0]

    // Combine accelerometer and gyroscope pitch using a complementary filter
    pitch = GYRO_WEIGHT * pitch_gyro + (1.0 - GYRO_WEIGHT) * pitch_acc;
 8001798:	69b8      	ldr	r0, [r7, #24]
 800179a:	f7fe fe3d 	bl	8000418 <__aeabi_f2d>
 800179e:	a322      	add	r3, pc, #136	@ (adr r3, 8001828 <mpu6050_read+0x2d8>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fe90 	bl	80004c8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
 80017b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80017b2:	f7fe fe31 	bl	8000418 <__aeabi_f2d>
 80017b6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001830 <mpu6050_read+0x2e0>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fe84 	bl	80004c8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fcc8 	bl	800015c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f912 	bl	80009fc <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

    float control_output = 0;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]

    pid_control(pitch, &control_output, &delta_time_seconds);
 80017e2:	f107 0208 	add.w	r2, r7, #8
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff fd9c 	bl	8001328 <pid_control>

    return control_output;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3740      	adds	r7, #64	@ 0x40
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	1a63c1f8 	.word	0x1a63c1f8
 8001804:	404ca5dc 	.word	0x404ca5dc
 8001808:	147ae148 	.word	0x147ae148
 800180c:	3ff947ae 	.word	0x3ff947ae
 8001810:	00000000 	.word	0x00000000
 8001814:	40606000 	.word	0x40606000
 8001818:	1eb851ec 	.word	0x1eb851ec
 800181c:	3fe1eb85 	.word	0x3fe1eb85
 8001820:	147ae148 	.word	0x147ae148
 8001824:	3fe947ae 	.word	0x3fe947ae
 8001828:	eb851eb8 	.word	0xeb851eb8
 800182c:	3feeb851 	.word	0x3feeb851
 8001830:	47ae1480 	.word	0x47ae1480
 8001834:	3fa47ae1 	.word	0x3fa47ae1
 8001838:	200000b8 	.word	0x200000b8
 800183c:	40d00000 	.word	0x40d00000
 8001840:	20000170 	.word	0x20000170
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000174 	.word	0x20000174

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_MspInit+0x60>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_MspInit+0x60>)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000

080018b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a14      	ldr	r2, [pc, #80]	@ (800191c <HAL_ADC_MspInit+0x6c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d121      	bne.n	8001914 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_ADC_MspInit+0x70>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001904:	2303      	movs	r3, #3
 8001906:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_ADC_MspInit+0x74>)
 8001910:	f000 fd2e 	bl	8002370 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40012400 	.word	0x40012400
 8001920:	40021000 	.word	0x40021000
 8001924:	40010c00 	.word	0x40010c00

08001928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <HAL_I2C_MspInit+0x70>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d123      	bne.n	8001990 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_I2C_MspInit+0x74>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a13      	ldr	r2, [pc, #76]	@ (800199c <HAL_I2C_MspInit+0x74>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HAL_I2C_MspInit+0x74>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001960:	23c0      	movs	r3, #192	@ 0xc0
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001964:	2312      	movs	r3, #18
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	@ (80019a0 <HAL_I2C_MspInit+0x78>)
 8001974:	f000 fcfc 	bl	8002370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_I2C_MspInit+0x74>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <HAL_I2C_MspInit+0x74>)
 800197e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_I2C_MspInit+0x74>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40005400 	.word	0x40005400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010c00 	.word	0x40010c00

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b4:	d10b      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_TIM_Base_MspInit+0x34>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_TIM_Base_MspInit+0x34>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_TIM_Base_MspInit+0x34>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fa:	d117      	bne.n	8001a2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_TIM_MspPostInit+0x58>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <HAL_TIM_MspPostInit+0x58>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_TIM_MspPostInit+0x58>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a14:	2303      	movs	r3, #3
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <HAL_TIM_MspPostInit+0x5c>)
 8001a28:	f000 fca2 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010800 	.word	0x40010800

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <MemManage_Handler+0x4>

08001a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f93a 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <ITM_SendChar+0x44>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <ITM_SendChar+0x44>)
 8001aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <ITM_SendChar+0x48>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <ITM_SendChar+0x48>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001ab6:	bf00      	nop
 8001ab8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f8      	beq.n	8001ab8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001ac6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	e000edfc 	.word	0xe000edfc
 8001adc:	e0000e00 	.word	0xe0000e00

08001ae0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
  }

  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ffad 	bl	8001a94 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
  }
  return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b78:	605a      	str	r2, [r3, #4]
  return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <_isatty>:

int _isatty(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f003 fc00 	bl	80053e8 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20005000 	.word	0x20005000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000178 	.word	0x20000178
 8001c1c:	200002d0 	.word	0x200002d0

08001c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c2c:	f7ff fff8 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c30:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c32:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c34:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c48:	4c09      	ldr	r4, [pc, #36]	@ (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c56:	f003 fbcd 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5a:	f7ff f99d 	bl	8000f98 <main>
  bx lr
 8001c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c68:	08005f60 	.word	0x08005f60
  ldr r2, =_sbss
 8001c6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c70:	200002cc 	.word	0x200002cc

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_Init+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_Init+0x28>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 fb3d 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	200f      	movs	r0, #15
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fdda 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fb47 	bl	8002356 <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 fb1d 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	2000000c 	.word	0x2000000c
 8001d00:	20000008 	.word	0x20000008

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_IncTick+0x1c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a03      	ldr	r2, [pc, #12]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	2000000c 	.word	0x2000000c
 8001d24:	2000017c 	.word	0x2000017c

08001d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b02      	ldr	r3, [pc, #8]	@ (8001d38 <HAL_GetTick+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	2000017c 	.word	0x2000017c

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffe0 	bl	8001d28 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0be      	b.n	8001f24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fd74 	bl	80018b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f9ab 	bl	8002124 <ADC_ConversionStop_Disable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8099 	bne.w	8001f12 <HAL_ADC_Init+0x18e>
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 8095 	bne.w	8001f12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df0:	f023 0302 	bic.w	r3, r3, #2
 8001df4:	f043 0202 	orr.w	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7b1b      	ldrb	r3, [r3, #12]
 8001e0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1c:	d003      	beq.n	8001e26 <HAL_ADC_Init+0xa2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_Init+0xa8>
 8001e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_Init+0xaa>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7d1b      	ldrb	r3, [r3, #20]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d119      	bne.n	8001e70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7b1b      	ldrb	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	035a      	lsls	r2, r3, #13
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e00b      	b.n	8001e70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <HAL_ADC_Init+0x1a8>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_Init+0x126>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d104      	bne.n	8001eb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	051b      	lsls	r3, r3, #20
 8001eb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_ADC_Init+0x1ac>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eee:	e018      	b.n	8001f22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef4:	f023 0312 	bic.w	r3, r3, #18
 8001ef8:	f043 0210 	orr.w	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f10:	e007      	b.n	8001f22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f30:	ff1f0efe 	.word	0xff1f0efe

08001f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x20>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0dc      	b.n	800210e <HAL_ADC_ConfigChannel+0x1da>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b06      	cmp	r3, #6
 8001f62:	d81c      	bhi.n	8001f9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b05      	subs	r3, #5
 8001f76:	221f      	movs	r2, #31
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4019      	ands	r1, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b05      	subs	r3, #5
 8001f90:	fa00 f203 	lsl.w	r2, r0, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f9c:	e03c      	b.n	8002018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d81c      	bhi.n	8001fe0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b23      	subs	r3, #35	@ 0x23
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4019      	ands	r1, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b23      	subs	r3, #35	@ 0x23
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fde:	e01b      	b.n	8002018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b41      	subs	r3, #65	@ 0x41
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4019      	ands	r1, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b41      	subs	r3, #65	@ 0x41
 800200c:	fa00 f203 	lsl.w	r2, r0, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b09      	cmp	r3, #9
 800201e:	d91c      	bls.n	800205a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	3b1e      	subs	r3, #30
 8002032:	2207      	movs	r2, #7
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	4019      	ands	r1, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6898      	ldr	r0, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	3b1e      	subs	r3, #30
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	e019      	b.n	800208e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6919      	ldr	r1, [r3, #16]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	2207      	movs	r2, #7
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4019      	ands	r1, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6898      	ldr	r0, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b10      	cmp	r3, #16
 8002094:	d003      	beq.n	800209e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800209a:	2b11      	cmp	r3, #17
 800209c:	d132      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <HAL_ADC_ConfigChannel+0x1e4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d125      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d126      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80020c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d11a      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ce:	4b13      	ldr	r3, [pc, #76]	@ (800211c <HAL_ADC_ConfigChannel+0x1e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a13      	ldr	r2, [pc, #76]	@ (8002120 <HAL_ADC_ConfigChannel+0x1ec>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0c9a      	lsrs	r2, r3, #18
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020e4:	e002      	b.n	80020ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x1b2>
 80020f2:	e007      	b.n	8002104 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40012400 	.word	0x40012400
 800211c:	20000004 	.word	0x20000004
 8002120:	431bde83 	.word	0x431bde83

08002124 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d12e      	bne.n	800219c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214e:	f7ff fdeb 	bl	8001d28 <HAL_GetTick>
 8002152:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002154:	e01b      	b.n	800218e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002156:	f7ff fde7 	bl	8001d28 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d914      	bls.n	800218e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10d      	bne.n	800218e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d0dc      	beq.n	8002156 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff90 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff49 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff5e 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff90 	bl	8002260 <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5f 	bl	800220c <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffb0 	bl	80022c4 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b08b      	sub	sp, #44	@ 0x2c
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	e169      	b.n	8002658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002384:	2201      	movs	r2, #1
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8158 	bne.w	8002652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a9a      	ldr	r2, [pc, #616]	@ (8002610 <HAL_GPIO_Init+0x2a0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d05e      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023ac:	4a98      	ldr	r2, [pc, #608]	@ (8002610 <HAL_GPIO_Init+0x2a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d875      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023b2:	4a98      	ldr	r2, [pc, #608]	@ (8002614 <HAL_GPIO_Init+0x2a4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d058      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023b8:	4a96      	ldr	r2, [pc, #600]	@ (8002614 <HAL_GPIO_Init+0x2a4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d86f      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023be:	4a96      	ldr	r2, [pc, #600]	@ (8002618 <HAL_GPIO_Init+0x2a8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d052      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023c4:	4a94      	ldr	r2, [pc, #592]	@ (8002618 <HAL_GPIO_Init+0x2a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d869      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ca:	4a94      	ldr	r2, [pc, #592]	@ (800261c <HAL_GPIO_Init+0x2ac>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04c      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023d0:	4a92      	ldr	r2, [pc, #584]	@ (800261c <HAL_GPIO_Init+0x2ac>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d863      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023d6:	4a92      	ldr	r2, [pc, #584]	@ (8002620 <HAL_GPIO_Init+0x2b0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d046      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023dc:	4a90      	ldr	r2, [pc, #576]	@ (8002620 <HAL_GPIO_Init+0x2b0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d85d      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d82a      	bhi.n	800243c <HAL_GPIO_Init+0xcc>
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d859      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ea:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <HAL_GPIO_Init+0x80>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002457 	.word	0x08002457
 80023fc:	08002499 	.word	0x08002499
 8002400:	0800249f 	.word	0x0800249f
 8002404:	0800249f 	.word	0x0800249f
 8002408:	0800249f 	.word	0x0800249f
 800240c:	0800249f 	.word	0x0800249f
 8002410:	0800249f 	.word	0x0800249f
 8002414:	0800249f 	.word	0x0800249f
 8002418:	0800249f 	.word	0x0800249f
 800241c:	0800249f 	.word	0x0800249f
 8002420:	0800249f 	.word	0x0800249f
 8002424:	0800249f 	.word	0x0800249f
 8002428:	0800249f 	.word	0x0800249f
 800242c:	0800249f 	.word	0x0800249f
 8002430:	0800249f 	.word	0x0800249f
 8002434:	0800244d 	.word	0x0800244d
 8002438:	08002461 	.word	0x08002461
 800243c:	4a79      	ldr	r2, [pc, #484]	@ (8002624 <HAL_GPIO_Init+0x2b4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e02c      	b.n	800249e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e029      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	3304      	adds	r3, #4
 8002452:	623b      	str	r3, [r7, #32]
          break;
 8002454:	e024      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	3308      	adds	r3, #8
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e01f      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	330c      	adds	r3, #12
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e01a      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002472:	2304      	movs	r3, #4
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e013      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	611a      	str	r2, [r3, #16]
          break;
 800248a:	e009      	b.n	80024a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800248c:	2308      	movs	r3, #8
 800248e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	615a      	str	r2, [r3, #20]
          break;
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          break;
 800249e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2bff      	cmp	r3, #255	@ 0xff
 80024a4:	d801      	bhi.n	80024aa <HAL_GPIO_Init+0x13a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_Init+0x13e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2bff      	cmp	r3, #255	@ 0xff
 80024b4:	d802      	bhi.n	80024bc <HAL_GPIO_Init+0x14c>
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x152>
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	3b08      	subs	r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	210f      	movs	r1, #15
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80b1 	beq.w	8002652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <HAL_GPIO_Init+0x2b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002628 <HAL_GPIO_Init+0x2b8>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002628 <HAL_GPIO_Init+0x2b8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002508:	4a48      	ldr	r2, [pc, #288]	@ (800262c <HAL_GPIO_Init+0x2bc>)
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a40      	ldr	r2, [pc, #256]	@ (8002630 <HAL_GPIO_Init+0x2c0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_GPIO_Init+0x1ec>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3f      	ldr	r2, [pc, #252]	@ (8002634 <HAL_GPIO_Init+0x2c4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00d      	beq.n	8002558 <HAL_GPIO_Init+0x1e8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3e      	ldr	r2, [pc, #248]	@ (8002638 <HAL_GPIO_Init+0x2c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <HAL_GPIO_Init+0x1e4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3d      	ldr	r2, [pc, #244]	@ (800263c <HAL_GPIO_Init+0x2cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_GPIO_Init+0x1e0>
 800254c:	2303      	movs	r3, #3
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002550:	2304      	movs	r3, #4
 8002552:	e004      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 800255c:	2300      	movs	r3, #0
 800255e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002560:	f002 0203 	and.w	r2, r2, #3
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	4093      	lsls	r3, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800256e:	492f      	ldr	r1, [pc, #188]	@ (800262c <HAL_GPIO_Init+0x2bc>)
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002588:	4b2d      	ldr	r3, [pc, #180]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	492c      	ldr	r1, [pc, #176]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002596:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	43db      	mvns	r3, r3
 800259e:	4928      	ldr	r1, [pc, #160]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4922      	ldr	r1, [pc, #136]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025be:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	491e      	ldr	r1, [pc, #120]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4918      	ldr	r1, [pc, #96]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4914      	ldr	r1, [pc, #80]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d021      	beq.n	8002644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	490e      	ldr	r1, [pc, #56]	@ (8002640 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e021      	b.n	8002652 <HAL_GPIO_Init+0x2e2>
 800260e:	bf00      	nop
 8002610:	10320000 	.word	0x10320000
 8002614:	10310000 	.word	0x10310000
 8002618:	10220000 	.word	0x10220000
 800261c:	10210000 	.word	0x10210000
 8002620:	10120000 	.word	0x10120000
 8002624:	10110000 	.word	0x10110000
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000
 8002630:	40010800 	.word	0x40010800
 8002634:	40010c00 	.word	0x40010c00
 8002638:	40011000 	.word	0x40011000
 800263c:	40011400 	.word	0x40011400
 8002640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_GPIO_Init+0x304>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4909      	ldr	r1, [pc, #36]	@ (8002674 <HAL_GPIO_Init+0x304>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f ae8e 	bne.w	8002384 <HAL_GPIO_Init+0x14>
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	372c      	adds	r7, #44	@ 0x2c
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002694:	e003      	b.n	800269e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e12b      	b.n	8002912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff f92a 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	@ 0x24
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800270c:	f001 fd1e 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a81      	ldr	r2, [pc, #516]	@ (800291c <HAL_I2C_Init+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d807      	bhi.n	800272c <HAL_I2C_Init+0x84>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a80      	ldr	r2, [pc, #512]	@ (8002920 <HAL_I2C_Init+0x278>)
 8002720:	4293      	cmp	r3, r2
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e006      	b.n	800273a <HAL_I2C_Init+0x92>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a7d      	ldr	r2, [pc, #500]	@ (8002924 <HAL_I2C_Init+0x27c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e7      	b.n	8002912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a78      	ldr	r2, [pc, #480]	@ (8002928 <HAL_I2C_Init+0x280>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a6a      	ldr	r2, [pc, #424]	@ (800291c <HAL_I2C_Init+0x274>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d802      	bhi.n	800277c <HAL_I2C_Init+0xd4>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	e009      	b.n	8002790 <HAL_I2C_Init+0xe8>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	4a69      	ldr	r2, [pc, #420]	@ (800292c <HAL_I2C_Init+0x284>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	495c      	ldr	r1, [pc, #368]	@ (800291c <HAL_I2C_Init+0x274>)
 80027ac:	428b      	cmp	r3, r1
 80027ae:	d819      	bhi.n	80027e4 <HAL_I2C_Init+0x13c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e59      	subs	r1, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80027be:	1c59      	adds	r1, r3, #1
 80027c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027c4:	400b      	ands	r3, r1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_I2C_Init+0x138>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e59      	subs	r1, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027de:	e051      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e04f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d111      	bne.n	8002810 <HAL_I2C_Init+0x168>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e012      	b.n	8002836 <HAL_I2C_Init+0x18e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Init+0x196>
 800283a:	2301      	movs	r3, #1
 800283c:	e022      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <HAL_I2C_Init+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e58      	subs	r0, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	440b      	add	r3, r1
 8002854:	fbb0 f3f3 	udiv	r3, r0, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002862:	e00f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6911      	ldr	r1, [r2, #16]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	000186a0 	.word	0x000186a0
 8002920:	001e847f 	.word	0x001e847f
 8002924:	003d08ff 	.word	0x003d08ff
 8002928:	431bde83 	.word	0x431bde83
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294a:	f7ff f9ed 	bl	8001d28 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	f040 80d9 	bne.w	8002b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2319      	movs	r3, #25
 8002964:	2201      	movs	r2, #1
 8002966:	496d      	ldr	r1, [pc, #436]	@ (8002b1c <HAL_I2C_Mem_Write+0x1ec>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fdef 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	e0cc      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Mem_Write+0x56>
 8002982:	2302      	movs	r3, #2
 8002984:	e0c5      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d007      	beq.n	80029ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2221      	movs	r2, #33	@ 0x21
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002b20 <HAL_I2C_Mem_Write+0x1f0>)
 80029ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ee:	88f8      	ldrh	r0, [r7, #6]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	8979      	ldrh	r1, [r7, #10]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4603      	mov	r3, r0
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fc26 	bl	8003250 <I2C_RequestMemoryWrite>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d052      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e081      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 feb4 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06b      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11b      	bne.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d017      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1aa      	bne.n	8002a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fea7 	bl	8003810 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d107      	bne.n	8002ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e016      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	00100002 	.word	0x00100002
 8002b20:	ffff0000 	.word	0xffff0000

08002b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	@ 0x30
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b42:	f7ff f8f1 	bl	8001d28 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 8244 	bne.w	8002fde <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2319      	movs	r3, #25
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4982      	ldr	r1, [pc, #520]	@ (8002d68 <HAL_I2C_Mem_Read+0x244>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fcf3 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e237      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x5a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e230      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d007      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2222      	movs	r2, #34	@ 0x22
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a62      	ldr	r2, [pc, #392]	@ (8002d6c <HAL_I2C_Mem_Read+0x248>)
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be6:	88f8      	ldrh	r0, [r7, #6]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fbc0 	bl	800337c <I2C_RequestMemoryRead>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1ec      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d113      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e1c0      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d11e      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4e:	b672      	cpsid	i
}
 8002c50:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c78:	b662      	cpsie	i
}
 8002c7a:	e035      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d11e      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c94:	b672      	cpsid	i
}
 8002c96:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cbe:	b662      	cpsie	i
}
 8002cc0:	e012      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cd0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ce8:	e166      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f200 811f 	bhi.w	8002f32 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d123      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fdcd 	bl	80038a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e167      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d42:	e139      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d152      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d52:	2200      	movs	r2, #0
 8002d54:	4906      	ldr	r1, [pc, #24]	@ (8002d70 <HAL_I2C_Mem_Read+0x24c>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fbf8 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e13c      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000
 8002d70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dba:	b662      	cpsie	i
}
 8002dbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df0:	e0e2      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	497b      	ldr	r1, [pc, #492]	@ (8002fe8 <HAL_I2C_Mem_Read+0x4c4>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fba5 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0e9      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e52:	4b66      	ldr	r3, [pc, #408]	@ (8002fec <HAL_I2C_Mem_Read+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_I2C_Mem_Read+0x4cc>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a1a      	lsrs	r2, r3, #8
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00da      	lsls	r2, r3, #3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d118      	bne.n	8002eaa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9a:	b662      	cpsie	i
}
 8002e9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e09a      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d1d9      	bne.n	8002e6c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002efa:	b662      	cpsie	i
}
 8002efc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f30:	e042      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fcb2 	bl	80038a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04c      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d118      	bne.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f ae94 	bne.w	8002cea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3728      	adds	r7, #40	@ 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010004 	.word	0x00010004
 8002fec:	20000004 	.word	0x20000004
 8002ff0:	14f8b589 	.word	0x14f8b589

08002ff4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7fe fe90 	bl	8001d28 <HAL_GetTick>
 8003008:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	f040 8111 	bne.w	800323e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2319      	movs	r3, #25
 8003022:	2201      	movs	r2, #1
 8003024:	4988      	ldr	r1, [pc, #544]	@ (8003248 <HAL_I2C_IsDeviceReady+0x254>)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fa90 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	e104      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2C_IsDeviceReady+0x50>
 8003040:	2302      	movs	r3, #2
 8003042:	e0fd      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d007      	beq.n	800306a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2224      	movs	r2, #36	@ 0x24
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a70      	ldr	r2, [pc, #448]	@ (800324c <HAL_I2C_IsDeviceReady+0x258>)
 800308c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800309c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa4e 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c4:	d103      	bne.n	80030ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b6      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fe21 	bl	8001d28 <HAL_GetTick>
 80030e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003116:	e025      	b.n	8003164 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003118:	f7fe fe06 	bl	8001d28 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <HAL_I2C_IsDeviceReady+0x13a>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22a0      	movs	r2, #160	@ 0xa0
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2ba0      	cmp	r3, #160	@ 0xa0
 800316e:	d005      	beq.n	800317c <HAL_I2C_IsDeviceReady+0x188>
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_I2C_IsDeviceReady+0x188>
 8003176:	7dbb      	ldrb	r3, [r7, #22]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0cd      	beq.n	8003118 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d129      	bne.n	80031e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2319      	movs	r3, #25
 80031be:	2201      	movs	r2, #1
 80031c0:	4921      	ldr	r1, [pc, #132]	@ (8003248 <HAL_I2C_IsDeviceReady+0x254>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f9c2 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e036      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e02c      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2319      	movs	r3, #25
 8003206:	2201      	movs	r2, #1
 8003208:	490f      	ldr	r1, [pc, #60]	@ (8003248 <HAL_I2C_IsDeviceReady+0x254>)
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f99e 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e012      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3301      	adds	r3, #1
 800321e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	f4ff af32 	bcc.w	800308e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	00100002 	.word	0x00100002
 800324c:	ffff0000 	.word	0xffff0000

08003250 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	817b      	strh	r3, [r7, #10]
 8003262:	460b      	mov	r3, r1
 8003264:	813b      	strh	r3, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	2200      	movs	r2, #0
 8003282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f960 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a0:	d103      	bne.n	80032aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e05f      	b.n	800336e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	492d      	ldr	r1, [pc, #180]	@ (8003378 <I2C_RequestMemoryWrite+0x128>)
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f9bb 	bl	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04c      	b.n	800336e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa46 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e02b      	b.n	800336e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	e021      	b.n	800336c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	6a39      	ldr	r1, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa20 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2b04      	cmp	r3, #4
 800334c:	d107      	bne.n	800335e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e005      	b.n	800336e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	00010002 	.word	0x00010002

0800337c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	460b      	mov	r3, r1
 8003390:	813b      	strh	r3, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2200      	movs	r2, #0
 80033be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8c2 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033dc:	d103      	bne.n	80033e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e0aa      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	4952      	ldr	r1, [pc, #328]	@ (8003548 <I2C_RequestMemoryRead+0x1cc>)
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f91d 	bl	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e097      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f9a8 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	2b04      	cmp	r3, #4
 800343c:	d107      	bne.n	800344e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e076      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003458:	893b      	ldrh	r3, [r7, #8]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	e021      	b.n	80034a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003474:	6a39      	ldr	r1, [r7, #32]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f982 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e050      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800349e:	893b      	ldrh	r3, [r7, #8]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f967 	bl	8003780 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e035      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f82b 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350a:	d103      	bne.n	8003514 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003512:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e013      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	4906      	ldr	r1, [pc, #24]	@ (8003548 <I2C_RequestMemoryRead+0x1cc>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f886 	bl	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	00010002 	.word	0x00010002

0800354c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355c:	e048      	b.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d044      	beq.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fbdf 	bl	8001d28 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d139      	bne.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10d      	bne.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	43da      	mvns	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	e00c      	b.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d116      	bne.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e023      	b.n	8003638 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10d      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	e00c      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	43da      	mvns	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d093      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364e:	e071      	b.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365e:	d123      	bne.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e067      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d041      	beq.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fe fb3a 	bl	8001d28 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d136      	bne.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10c      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e00b      	b.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e021      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d10c      	bne.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e00b      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	43da      	mvns	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4013      	ands	r3, r2
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f af6d 	bne.w	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f8e3 	bl	800395a <I2C_IsAcknowledgeFailed>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e034      	b.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d028      	beq.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fe fabf 	bl	8001d28 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11d      	bne.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	2b80      	cmp	r3, #128	@ 0x80
 80037c8:	d016      	beq.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d1c3      	bne.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381c:	e034      	b.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f89b 	bl	800395a <I2C_IsAcknowledgeFailed>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e034      	b.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d028      	beq.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fe fa77 	bl	8001d28 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11d      	bne.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d016      	beq.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d1c3      	bne.n	800381e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ac:	e049      	b.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d119      	bne.n	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0210 	mvn.w	r2, #16
 80038c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e030      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f0:	f7fe fa1a 	bl	8001d28 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d302      	bcc.n	8003906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11d      	bne.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	d016      	beq.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d1ae      	bne.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003970:	d11b      	bne.n	80039aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800397a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e272      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8087 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d8:	4b92      	ldr	r3, [pc, #584]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d00c      	beq.n	80039fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d112      	bne.n	8003a16 <HAL_RCC_OscConfig+0x5e>
 80039f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fc:	d10b      	bne.n	8003a16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fe:	4b89      	ldr	r3, [pc, #548]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d06c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x12c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d168      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e24c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x76>
 8003a20:	4b80      	ldr	r3, [pc, #512]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7f      	ldr	r2, [pc, #508]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e02e      	b.n	8003a8c <HAL_RCC_OscConfig+0xd4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b7b      	ldr	r3, [pc, #492]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b78      	ldr	r3, [pc, #480]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a77      	ldr	r2, [pc, #476]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01d      	b.n	8003a8c <HAL_RCC_OscConfig+0xd4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0xbc>
 8003a5a:	4b72      	ldr	r3, [pc, #456]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a71      	ldr	r2, [pc, #452]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b6f      	ldr	r3, [pc, #444]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0xd4>
 8003a74:	4b6b      	ldr	r3, [pc, #428]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6a      	ldr	r2, [pc, #424]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b68      	ldr	r3, [pc, #416]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a67      	ldr	r2, [pc, #412]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe f948 	bl	8001d28 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe f944 	bl	8001d28 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e200      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b5d      	ldr	r3, [pc, #372]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0xe4>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe f934 	bl	8001d28 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f930 	bl	8001d28 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1ec      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x10c>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d063      	beq.n	8003bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af2:	4b4c      	ldr	r3, [pc, #304]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003afe:	4b49      	ldr	r3, [pc, #292]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d11c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x18c>
 8003b0a:	4b46      	ldr	r3, [pc, #280]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d116      	bne.n	8003b44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x176>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e1c0      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4939      	ldr	r1, [pc, #228]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	e03a      	b.n	8003bba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4c:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe f8e9 	bl	8001d28 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe f8e5 	bl	8001d28 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1a1      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4927      	ldr	r1, [pc, #156]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
 8003b8c:	e015      	b.n	8003bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8e:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <HAL_RCC_OscConfig+0x270>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe f8c8 	bl	8001d28 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fe f8c4 	bl	8001d28 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e180      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d03a      	beq.n	8003c3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d019      	beq.n	8003c02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bce:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <HAL_RCC_OscConfig+0x274>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe f8a8 	bl	8001d28 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fe f8a4 	bl	8001d28 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e160      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f000 faba 	bl	8004174 <RCC_Delay>
 8003c00:	e01c      	b.n	8003c3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <HAL_RCC_OscConfig+0x274>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c08:	f7fe f88e 	bl	8001d28 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0e:	e00f      	b.n	8003c30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fe f88a 	bl	8001d28 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d908      	bls.n	8003c30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e146      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	42420000 	.word	0x42420000
 8003c2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b92      	ldr	r3, [pc, #584]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e9      	bne.n	8003c10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a6 	beq.w	8003d96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	4a87      	ldr	r2, [pc, #540]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	61d3      	str	r3, [r2, #28]
 8003c66:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b82      	ldr	r3, [pc, #520]	@ (8003e80 <HAL_RCC_OscConfig+0x4c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b7f      	ldr	r3, [pc, #508]	@ (8003e80 <HAL_RCC_OscConfig+0x4c8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7e      	ldr	r2, [pc, #504]	@ (8003e80 <HAL_RCC_OscConfig+0x4c8>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe f84b 	bl	8001d28 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fe f847 	bl	8001d28 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	@ 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e103      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b75      	ldr	r3, [pc, #468]	@ (8003e80 <HAL_RCC_OscConfig+0x4c8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x312>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	e02d      	b.n	8003d26 <HAL_RCC_OscConfig+0x36e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a69      	ldr	r2, [pc, #420]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6213      	str	r3, [r2, #32]
 8003cde:	4b67      	ldr	r3, [pc, #412]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4a66      	ldr	r2, [pc, #408]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6213      	str	r3, [r2, #32]
 8003cea:	e01c      	b.n	8003d26 <HAL_RCC_OscConfig+0x36e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x356>
 8003cf4:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4a60      	ldr	r2, [pc, #384]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6213      	str	r3, [r2, #32]
 8003d00:	4b5e      	ldr	r3, [pc, #376]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4a5d      	ldr	r2, [pc, #372]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6213      	str	r3, [r2, #32]
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0x36e>
 8003d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4a5a      	ldr	r2, [pc, #360]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6213      	str	r3, [r2, #32]
 8003d1a:	4b58      	ldr	r3, [pc, #352]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4a57      	ldr	r2, [pc, #348]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fffb 	bl	8001d28 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fd fff7 	bl	8001d28 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0b1      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ee      	beq.n	8003d36 <HAL_RCC_OscConfig+0x37e>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd ffe5 	bl	8001d28 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd ffe1 	bl	8001d28 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e09b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8087 	beq.w	8003eae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da0:	4b36      	ldr	r3, [pc, #216]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d061      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d146      	bne.n	8003e42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b33      	ldr	r3, [pc, #204]	@ (8003e84 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fd ffb5 	bl	8001d28 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd ffb1 	bl	8001d28 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e06d      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd4:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de8:	d108      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dea:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4921      	ldr	r1, [pc, #132]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a19      	ldr	r1, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	491b      	ldr	r1, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd ff85 	bl	8001d28 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fd ff81 	bl	8001d28 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e03d      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x46a>
 8003e40:	e035      	b.n	8003eae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd ff6e 	bl	8001d28 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd ff6a 	bl	8001d28 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e026      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x498>
 8003e6e:	e01e      	b.n	8003eae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e019      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_OscConfig+0x500>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000

08003ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0d0      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d910      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b67      	ldr	r3, [pc, #412]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	4965      	ldr	r1, [pc, #404]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d040      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d115      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e073      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06b      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b39      	ldr	r3, [pc, #228]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4936      	ldr	r1, [pc, #216]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fd febc 	bl	8001d28 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fd feb8 	bl	8001d28 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e053      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2d      	ldr	r3, [pc, #180]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b27      	ldr	r3, [pc, #156]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d210      	bcs.n	800400c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 0207 	bic.w	r2, r3, #7
 8003ff2:	4922      	ldr	r1, [pc, #136]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004036:	4b12      	ldr	r3, [pc, #72]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	@ (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <HAL_RCC_ClockConfig+0x1cc>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_RCC_ClockConfig+0x1d0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fe1a 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40022000 	.word	0x40022000
 8004080:	40021000 	.word	0x40021000
 8004084:	08005eb8 	.word	0x08005eb8
 8004088:	20000004 	.word	0x20000004
 800408c:	20000008 	.word	0x20000008

08004090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x94>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d002      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x30>
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x36>
 80040be:	e027      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c0:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x98>)
 80040c2:	613b      	str	r3, [r7, #16]
      break;
 80040c4:	e027      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	0c9b      	lsrs	r3, r3, #18
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	4a17      	ldr	r2, [pc, #92]	@ (800412c <HAL_RCC_GetSysClockFreq+0x9c>)
 80040d0:	5cd3      	ldrb	r3, [r2, r3]
 80040d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040de:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x94>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	0c5b      	lsrs	r3, r3, #17
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	4a11      	ldr	r2, [pc, #68]	@ (8004130 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x98>)
 80040f2:	fb03 f202 	mul.w	r2, r3, r2
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	e004      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0c      	ldr	r2, [pc, #48]	@ (8004134 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	613b      	str	r3, [r7, #16]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x98>)
 8004112:	613b      	str	r3, [r7, #16]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	693b      	ldr	r3, [r7, #16]
}
 8004118:	4618      	mov	r0, r3
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	007a1200 	.word	0x007a1200
 800412c:	08005ed0 	.word	0x08005ed0
 8004130:	08005ee0 	.word	0x08005ee0
 8004134:	003d0900 	.word	0x003d0900

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b02      	ldr	r3, [pc, #8]	@ (8004148 <HAL_RCC_GetHCLKFreq+0x10>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000004 	.word	0x20000004

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff2 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	08005ec8 	.word	0x08005ec8

08004174 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <RCC_Delay+0x34>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <RCC_Delay+0x38>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0a5b      	lsrs	r3, r3, #9
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004190:	bf00      	nop
  }
  while (Delay --);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	60fa      	str	r2, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f9      	bne.n	8004190 <RCC_Delay+0x1c>
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000004 	.word	0x20000004
 80041ac:	10624dd3 	.word	0x10624dd3

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d07d      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10d      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	61d3      	str	r3, [r2, #28]
 80041e8:	4b49      	ldr	r3, [pc, #292]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b46      	ldr	r3, [pc, #280]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d118      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004204:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a42      	ldr	r2, [pc, #264]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004210:	f7fd fd8a 	bl	8001d28 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	e008      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004218:	f7fd fd86 	bl	8001d28 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	@ 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e06d      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b3a      	ldr	r3, [pc, #232]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02e      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d027      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004254:	4b2e      	ldr	r3, [pc, #184]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800425e:	4b2e      	ldr	r3, [pc, #184]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004264:	4b2c      	ldr	r3, [pc, #176]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800426a:	4a29      	ldr	r2, [pc, #164]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d014      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fd fd55 	bl	8001d28 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd fd51 	bl	8001d28 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e036      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ee      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4917      	ldr	r1, [pc, #92]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b14      	ldr	r3, [pc, #80]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	490b      	ldr	r1, [pc, #44]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4904      	ldr	r1, [pc, #16]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	40007000 	.word	0x40007000
 8004318:	42420440 	.word	0x42420440

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e041      	b.n	80043b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd fb2e 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fafc 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <HAL_TIM_Base_Start+0x88>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_Base_Start+0x48>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_Base_Start+0x48>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <HAL_TIM_Base_Start+0x8c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_Base_Start+0x48>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a13      	ldr	r2, [pc, #76]	@ (800444c <HAL_TIM_Base_Start+0x90>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d010      	beq.n	8004438 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	e007      	b.n	8004438 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800

08004450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e041      	b.n	80044e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f839 	bl	80044ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fa62 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d109      	bne.n	8004524 <HAL_TIM_PWM_Start+0x24>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e022      	b.n	800456a <HAL_TIM_PWM_Start+0x6a>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b04      	cmp	r3, #4
 8004528:	d109      	bne.n	800453e <HAL_TIM_PWM_Start+0x3e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e015      	b.n	800456a <HAL_TIM_PWM_Start+0x6a>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d109      	bne.n	8004558 <HAL_TIM_PWM_Start+0x58>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e008      	b.n	800456a <HAL_TIM_PWM_Start+0x6a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e05e      	b.n	8004630 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0x82>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004580:	e013      	b.n	80045aa <HAL_TIM_PWM_Start+0xaa>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0x92>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004590:	e00b      	b.n	80045aa <HAL_TIM_PWM_Start+0xaa>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a0:	e003      	b.n	80045aa <HAL_TIM_PWM_Start+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fc50 	bl	8004e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_TIM_PWM_Start+0x138>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d107      	bne.n	80045d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <HAL_TIM_PWM_Start+0x138>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIM_PWM_Start+0xfa>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e4:	d009      	beq.n	80045fa <HAL_TIM_PWM_Start+0xfa>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a14      	ldr	r2, [pc, #80]	@ (800463c <HAL_TIM_PWM_Start+0x13c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIM_PWM_Start+0xfa>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <HAL_TIM_PWM_Start+0x140>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d010      	beq.n	800462e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	e007      	b.n	800462e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800

08004644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800465e:	2302      	movs	r3, #2
 8004660:	e0ae      	b.n	80047c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b0c      	cmp	r3, #12
 800466e:	f200 809f 	bhi.w	80047b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004672:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	080046ad 	.word	0x080046ad
 800467c:	080047b1 	.word	0x080047b1
 8004680:	080047b1 	.word	0x080047b1
 8004684:	080047b1 	.word	0x080047b1
 8004688:	080046ed 	.word	0x080046ed
 800468c:	080047b1 	.word	0x080047b1
 8004690:	080047b1 	.word	0x080047b1
 8004694:	080047b1 	.word	0x080047b1
 8004698:	0800472f 	.word	0x0800472f
 800469c:	080047b1 	.word	0x080047b1
 80046a0:	080047b1 	.word	0x080047b1
 80046a4:	080047b1 	.word	0x080047b1
 80046a8:	0800476f 	.word	0x0800476f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f9b2 	bl	8004a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0208 	orr.w	r2, r2, #8
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	619a      	str	r2, [r3, #24]
      break;
 80046ea:	e064      	b.n	80047b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f9f8 	bl	8004ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	021a      	lsls	r2, r3, #8
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]
      break;
 800472c:	e043      	b.n	80047b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fa41 	bl	8004bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0208 	orr.w	r2, r2, #8
 8004748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0204 	bic.w	r2, r2, #4
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	61da      	str	r2, [r3, #28]
      break;
 800476c:	e023      	b.n	80047b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa8b 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	021a      	lsls	r2, r3, #8
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	61da      	str	r2, [r3, #28]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75fb      	strb	r3, [r7, #23]
      break;
 80047b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047be:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0b4      	b.n	800494e <HAL_TIM_ConfigClockSource+0x186>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800480a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481c:	d03e      	beq.n	800489c <HAL_TIM_ConfigClockSource+0xd4>
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004822:	f200 8087 	bhi.w	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482a:	f000 8086 	beq.w	800493a <HAL_TIM_ConfigClockSource+0x172>
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004832:	d87f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b70      	cmp	r3, #112	@ 0x70
 8004836:	d01a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xa6>
 8004838:	2b70      	cmp	r3, #112	@ 0x70
 800483a:	d87b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b60      	cmp	r3, #96	@ 0x60
 800483e:	d050      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004840:	2b60      	cmp	r3, #96	@ 0x60
 8004842:	d877      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b50      	cmp	r3, #80	@ 0x50
 8004846:	d03c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004848:	2b50      	cmp	r3, #80	@ 0x50
 800484a:	d873      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b40      	cmp	r3, #64	@ 0x40
 800484e:	d058      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x13a>
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d86f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b30      	cmp	r3, #48	@ 0x30
 8004856:	d064      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b30      	cmp	r3, #48	@ 0x30
 800485a:	d86b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b20      	cmp	r3, #32
 800485e:	d060      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d867      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b10      	cmp	r3, #16
 800486a:	d05a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	e062      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	f000 facc 	bl	8004e1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	609a      	str	r2, [r3, #8]
      break;
 800489a:	e04f      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	f000 fab5 	bl	8004e1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048be:	609a      	str	r2, [r3, #8]
      break;
 80048c0:	e03c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fa2c 	bl	8004d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2150      	movs	r1, #80	@ 0x50
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa83 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e02c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 fa4a 	bl	8004d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2160      	movs	r1, #96	@ 0x60
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fa73 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004900:	e01c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 fa0c 	bl	8004d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2140      	movs	r1, #64	@ 0x40
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fa63 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004920:	e00c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f000 fa5a 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004932:	e003      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      break;
 8004938:	e000      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800493a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a29      	ldr	r2, [pc, #164]	@ (8004a10 <TIM_Base_SetConfig+0xb8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x30>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x30>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a26      	ldr	r2, [pc, #152]	@ (8004a14 <TIM_Base_SetConfig+0xbc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x30>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a25      	ldr	r2, [pc, #148]	@ (8004a18 <TIM_Base_SetConfig+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <TIM_Base_SetConfig+0xb8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x62>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x62>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <TIM_Base_SetConfig+0xbc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x62>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <TIM_Base_SetConfig+0xc0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <TIM_Base_SetConfig+0xb8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	615a      	str	r2, [r3, #20]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800

08004a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f023 0201 	bic.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 0302 	bic.w	r3, r3, #2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <TIM_OC1_SetConfig+0xc8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a13      	ldr	r2, [pc, #76]	@ (8004ae4 <TIM_OC1_SetConfig+0xc8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d111      	bne.n	8004abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40012c00 	.word	0x40012c00

08004ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f023 0210 	bic.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0320 	bic.w	r3, r3, #32
 8004b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <TIM_OC2_SetConfig+0xd0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10d      	bne.n	8004b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a14      	ldr	r2, [pc, #80]	@ (8004bb8 <TIM_OC2_SetConfig+0xd0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d113      	bne.n	8004b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00

08004bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	@ (8004c8c <TIM_OC3_SetConfig+0xd0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10d      	bne.n	8004c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <TIM_OC3_SetConfig+0xd0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d113      	bne.n	8004c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0f      	ldr	r2, [pc, #60]	@ (8004d28 <TIM_OC4_SetConfig+0x98>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00

08004d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 030a 	bic.w	r3, r3, #10
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0210 	bic.w	r2, r3, #16
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	031b      	lsls	r3, r3, #12
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f043 0307 	orr.w	r3, r3, #7
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b087      	sub	sp, #28
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	021a      	lsls	r2, r3, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	609a      	str	r2, [r3, #8]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1a      	ldr	r2, [r3, #32]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	431a      	orrs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e046      	b.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d009      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a10      	ldr	r2, [pc, #64]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d10c      	bne.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800

08004f5c <std>:
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	4604      	mov	r4, r0
 8004f62:	e9c0 3300 	strd	r3, r3, [r0]
 8004f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f6a:	6083      	str	r3, [r0, #8]
 8004f6c:	8181      	strh	r1, [r0, #12]
 8004f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f70:	81c2      	strh	r2, [r0, #14]
 8004f72:	6183      	str	r3, [r0, #24]
 8004f74:	4619      	mov	r1, r3
 8004f76:	2208      	movs	r2, #8
 8004f78:	305c      	adds	r0, #92	@ 0x5c
 8004f7a:	f000 f9e7 	bl	800534c <memset>
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb4 <std+0x58>)
 8004f80:	6224      	str	r4, [r4, #32]
 8004f82:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f84:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb8 <std+0x5c>)
 8004f86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f88:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <std+0x60>)
 8004f8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <std+0x64>)
 8004f8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <std+0x68>)
 8004f92:	429c      	cmp	r4, r3
 8004f94:	d006      	beq.n	8004fa4 <std+0x48>
 8004f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f9a:	4294      	cmp	r4, r2
 8004f9c:	d002      	beq.n	8004fa4 <std+0x48>
 8004f9e:	33d0      	adds	r3, #208	@ 0xd0
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d105      	bne.n	8004fb0 <std+0x54>
 8004fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fac:	f000 ba46 	b.w	800543c <__retarget_lock_init_recursive>
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	bf00      	nop
 8004fb4:	0800519d 	.word	0x0800519d
 8004fb8:	080051bf 	.word	0x080051bf
 8004fbc:	080051f7 	.word	0x080051f7
 8004fc0:	0800521b 	.word	0x0800521b
 8004fc4:	20000180 	.word	0x20000180

08004fc8 <stdio_exit_handler>:
 8004fc8:	4a02      	ldr	r2, [pc, #8]	@ (8004fd4 <stdio_exit_handler+0xc>)
 8004fca:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <stdio_exit_handler+0x10>)
 8004fcc:	4803      	ldr	r0, [pc, #12]	@ (8004fdc <stdio_exit_handler+0x14>)
 8004fce:	f000 b869 	b.w	80050a4 <_fwalk_sglue>
 8004fd2:	bf00      	nop
 8004fd4:	20000010 	.word	0x20000010
 8004fd8:	08005731 	.word	0x08005731
 8004fdc:	20000020 	.word	0x20000020

08004fe0 <cleanup_stdio>:
 8004fe0:	6841      	ldr	r1, [r0, #4]
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <cleanup_stdio+0x34>)
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	4604      	mov	r4, r0
 8004fea:	d001      	beq.n	8004ff0 <cleanup_stdio+0x10>
 8004fec:	f000 fba0 	bl	8005730 <_fflush_r>
 8004ff0:	68a1      	ldr	r1, [r4, #8]
 8004ff2:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <cleanup_stdio+0x38>)
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	d002      	beq.n	8004ffe <cleanup_stdio+0x1e>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fb99 	bl	8005730 <_fflush_r>
 8004ffe:	68e1      	ldr	r1, [r4, #12]
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <cleanup_stdio+0x3c>)
 8005002:	4299      	cmp	r1, r3
 8005004:	d004      	beq.n	8005010 <cleanup_stdio+0x30>
 8005006:	4620      	mov	r0, r4
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 bb90 	b.w	8005730 <_fflush_r>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	20000180 	.word	0x20000180
 8005018:	200001e8 	.word	0x200001e8
 800501c:	20000250 	.word	0x20000250

08005020 <global_stdio_init.part.0>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <global_stdio_init.part.0+0x30>)
 8005024:	4c0b      	ldr	r4, [pc, #44]	@ (8005054 <global_stdio_init.part.0+0x34>)
 8005026:	4a0c      	ldr	r2, [pc, #48]	@ (8005058 <global_stdio_init.part.0+0x38>)
 8005028:	4620      	mov	r0, r4
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	2104      	movs	r1, #4
 800502e:	2200      	movs	r2, #0
 8005030:	f7ff ff94 	bl	8004f5c <std>
 8005034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005038:	2201      	movs	r2, #1
 800503a:	2109      	movs	r1, #9
 800503c:	f7ff ff8e 	bl	8004f5c <std>
 8005040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005044:	2202      	movs	r2, #2
 8005046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504a:	2112      	movs	r1, #18
 800504c:	f7ff bf86 	b.w	8004f5c <std>
 8005050:	200002b8 	.word	0x200002b8
 8005054:	20000180 	.word	0x20000180
 8005058:	08004fc9 	.word	0x08004fc9

0800505c <__sfp_lock_acquire>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__sfp_lock_acquire+0x8>)
 800505e:	f000 b9ee 	b.w	800543e <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	200002c1 	.word	0x200002c1

08005068 <__sfp_lock_release>:
 8005068:	4801      	ldr	r0, [pc, #4]	@ (8005070 <__sfp_lock_release+0x8>)
 800506a:	f000 b9e9 	b.w	8005440 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	200002c1 	.word	0x200002c1

08005074 <__sinit>:
 8005074:	b510      	push	{r4, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	f7ff fff0 	bl	800505c <__sfp_lock_acquire>
 800507c:	6a23      	ldr	r3, [r4, #32]
 800507e:	b11b      	cbz	r3, 8005088 <__sinit+0x14>
 8005080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005084:	f7ff bff0 	b.w	8005068 <__sfp_lock_release>
 8005088:	4b04      	ldr	r3, [pc, #16]	@ (800509c <__sinit+0x28>)
 800508a:	6223      	str	r3, [r4, #32]
 800508c:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <__sinit+0x2c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f5      	bne.n	8005080 <__sinit+0xc>
 8005094:	f7ff ffc4 	bl	8005020 <global_stdio_init.part.0>
 8005098:	e7f2      	b.n	8005080 <__sinit+0xc>
 800509a:	bf00      	nop
 800509c:	08004fe1 	.word	0x08004fe1
 80050a0:	200002b8 	.word	0x200002b8

080050a4 <_fwalk_sglue>:
 80050a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a8:	4607      	mov	r7, r0
 80050aa:	4688      	mov	r8, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	2600      	movs	r6, #0
 80050b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050b4:	f1b9 0901 	subs.w	r9, r9, #1
 80050b8:	d505      	bpl.n	80050c6 <_fwalk_sglue+0x22>
 80050ba:	6824      	ldr	r4, [r4, #0]
 80050bc:	2c00      	cmp	r4, #0
 80050be:	d1f7      	bne.n	80050b0 <_fwalk_sglue+0xc>
 80050c0:	4630      	mov	r0, r6
 80050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c6:	89ab      	ldrh	r3, [r5, #12]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d907      	bls.n	80050dc <_fwalk_sglue+0x38>
 80050cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050d0:	3301      	adds	r3, #1
 80050d2:	d003      	beq.n	80050dc <_fwalk_sglue+0x38>
 80050d4:	4629      	mov	r1, r5
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	4306      	orrs	r6, r0
 80050dc:	3568      	adds	r5, #104	@ 0x68
 80050de:	e7e9      	b.n	80050b4 <_fwalk_sglue+0x10>

080050e0 <_puts_r>:
 80050e0:	6a03      	ldr	r3, [r0, #32]
 80050e2:	b570      	push	{r4, r5, r6, lr}
 80050e4:	4605      	mov	r5, r0
 80050e6:	460e      	mov	r6, r1
 80050e8:	6884      	ldr	r4, [r0, #8]
 80050ea:	b90b      	cbnz	r3, 80050f0 <_puts_r+0x10>
 80050ec:	f7ff ffc2 	bl	8005074 <__sinit>
 80050f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050f2:	07db      	lsls	r3, r3, #31
 80050f4:	d405      	bmi.n	8005102 <_puts_r+0x22>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	0598      	lsls	r0, r3, #22
 80050fa:	d402      	bmi.n	8005102 <_puts_r+0x22>
 80050fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050fe:	f000 f99e 	bl	800543e <__retarget_lock_acquire_recursive>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	0719      	lsls	r1, r3, #28
 8005106:	d502      	bpl.n	800510e <_puts_r+0x2e>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d135      	bne.n	800517a <_puts_r+0x9a>
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f8c5 	bl	80052a0 <__swsetup_r>
 8005116:	b380      	cbz	r0, 800517a <_puts_r+0x9a>
 8005118:	f04f 35ff 	mov.w	r5, #4294967295
 800511c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800511e:	07da      	lsls	r2, r3, #31
 8005120:	d405      	bmi.n	800512e <_puts_r+0x4e>
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	059b      	lsls	r3, r3, #22
 8005126:	d402      	bmi.n	800512e <_puts_r+0x4e>
 8005128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512a:	f000 f989 	bl	8005440 <__retarget_lock_release_recursive>
 800512e:	4628      	mov	r0, r5
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	2b00      	cmp	r3, #0
 8005134:	da04      	bge.n	8005140 <_puts_r+0x60>
 8005136:	69a2      	ldr	r2, [r4, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	dc17      	bgt.n	800516c <_puts_r+0x8c>
 800513c:	290a      	cmp	r1, #10
 800513e:	d015      	beq.n	800516c <_puts_r+0x8c>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	7019      	strb	r1, [r3, #0]
 8005148:	68a3      	ldr	r3, [r4, #8]
 800514a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800514e:	3b01      	subs	r3, #1
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	2900      	cmp	r1, #0
 8005154:	d1ed      	bne.n	8005132 <_puts_r+0x52>
 8005156:	2b00      	cmp	r3, #0
 8005158:	da11      	bge.n	800517e <_puts_r+0x9e>
 800515a:	4622      	mov	r2, r4
 800515c:	210a      	movs	r1, #10
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f85f 	bl	8005222 <__swbuf_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d0d7      	beq.n	8005118 <_puts_r+0x38>
 8005168:	250a      	movs	r5, #10
 800516a:	e7d7      	b.n	800511c <_puts_r+0x3c>
 800516c:	4622      	mov	r2, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f857 	bl	8005222 <__swbuf_r>
 8005174:	3001      	adds	r0, #1
 8005176:	d1e7      	bne.n	8005148 <_puts_r+0x68>
 8005178:	e7ce      	b.n	8005118 <_puts_r+0x38>
 800517a:	3e01      	subs	r6, #1
 800517c:	e7e4      	b.n	8005148 <_puts_r+0x68>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	6022      	str	r2, [r4, #0]
 8005184:	220a      	movs	r2, #10
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e7ee      	b.n	8005168 <_puts_r+0x88>
	...

0800518c <puts>:
 800518c:	4b02      	ldr	r3, [pc, #8]	@ (8005198 <puts+0xc>)
 800518e:	4601      	mov	r1, r0
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f7ff bfa5 	b.w	80050e0 <_puts_r>
 8005196:	bf00      	nop
 8005198:	2000001c 	.word	0x2000001c

0800519c <__sread>:
 800519c:	b510      	push	{r4, lr}
 800519e:	460c      	mov	r4, r1
 80051a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a4:	f000 f8fc 	bl	80053a0 <_read_r>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	bfab      	itete	ge
 80051ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051ae:	89a3      	ldrhlt	r3, [r4, #12]
 80051b0:	181b      	addge	r3, r3, r0
 80051b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051b6:	bfac      	ite	ge
 80051b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051ba:	81a3      	strhlt	r3, [r4, #12]
 80051bc:	bd10      	pop	{r4, pc}

080051be <__swrite>:
 80051be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	461f      	mov	r7, r3
 80051c4:	898b      	ldrh	r3, [r1, #12]
 80051c6:	4605      	mov	r5, r0
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	460c      	mov	r4, r1
 80051cc:	4616      	mov	r6, r2
 80051ce:	d505      	bpl.n	80051dc <__swrite+0x1e>
 80051d0:	2302      	movs	r3, #2
 80051d2:	2200      	movs	r2, #0
 80051d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d8:	f000 f8d0 	bl	800537c <_lseek_r>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	4632      	mov	r2, r6
 80051e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	4628      	mov	r0, r5
 80051e8:	463b      	mov	r3, r7
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	f000 b8e7 	b.w	80053c4 <_write_r>

080051f6 <__sseek>:
 80051f6:	b510      	push	{r4, lr}
 80051f8:	460c      	mov	r4, r1
 80051fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fe:	f000 f8bd 	bl	800537c <_lseek_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	bf15      	itete	ne
 8005208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800520a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800520e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005212:	81a3      	strheq	r3, [r4, #12]
 8005214:	bf18      	it	ne
 8005216:	81a3      	strhne	r3, [r4, #12]
 8005218:	bd10      	pop	{r4, pc}

0800521a <__sclose>:
 800521a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521e:	f000 b89d 	b.w	800535c <_close_r>

08005222 <__swbuf_r>:
 8005222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005224:	460e      	mov	r6, r1
 8005226:	4614      	mov	r4, r2
 8005228:	4605      	mov	r5, r0
 800522a:	b118      	cbz	r0, 8005234 <__swbuf_r+0x12>
 800522c:	6a03      	ldr	r3, [r0, #32]
 800522e:	b90b      	cbnz	r3, 8005234 <__swbuf_r+0x12>
 8005230:	f7ff ff20 	bl	8005074 <__sinit>
 8005234:	69a3      	ldr	r3, [r4, #24]
 8005236:	60a3      	str	r3, [r4, #8]
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	071a      	lsls	r2, r3, #28
 800523c:	d501      	bpl.n	8005242 <__swbuf_r+0x20>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	b943      	cbnz	r3, 8005254 <__swbuf_r+0x32>
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f000 f82b 	bl	80052a0 <__swsetup_r>
 800524a:	b118      	cbz	r0, 8005254 <__swbuf_r+0x32>
 800524c:	f04f 37ff 	mov.w	r7, #4294967295
 8005250:	4638      	mov	r0, r7
 8005252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	6922      	ldr	r2, [r4, #16]
 8005258:	b2f6      	uxtb	r6, r6
 800525a:	1a98      	subs	r0, r3, r2
 800525c:	6963      	ldr	r3, [r4, #20]
 800525e:	4637      	mov	r7, r6
 8005260:	4283      	cmp	r3, r0
 8005262:	dc05      	bgt.n	8005270 <__swbuf_r+0x4e>
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	f000 fa62 	bl	8005730 <_fflush_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	d1ed      	bne.n	800524c <__swbuf_r+0x2a>
 8005270:	68a3      	ldr	r3, [r4, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	60a3      	str	r3, [r4, #8]
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	701e      	strb	r6, [r3, #0]
 800527e:	6962      	ldr	r2, [r4, #20]
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	429a      	cmp	r2, r3
 8005284:	d004      	beq.n	8005290 <__swbuf_r+0x6e>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	07db      	lsls	r3, r3, #31
 800528a:	d5e1      	bpl.n	8005250 <__swbuf_r+0x2e>
 800528c:	2e0a      	cmp	r6, #10
 800528e:	d1df      	bne.n	8005250 <__swbuf_r+0x2e>
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f000 fa4c 	bl	8005730 <_fflush_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	d0d9      	beq.n	8005250 <__swbuf_r+0x2e>
 800529c:	e7d6      	b.n	800524c <__swbuf_r+0x2a>
	...

080052a0 <__swsetup_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <__swsetup_r+0xa8>)
 80052a4:	4605      	mov	r5, r0
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	460c      	mov	r4, r1
 80052aa:	b118      	cbz	r0, 80052b4 <__swsetup_r+0x14>
 80052ac:	6a03      	ldr	r3, [r0, #32]
 80052ae:	b90b      	cbnz	r3, 80052b4 <__swsetup_r+0x14>
 80052b0:	f7ff fee0 	bl	8005074 <__sinit>
 80052b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b8:	0719      	lsls	r1, r3, #28
 80052ba:	d422      	bmi.n	8005302 <__swsetup_r+0x62>
 80052bc:	06da      	lsls	r2, r3, #27
 80052be:	d407      	bmi.n	80052d0 <__swsetup_r+0x30>
 80052c0:	2209      	movs	r2, #9
 80052c2:	602a      	str	r2, [r5, #0]
 80052c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	e033      	b.n	8005338 <__swsetup_r+0x98>
 80052d0:	0758      	lsls	r0, r3, #29
 80052d2:	d512      	bpl.n	80052fa <__swsetup_r+0x5a>
 80052d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052d6:	b141      	cbz	r1, 80052ea <__swsetup_r+0x4a>
 80052d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052dc:	4299      	cmp	r1, r3
 80052de:	d002      	beq.n	80052e6 <__swsetup_r+0x46>
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 f8af 	bl	8005444 <_free_r>
 80052e6:	2300      	movs	r3, #0
 80052e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	2300      	movs	r3, #0
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f043 0308 	orr.w	r3, r3, #8
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	6923      	ldr	r3, [r4, #16]
 8005304:	b94b      	cbnz	r3, 800531a <__swsetup_r+0x7a>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005310:	d003      	beq.n	800531a <__swsetup_r+0x7a>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 fa58 	bl	80057ca <__smakebuf_r>
 800531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531e:	f013 0201 	ands.w	r2, r3, #1
 8005322:	d00a      	beq.n	800533a <__swsetup_r+0x9a>
 8005324:	2200      	movs	r2, #0
 8005326:	60a2      	str	r2, [r4, #8]
 8005328:	6962      	ldr	r2, [r4, #20]
 800532a:	4252      	negs	r2, r2
 800532c:	61a2      	str	r2, [r4, #24]
 800532e:	6922      	ldr	r2, [r4, #16]
 8005330:	b942      	cbnz	r2, 8005344 <__swsetup_r+0xa4>
 8005332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005336:	d1c5      	bne.n	80052c4 <__swsetup_r+0x24>
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	0799      	lsls	r1, r3, #30
 800533c:	bf58      	it	pl
 800533e:	6962      	ldrpl	r2, [r4, #20]
 8005340:	60a2      	str	r2, [r4, #8]
 8005342:	e7f4      	b.n	800532e <__swsetup_r+0x8e>
 8005344:	2000      	movs	r0, #0
 8005346:	e7f7      	b.n	8005338 <__swsetup_r+0x98>
 8005348:	2000001c 	.word	0x2000001c

0800534c <memset>:
 800534c:	4603      	mov	r3, r0
 800534e:	4402      	add	r2, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <_close_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	2300      	movs	r3, #0
 8005360:	4d05      	ldr	r5, [pc, #20]	@ (8005378 <_close_r+0x1c>)
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f7fc fbf3 	bl	8001b52 <_close>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_close_r+0x1a>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_close_r+0x1a>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	200002bc 	.word	0x200002bc

0800537c <_lseek_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	2200      	movs	r2, #0
 8005386:	4d05      	ldr	r5, [pc, #20]	@ (800539c <_lseek_r+0x20>)
 8005388:	602a      	str	r2, [r5, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f7fc fc05 	bl	8001b9a <_lseek>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_lseek_r+0x1e>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_lseek_r+0x1e>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	200002bc 	.word	0x200002bc

080053a0 <_read_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	2200      	movs	r2, #0
 80053aa:	4d05      	ldr	r5, [pc, #20]	@ (80053c0 <_read_r+0x20>)
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fc fb96 	bl	8001ae0 <_read>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_read_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_read_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200002bc 	.word	0x200002bc

080053c4 <_write_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	2200      	movs	r2, #0
 80053ce:	4d05      	ldr	r5, [pc, #20]	@ (80053e4 <_write_r+0x20>)
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fc fba1 	bl	8001b1a <_write>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_write_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_write_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200002bc 	.word	0x200002bc

080053e8 <__errno>:
 80053e8:	4b01      	ldr	r3, [pc, #4]	@ (80053f0 <__errno+0x8>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	2000001c 	.word	0x2000001c

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	2600      	movs	r6, #0
 80053f8:	4d0c      	ldr	r5, [pc, #48]	@ (800542c <__libc_init_array+0x38>)
 80053fa:	4c0d      	ldr	r4, [pc, #52]	@ (8005430 <__libc_init_array+0x3c>)
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	f000 fcbc 	bl	8005d80 <_init>
 8005408:	2600      	movs	r6, #0
 800540a:	4d0a      	ldr	r5, [pc, #40]	@ (8005434 <__libc_init_array+0x40>)
 800540c:	4c0a      	ldr	r4, [pc, #40]	@ (8005438 <__libc_init_array+0x44>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f855 3b04 	ldr.w	r3, [r5], #4
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f855 3b04 	ldr.w	r3, [r5], #4
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	08005f58 	.word	0x08005f58
 8005430:	08005f58 	.word	0x08005f58
 8005434:	08005f58 	.word	0x08005f58
 8005438:	08005f5c 	.word	0x08005f5c

0800543c <__retarget_lock_init_recursive>:
 800543c:	4770      	bx	lr

0800543e <__retarget_lock_acquire_recursive>:
 800543e:	4770      	bx	lr

08005440 <__retarget_lock_release_recursive>:
 8005440:	4770      	bx	lr
	...

08005444 <_free_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4605      	mov	r5, r0
 8005448:	2900      	cmp	r1, #0
 800544a:	d040      	beq.n	80054ce <_free_r+0x8a>
 800544c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005450:	1f0c      	subs	r4, r1, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfb8      	it	lt
 8005456:	18e4      	addlt	r4, r4, r3
 8005458:	f000 f8de 	bl	8005618 <__malloc_lock>
 800545c:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <_free_r+0x8c>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	b933      	cbnz	r3, 8005470 <_free_r+0x2c>
 8005462:	6063      	str	r3, [r4, #4]
 8005464:	6014      	str	r4, [r2, #0]
 8005466:	4628      	mov	r0, r5
 8005468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546c:	f000 b8da 	b.w	8005624 <__malloc_unlock>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d908      	bls.n	8005486 <_free_r+0x42>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	1821      	adds	r1, r4, r0
 8005478:	428b      	cmp	r3, r1
 800547a:	bf01      	itttt	eq
 800547c:	6819      	ldreq	r1, [r3, #0]
 800547e:	685b      	ldreq	r3, [r3, #4]
 8005480:	1809      	addeq	r1, r1, r0
 8005482:	6021      	streq	r1, [r4, #0]
 8005484:	e7ed      	b.n	8005462 <_free_r+0x1e>
 8005486:	461a      	mov	r2, r3
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	b10b      	cbz	r3, 8005490 <_free_r+0x4c>
 800548c:	42a3      	cmp	r3, r4
 800548e:	d9fa      	bls.n	8005486 <_free_r+0x42>
 8005490:	6811      	ldr	r1, [r2, #0]
 8005492:	1850      	adds	r0, r2, r1
 8005494:	42a0      	cmp	r0, r4
 8005496:	d10b      	bne.n	80054b0 <_free_r+0x6c>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	4401      	add	r1, r0
 800549c:	1850      	adds	r0, r2, r1
 800549e:	4283      	cmp	r3, r0
 80054a0:	6011      	str	r1, [r2, #0]
 80054a2:	d1e0      	bne.n	8005466 <_free_r+0x22>
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4408      	add	r0, r1
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	6053      	str	r3, [r2, #4]
 80054ae:	e7da      	b.n	8005466 <_free_r+0x22>
 80054b0:	d902      	bls.n	80054b8 <_free_r+0x74>
 80054b2:	230c      	movs	r3, #12
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	e7d6      	b.n	8005466 <_free_r+0x22>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	6054      	str	r4, [r2, #4]
 80054cc:	e7cb      	b.n	8005466 <_free_r+0x22>
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	200002c8 	.word	0x200002c8

080054d4 <sbrk_aligned>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005514 <sbrk_aligned+0x40>)
 80054d8:	460c      	mov	r4, r1
 80054da:	6831      	ldr	r1, [r6, #0]
 80054dc:	4605      	mov	r5, r0
 80054de:	b911      	cbnz	r1, 80054e6 <sbrk_aligned+0x12>
 80054e0:	f000 f9d2 	bl	8005888 <_sbrk_r>
 80054e4:	6030      	str	r0, [r6, #0]
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f9cd 	bl	8005888 <_sbrk_r>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d103      	bne.n	80054fa <sbrk_aligned+0x26>
 80054f2:	f04f 34ff 	mov.w	r4, #4294967295
 80054f6:	4620      	mov	r0, r4
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	1cc4      	adds	r4, r0, #3
 80054fc:	f024 0403 	bic.w	r4, r4, #3
 8005500:	42a0      	cmp	r0, r4
 8005502:	d0f8      	beq.n	80054f6 <sbrk_aligned+0x22>
 8005504:	1a21      	subs	r1, r4, r0
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f9be 	bl	8005888 <_sbrk_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d1f2      	bne.n	80054f6 <sbrk_aligned+0x22>
 8005510:	e7ef      	b.n	80054f2 <sbrk_aligned+0x1e>
 8005512:	bf00      	nop
 8005514:	200002c4 	.word	0x200002c4

08005518 <_malloc_r>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	1ccd      	adds	r5, r1, #3
 800551e:	f025 0503 	bic.w	r5, r5, #3
 8005522:	3508      	adds	r5, #8
 8005524:	2d0c      	cmp	r5, #12
 8005526:	bf38      	it	cc
 8005528:	250c      	movcc	r5, #12
 800552a:	2d00      	cmp	r5, #0
 800552c:	4606      	mov	r6, r0
 800552e:	db01      	blt.n	8005534 <_malloc_r+0x1c>
 8005530:	42a9      	cmp	r1, r5
 8005532:	d904      	bls.n	800553e <_malloc_r+0x26>
 8005534:	230c      	movs	r3, #12
 8005536:	6033      	str	r3, [r6, #0]
 8005538:	2000      	movs	r0, #0
 800553a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800553e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005614 <_malloc_r+0xfc>
 8005542:	f000 f869 	bl	8005618 <__malloc_lock>
 8005546:	f8d8 3000 	ldr.w	r3, [r8]
 800554a:	461c      	mov	r4, r3
 800554c:	bb44      	cbnz	r4, 80055a0 <_malloc_r+0x88>
 800554e:	4629      	mov	r1, r5
 8005550:	4630      	mov	r0, r6
 8005552:	f7ff ffbf 	bl	80054d4 <sbrk_aligned>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	4604      	mov	r4, r0
 800555a:	d158      	bne.n	800560e <_malloc_r+0xf6>
 800555c:	f8d8 4000 	ldr.w	r4, [r8]
 8005560:	4627      	mov	r7, r4
 8005562:	2f00      	cmp	r7, #0
 8005564:	d143      	bne.n	80055ee <_malloc_r+0xd6>
 8005566:	2c00      	cmp	r4, #0
 8005568:	d04b      	beq.n	8005602 <_malloc_r+0xea>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	4639      	mov	r1, r7
 800556e:	4630      	mov	r0, r6
 8005570:	eb04 0903 	add.w	r9, r4, r3
 8005574:	f000 f988 	bl	8005888 <_sbrk_r>
 8005578:	4581      	cmp	r9, r0
 800557a:	d142      	bne.n	8005602 <_malloc_r+0xea>
 800557c:	6821      	ldr	r1, [r4, #0]
 800557e:	4630      	mov	r0, r6
 8005580:	1a6d      	subs	r5, r5, r1
 8005582:	4629      	mov	r1, r5
 8005584:	f7ff ffa6 	bl	80054d4 <sbrk_aligned>
 8005588:	3001      	adds	r0, #1
 800558a:	d03a      	beq.n	8005602 <_malloc_r+0xea>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	442b      	add	r3, r5
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	f8d8 3000 	ldr.w	r3, [r8]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	bb62      	cbnz	r2, 80055f4 <_malloc_r+0xdc>
 800559a:	f8c8 7000 	str.w	r7, [r8]
 800559e:	e00f      	b.n	80055c0 <_malloc_r+0xa8>
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	1b52      	subs	r2, r2, r5
 80055a4:	d420      	bmi.n	80055e8 <_malloc_r+0xd0>
 80055a6:	2a0b      	cmp	r2, #11
 80055a8:	d917      	bls.n	80055da <_malloc_r+0xc2>
 80055aa:	1961      	adds	r1, r4, r5
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	6025      	str	r5, [r4, #0]
 80055b0:	bf18      	it	ne
 80055b2:	6059      	strne	r1, [r3, #4]
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	bf08      	it	eq
 80055b8:	f8c8 1000 	streq.w	r1, [r8]
 80055bc:	5162      	str	r2, [r4, r5]
 80055be:	604b      	str	r3, [r1, #4]
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 f82f 	bl	8005624 <__malloc_unlock>
 80055c6:	f104 000b 	add.w	r0, r4, #11
 80055ca:	1d23      	adds	r3, r4, #4
 80055cc:	f020 0007 	bic.w	r0, r0, #7
 80055d0:	1ac2      	subs	r2, r0, r3
 80055d2:	bf1c      	itt	ne
 80055d4:	1a1b      	subne	r3, r3, r0
 80055d6:	50a3      	strne	r3, [r4, r2]
 80055d8:	e7af      	b.n	800553a <_malloc_r+0x22>
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	bf0c      	ite	eq
 80055e0:	f8c8 2000 	streq.w	r2, [r8]
 80055e4:	605a      	strne	r2, [r3, #4]
 80055e6:	e7eb      	b.n	80055c0 <_malloc_r+0xa8>
 80055e8:	4623      	mov	r3, r4
 80055ea:	6864      	ldr	r4, [r4, #4]
 80055ec:	e7ae      	b.n	800554c <_malloc_r+0x34>
 80055ee:	463c      	mov	r4, r7
 80055f0:	687f      	ldr	r7, [r7, #4]
 80055f2:	e7b6      	b.n	8005562 <_malloc_r+0x4a>
 80055f4:	461a      	mov	r2, r3
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d1fb      	bne.n	80055f4 <_malloc_r+0xdc>
 80055fc:	2300      	movs	r3, #0
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e7de      	b.n	80055c0 <_malloc_r+0xa8>
 8005602:	230c      	movs	r3, #12
 8005604:	4630      	mov	r0, r6
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	f000 f80c 	bl	8005624 <__malloc_unlock>
 800560c:	e794      	b.n	8005538 <_malloc_r+0x20>
 800560e:	6005      	str	r5, [r0, #0]
 8005610:	e7d6      	b.n	80055c0 <_malloc_r+0xa8>
 8005612:	bf00      	nop
 8005614:	200002c8 	.word	0x200002c8

08005618 <__malloc_lock>:
 8005618:	4801      	ldr	r0, [pc, #4]	@ (8005620 <__malloc_lock+0x8>)
 800561a:	f7ff bf10 	b.w	800543e <__retarget_lock_acquire_recursive>
 800561e:	bf00      	nop
 8005620:	200002c0 	.word	0x200002c0

08005624 <__malloc_unlock>:
 8005624:	4801      	ldr	r0, [pc, #4]	@ (800562c <__malloc_unlock+0x8>)
 8005626:	f7ff bf0b 	b.w	8005440 <__retarget_lock_release_recursive>
 800562a:	bf00      	nop
 800562c:	200002c0 	.word	0x200002c0

08005630 <__sflush_r>:
 8005630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	0716      	lsls	r6, r2, #28
 8005638:	4605      	mov	r5, r0
 800563a:	460c      	mov	r4, r1
 800563c:	d454      	bmi.n	80056e8 <__sflush_r+0xb8>
 800563e:	684b      	ldr	r3, [r1, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	dc02      	bgt.n	800564a <__sflush_r+0x1a>
 8005644:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd48      	ble.n	80056dc <__sflush_r+0xac>
 800564a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800564c:	2e00      	cmp	r6, #0
 800564e:	d045      	beq.n	80056dc <__sflush_r+0xac>
 8005650:	2300      	movs	r3, #0
 8005652:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005656:	682f      	ldr	r7, [r5, #0]
 8005658:	6a21      	ldr	r1, [r4, #32]
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	d030      	beq.n	80056c0 <__sflush_r+0x90>
 800565e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	0759      	lsls	r1, r3, #29
 8005664:	d505      	bpl.n	8005672 <__sflush_r+0x42>
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800566c:	b10b      	cbz	r3, 8005672 <__sflush_r+0x42>
 800566e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	4628      	mov	r0, r5
 8005676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005678:	6a21      	ldr	r1, [r4, #32]
 800567a:	47b0      	blx	r6
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	d106      	bne.n	8005690 <__sflush_r+0x60>
 8005682:	6829      	ldr	r1, [r5, #0]
 8005684:	291d      	cmp	r1, #29
 8005686:	d82b      	bhi.n	80056e0 <__sflush_r+0xb0>
 8005688:	4a28      	ldr	r2, [pc, #160]	@ (800572c <__sflush_r+0xfc>)
 800568a:	410a      	asrs	r2, r1
 800568c:	07d6      	lsls	r6, r2, #31
 800568e:	d427      	bmi.n	80056e0 <__sflush_r+0xb0>
 8005690:	2200      	movs	r2, #0
 8005692:	6062      	str	r2, [r4, #4]
 8005694:	6922      	ldr	r2, [r4, #16]
 8005696:	04d9      	lsls	r1, r3, #19
 8005698:	6022      	str	r2, [r4, #0]
 800569a:	d504      	bpl.n	80056a6 <__sflush_r+0x76>
 800569c:	1c42      	adds	r2, r0, #1
 800569e:	d101      	bne.n	80056a4 <__sflush_r+0x74>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b903      	cbnz	r3, 80056a6 <__sflush_r+0x76>
 80056a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80056a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056a8:	602f      	str	r7, [r5, #0]
 80056aa:	b1b9      	cbz	r1, 80056dc <__sflush_r+0xac>
 80056ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <__sflush_r+0x8a>
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff fec5 	bl	8005444 <_free_r>
 80056ba:	2300      	movs	r3, #0
 80056bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80056be:	e00d      	b.n	80056dc <__sflush_r+0xac>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b0      	blx	r6
 80056c6:	4602      	mov	r2, r0
 80056c8:	1c50      	adds	r0, r2, #1
 80056ca:	d1c9      	bne.n	8005660 <__sflush_r+0x30>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0c6      	beq.n	8005660 <__sflush_r+0x30>
 80056d2:	2b1d      	cmp	r3, #29
 80056d4:	d001      	beq.n	80056da <__sflush_r+0xaa>
 80056d6:	2b16      	cmp	r3, #22
 80056d8:	d11d      	bne.n	8005716 <__sflush_r+0xe6>
 80056da:	602f      	str	r7, [r5, #0]
 80056dc:	2000      	movs	r0, #0
 80056de:	e021      	b.n	8005724 <__sflush_r+0xf4>
 80056e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056e4:	b21b      	sxth	r3, r3
 80056e6:	e01a      	b.n	800571e <__sflush_r+0xee>
 80056e8:	690f      	ldr	r7, [r1, #16]
 80056ea:	2f00      	cmp	r7, #0
 80056ec:	d0f6      	beq.n	80056dc <__sflush_r+0xac>
 80056ee:	0793      	lsls	r3, r2, #30
 80056f0:	bf18      	it	ne
 80056f2:	2300      	movne	r3, #0
 80056f4:	680e      	ldr	r6, [r1, #0]
 80056f6:	bf08      	it	eq
 80056f8:	694b      	ldreq	r3, [r1, #20]
 80056fa:	1bf6      	subs	r6, r6, r7
 80056fc:	600f      	str	r7, [r1, #0]
 80056fe:	608b      	str	r3, [r1, #8]
 8005700:	2e00      	cmp	r6, #0
 8005702:	ddeb      	ble.n	80056dc <__sflush_r+0xac>
 8005704:	4633      	mov	r3, r6
 8005706:	463a      	mov	r2, r7
 8005708:	4628      	mov	r0, r5
 800570a:	6a21      	ldr	r1, [r4, #32]
 800570c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005710:	47e0      	blx	ip
 8005712:	2800      	cmp	r0, #0
 8005714:	dc07      	bgt.n	8005726 <__sflush_r+0xf6>
 8005716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800571a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800571e:	f04f 30ff 	mov.w	r0, #4294967295
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005726:	4407      	add	r7, r0
 8005728:	1a36      	subs	r6, r6, r0
 800572a:	e7e9      	b.n	8005700 <__sflush_r+0xd0>
 800572c:	dfbffffe 	.word	0xdfbffffe

08005730 <_fflush_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b913      	cbnz	r3, 8005740 <_fflush_r+0x10>
 800573a:	2500      	movs	r5, #0
 800573c:	4628      	mov	r0, r5
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	b118      	cbz	r0, 800574a <_fflush_r+0x1a>
 8005742:	6a03      	ldr	r3, [r0, #32]
 8005744:	b90b      	cbnz	r3, 800574a <_fflush_r+0x1a>
 8005746:	f7ff fc95 	bl	8005074 <__sinit>
 800574a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f3      	beq.n	800573a <_fflush_r+0xa>
 8005752:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005754:	07d0      	lsls	r0, r2, #31
 8005756:	d404      	bmi.n	8005762 <_fflush_r+0x32>
 8005758:	0599      	lsls	r1, r3, #22
 800575a:	d402      	bmi.n	8005762 <_fflush_r+0x32>
 800575c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800575e:	f7ff fe6e 	bl	800543e <__retarget_lock_acquire_recursive>
 8005762:	4628      	mov	r0, r5
 8005764:	4621      	mov	r1, r4
 8005766:	f7ff ff63 	bl	8005630 <__sflush_r>
 800576a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800576c:	4605      	mov	r5, r0
 800576e:	07da      	lsls	r2, r3, #31
 8005770:	d4e4      	bmi.n	800573c <_fflush_r+0xc>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	059b      	lsls	r3, r3, #22
 8005776:	d4e1      	bmi.n	800573c <_fflush_r+0xc>
 8005778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800577a:	f7ff fe61 	bl	8005440 <__retarget_lock_release_recursive>
 800577e:	e7dd      	b.n	800573c <_fflush_r+0xc>

08005780 <__swhatbuf_r>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	460c      	mov	r4, r1
 8005784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005788:	4615      	mov	r5, r2
 800578a:	2900      	cmp	r1, #0
 800578c:	461e      	mov	r6, r3
 800578e:	b096      	sub	sp, #88	@ 0x58
 8005790:	da0c      	bge.n	80057ac <__swhatbuf_r+0x2c>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	2100      	movs	r1, #0
 8005796:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800579a:	bf14      	ite	ne
 800579c:	2340      	movne	r3, #64	@ 0x40
 800579e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057a2:	2000      	movs	r0, #0
 80057a4:	6031      	str	r1, [r6, #0]
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	b016      	add	sp, #88	@ 0x58
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	466a      	mov	r2, sp
 80057ae:	f000 f849 	bl	8005844 <_fstat_r>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	dbed      	blt.n	8005792 <__swhatbuf_r+0x12>
 80057b6:	9901      	ldr	r1, [sp, #4]
 80057b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057c0:	4259      	negs	r1, r3
 80057c2:	4159      	adcs	r1, r3
 80057c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057c8:	e7eb      	b.n	80057a2 <__swhatbuf_r+0x22>

080057ca <__smakebuf_r>:
 80057ca:	898b      	ldrh	r3, [r1, #12]
 80057cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ce:	079d      	lsls	r5, r3, #30
 80057d0:	4606      	mov	r6, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	d507      	bpl.n	80057e6 <__smakebuf_r+0x1c>
 80057d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	2301      	movs	r3, #1
 80057e0:	6163      	str	r3, [r4, #20]
 80057e2:	b003      	add	sp, #12
 80057e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e6:	466a      	mov	r2, sp
 80057e8:	ab01      	add	r3, sp, #4
 80057ea:	f7ff ffc9 	bl	8005780 <__swhatbuf_r>
 80057ee:	9f00      	ldr	r7, [sp, #0]
 80057f0:	4605      	mov	r5, r0
 80057f2:	4639      	mov	r1, r7
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff fe8f 	bl	8005518 <_malloc_r>
 80057fa:	b948      	cbnz	r0, 8005810 <__smakebuf_r+0x46>
 80057fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005800:	059a      	lsls	r2, r3, #22
 8005802:	d4ee      	bmi.n	80057e2 <__smakebuf_r+0x18>
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	e7e2      	b.n	80057d6 <__smakebuf_r+0xc>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	9b01      	ldr	r3, [sp, #4]
 800581e:	6020      	str	r0, [r4, #0]
 8005820:	b15b      	cbz	r3, 800583a <__smakebuf_r+0x70>
 8005822:	4630      	mov	r0, r6
 8005824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005828:	f000 f81e 	bl	8005868 <_isatty_r>
 800582c:	b128      	cbz	r0, 800583a <__smakebuf_r+0x70>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	f023 0303 	bic.w	r3, r3, #3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	431d      	orrs	r5, r3
 800583e:	81a5      	strh	r5, [r4, #12]
 8005840:	e7cf      	b.n	80057e2 <__smakebuf_r+0x18>
	...

08005844 <_fstat_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	2300      	movs	r3, #0
 8005848:	4d06      	ldr	r5, [pc, #24]	@ (8005864 <_fstat_r+0x20>)
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	f7fc f989 	bl	8001b68 <_fstat>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d102      	bne.n	8005860 <_fstat_r+0x1c>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	b103      	cbz	r3, 8005860 <_fstat_r+0x1c>
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	bd38      	pop	{r3, r4, r5, pc}
 8005862:	bf00      	nop
 8005864:	200002bc 	.word	0x200002bc

08005868 <_isatty_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	2300      	movs	r3, #0
 800586c:	4d05      	ldr	r5, [pc, #20]	@ (8005884 <_isatty_r+0x1c>)
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	f7fc f987 	bl	8001b86 <_isatty>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_isatty_r+0x1a>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_isatty_r+0x1a>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	200002bc 	.word	0x200002bc

08005888 <_sbrk_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	2300      	movs	r3, #0
 800588c:	4d05      	ldr	r5, [pc, #20]	@ (80058a4 <_sbrk_r+0x1c>)
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	f7fc f98e 	bl	8001bb4 <_sbrk>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_sbrk_r+0x1a>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_sbrk_r+0x1a>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200002bc 	.word	0x200002bc

080058a8 <atan2>:
 80058a8:	f000 b802 	b.w	80058b0 <__ieee754_atan2>
 80058ac:	0000      	movs	r0, r0
	...

080058b0 <__ieee754_atan2>:
 80058b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	4617      	mov	r7, r2
 80058b6:	4690      	mov	r8, r2
 80058b8:	4699      	mov	r9, r3
 80058ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058be:	427b      	negs	r3, r7
 80058c0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8005a48 <__ieee754_atan2+0x198>
 80058c4:	433b      	orrs	r3, r7
 80058c6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80058ca:	4553      	cmp	r3, sl
 80058cc:	4604      	mov	r4, r0
 80058ce:	460d      	mov	r5, r1
 80058d0:	d809      	bhi.n	80058e6 <__ieee754_atan2+0x36>
 80058d2:	4246      	negs	r6, r0
 80058d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80058d8:	4306      	orrs	r6, r0
 80058da:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80058de:	4556      	cmp	r6, sl
 80058e0:	468e      	mov	lr, r1
 80058e2:	4683      	mov	fp, r0
 80058e4:	d908      	bls.n	80058f8 <__ieee754_atan2+0x48>
 80058e6:	4642      	mov	r2, r8
 80058e8:	464b      	mov	r3, r9
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fc35 	bl	800015c <__adddf3>
 80058f2:	4604      	mov	r4, r0
 80058f4:	460d      	mov	r5, r1
 80058f6:	e016      	b.n	8005926 <__ieee754_atan2+0x76>
 80058f8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80058fc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005900:	433e      	orrs	r6, r7
 8005902:	d103      	bne.n	800590c <__ieee754_atan2+0x5c>
 8005904:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	f000 b8a6 	b.w	8005a58 <atan>
 800590c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005910:	f006 0602 	and.w	r6, r6, #2
 8005914:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005918:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800591c:	d107      	bne.n	800592e <__ieee754_atan2+0x7e>
 800591e:	2e02      	cmp	r6, #2
 8005920:	d064      	beq.n	80059ec <__ieee754_atan2+0x13c>
 8005922:	2e03      	cmp	r6, #3
 8005924:	d066      	beq.n	80059f4 <__ieee754_atan2+0x144>
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592e:	4317      	orrs	r7, r2
 8005930:	d106      	bne.n	8005940 <__ieee754_atan2+0x90>
 8005932:	f1be 0f00 	cmp.w	lr, #0
 8005936:	da68      	bge.n	8005a0a <__ieee754_atan2+0x15a>
 8005938:	a537      	add	r5, pc, #220	@ (adr r5, 8005a18 <__ieee754_atan2+0x168>)
 800593a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800593e:	e7f2      	b.n	8005926 <__ieee754_atan2+0x76>
 8005940:	4552      	cmp	r2, sl
 8005942:	d10f      	bne.n	8005964 <__ieee754_atan2+0xb4>
 8005944:	4293      	cmp	r3, r2
 8005946:	f106 36ff 	add.w	r6, r6, #4294967295
 800594a:	d107      	bne.n	800595c <__ieee754_atan2+0xac>
 800594c:	2e02      	cmp	r6, #2
 800594e:	d855      	bhi.n	80059fc <__ieee754_atan2+0x14c>
 8005950:	4b3e      	ldr	r3, [pc, #248]	@ (8005a4c <__ieee754_atan2+0x19c>)
 8005952:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800595a:	e7e4      	b.n	8005926 <__ieee754_atan2+0x76>
 800595c:	2e02      	cmp	r6, #2
 800595e:	d851      	bhi.n	8005a04 <__ieee754_atan2+0x154>
 8005960:	4b3b      	ldr	r3, [pc, #236]	@ (8005a50 <__ieee754_atan2+0x1a0>)
 8005962:	e7f6      	b.n	8005952 <__ieee754_atan2+0xa2>
 8005964:	4553      	cmp	r3, sl
 8005966:	d0e4      	beq.n	8005932 <__ieee754_atan2+0x82>
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800596e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005972:	da21      	bge.n	80059b8 <__ieee754_atan2+0x108>
 8005974:	f1b9 0f00 	cmp.w	r9, #0
 8005978:	da01      	bge.n	800597e <__ieee754_atan2+0xce>
 800597a:	323c      	adds	r2, #60	@ 0x3c
 800597c:	db20      	blt.n	80059c0 <__ieee754_atan2+0x110>
 800597e:	4642      	mov	r2, r8
 8005980:	464b      	mov	r3, r9
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fa fec9 	bl	800071c <__aeabi_ddiv>
 800598a:	f000 f9f5 	bl	8005d78 <fabs>
 800598e:	f000 f863 	bl	8005a58 <atan>
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	2e01      	cmp	r6, #1
 8005998:	d015      	beq.n	80059c6 <__ieee754_atan2+0x116>
 800599a:	2e02      	cmp	r6, #2
 800599c:	d017      	beq.n	80059ce <__ieee754_atan2+0x11e>
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d0c1      	beq.n	8005926 <__ieee754_atan2+0x76>
 80059a2:	a31f      	add	r3, pc, #124	@ (adr r3, 8005a20 <__ieee754_atan2+0x170>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	4620      	mov	r0, r4
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7fa fbd4 	bl	8000158 <__aeabi_dsub>
 80059b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8005a28 <__ieee754_atan2+0x178>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	e016      	b.n	80059e6 <__ieee754_atan2+0x136>
 80059b8:	a51d      	add	r5, pc, #116	@ (adr r5, 8005a30 <__ieee754_atan2+0x180>)
 80059ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059be:	e7ea      	b.n	8005996 <__ieee754_atan2+0xe6>
 80059c0:	2400      	movs	r4, #0
 80059c2:	2500      	movs	r5, #0
 80059c4:	e7e7      	b.n	8005996 <__ieee754_atan2+0xe6>
 80059c6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80059ca:	461d      	mov	r5, r3
 80059cc:	e7ab      	b.n	8005926 <__ieee754_atan2+0x76>
 80059ce:	a314      	add	r3, pc, #80	@ (adr r3, 8005a20 <__ieee754_atan2+0x170>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7fa fbbe 	bl	8000158 <__aeabi_dsub>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	a111      	add	r1, pc, #68	@ (adr r1, 8005a28 <__ieee754_atan2+0x178>)
 80059e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059e6:	f7fa fbb7 	bl	8000158 <__aeabi_dsub>
 80059ea:	e782      	b.n	80058f2 <__ieee754_atan2+0x42>
 80059ec:	a50e      	add	r5, pc, #56	@ (adr r5, 8005a28 <__ieee754_atan2+0x178>)
 80059ee:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059f2:	e798      	b.n	8005926 <__ieee754_atan2+0x76>
 80059f4:	a510      	add	r5, pc, #64	@ (adr r5, 8005a38 <__ieee754_atan2+0x188>)
 80059f6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059fa:	e794      	b.n	8005926 <__ieee754_atan2+0x76>
 80059fc:	a510      	add	r5, pc, #64	@ (adr r5, 8005a40 <__ieee754_atan2+0x190>)
 80059fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a02:	e790      	b.n	8005926 <__ieee754_atan2+0x76>
 8005a04:	2400      	movs	r4, #0
 8005a06:	2500      	movs	r5, #0
 8005a08:	e78d      	b.n	8005926 <__ieee754_atan2+0x76>
 8005a0a:	a509      	add	r5, pc, #36	@ (adr r5, 8005a30 <__ieee754_atan2+0x180>)
 8005a0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a10:	e789      	b.n	8005926 <__ieee754_atan2+0x76>
 8005a12:	bf00      	nop
 8005a14:	f3af 8000 	nop.w
 8005a18:	54442d18 	.word	0x54442d18
 8005a1c:	bff921fb 	.word	0xbff921fb
 8005a20:	33145c07 	.word	0x33145c07
 8005a24:	3ca1a626 	.word	0x3ca1a626
 8005a28:	54442d18 	.word	0x54442d18
 8005a2c:	400921fb 	.word	0x400921fb
 8005a30:	54442d18 	.word	0x54442d18
 8005a34:	3ff921fb 	.word	0x3ff921fb
 8005a38:	54442d18 	.word	0x54442d18
 8005a3c:	c00921fb 	.word	0xc00921fb
 8005a40:	54442d18 	.word	0x54442d18
 8005a44:	3fe921fb 	.word	0x3fe921fb
 8005a48:	7ff00000 	.word	0x7ff00000
 8005a4c:	08005f00 	.word	0x08005f00
 8005a50:	08005ee8 	.word	0x08005ee8
 8005a54:	00000000 	.word	0x00000000

08005a58 <atan>:
 8005a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	4bbc      	ldr	r3, [pc, #752]	@ (8005d50 <atan+0x2f8>)
 8005a5e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8005a62:	429e      	cmp	r6, r3
 8005a64:	4604      	mov	r4, r0
 8005a66:	460d      	mov	r5, r1
 8005a68:	468b      	mov	fp, r1
 8005a6a:	d918      	bls.n	8005a9e <atan+0x46>
 8005a6c:	4bb9      	ldr	r3, [pc, #740]	@ (8005d54 <atan+0x2fc>)
 8005a6e:	429e      	cmp	r6, r3
 8005a70:	d801      	bhi.n	8005a76 <atan+0x1e>
 8005a72:	d109      	bne.n	8005a88 <atan+0x30>
 8005a74:	b140      	cbz	r0, 8005a88 <atan+0x30>
 8005a76:	4622      	mov	r2, r4
 8005a78:	462b      	mov	r3, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	f7fa fb6d 	bl	800015c <__adddf3>
 8005a82:	4604      	mov	r4, r0
 8005a84:	460d      	mov	r5, r1
 8005a86:	e006      	b.n	8005a96 <atan+0x3e>
 8005a88:	f1bb 0f00 	cmp.w	fp, #0
 8005a8c:	f340 8123 	ble.w	8005cd6 <atan+0x27e>
 8005a90:	a593      	add	r5, pc, #588	@ (adr r5, 8005ce0 <atan+0x288>)
 8005a92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	4bae      	ldr	r3, [pc, #696]	@ (8005d58 <atan+0x300>)
 8005aa0:	429e      	cmp	r6, r3
 8005aa2:	d811      	bhi.n	8005ac8 <atan+0x70>
 8005aa4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005aa8:	429e      	cmp	r6, r3
 8005aaa:	d80a      	bhi.n	8005ac2 <atan+0x6a>
 8005aac:	a38e      	add	r3, pc, #568	@ (adr r3, 8005ce8 <atan+0x290>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f7fa fb53 	bl	800015c <__adddf3>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4ba8      	ldr	r3, [pc, #672]	@ (8005d5c <atan+0x304>)
 8005aba:	f7fa ff95 	bl	80009e8 <__aeabi_dcmpgt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1e9      	bne.n	8005a96 <atan+0x3e>
 8005ac2:	f04f 3aff 	mov.w	sl, #4294967295
 8005ac6:	e027      	b.n	8005b18 <atan+0xc0>
 8005ac8:	f000 f956 	bl	8005d78 <fabs>
 8005acc:	4ba4      	ldr	r3, [pc, #656]	@ (8005d60 <atan+0x308>)
 8005ace:	4604      	mov	r4, r0
 8005ad0:	429e      	cmp	r6, r3
 8005ad2:	460d      	mov	r5, r1
 8005ad4:	f200 80b8 	bhi.w	8005c48 <atan+0x1f0>
 8005ad8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005adc:	429e      	cmp	r6, r3
 8005ade:	f200 809c 	bhi.w	8005c1a <atan+0x1c2>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	f7fa fb39 	bl	800015c <__adddf3>
 8005aea:	2200      	movs	r2, #0
 8005aec:	4b9b      	ldr	r3, [pc, #620]	@ (8005d5c <atan+0x304>)
 8005aee:	f7fa fb33 	bl	8000158 <__aeabi_dsub>
 8005af2:	2200      	movs	r2, #0
 8005af4:	4606      	mov	r6, r0
 8005af6:	460f      	mov	r7, r1
 8005af8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f7fa fb2c 	bl	800015c <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa fe06 	bl	800071c <__aeabi_ddiv>
 8005b10:	f04f 0a00 	mov.w	sl, #0
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	4622      	mov	r2, r4
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fcd2 	bl	80004c8 <__aeabi_dmul>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4680      	mov	r8, r0
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	f7fa fccc 	bl	80004c8 <__aeabi_dmul>
 8005b30:	a36f      	add	r3, pc, #444	@ (adr r3, 8005cf0 <atan+0x298>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	4606      	mov	r6, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	f7fa fcc5 	bl	80004c8 <__aeabi_dmul>
 8005b3e:	a36e      	add	r3, pc, #440	@ (adr r3, 8005cf8 <atan+0x2a0>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fb0a 	bl	800015c <__adddf3>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	f7fa fcbc 	bl	80004c8 <__aeabi_dmul>
 8005b50:	a36b      	add	r3, pc, #428	@ (adr r3, 8005d00 <atan+0x2a8>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fb01 	bl	800015c <__adddf3>
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	f7fa fcb3 	bl	80004c8 <__aeabi_dmul>
 8005b62:	a369      	add	r3, pc, #420	@ (adr r3, 8005d08 <atan+0x2b0>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa faf8 	bl	800015c <__adddf3>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	f7fa fcaa 	bl	80004c8 <__aeabi_dmul>
 8005b74:	a366      	add	r3, pc, #408	@ (adr r3, 8005d10 <atan+0x2b8>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa faef 	bl	800015c <__adddf3>
 8005b7e:	4632      	mov	r2, r6
 8005b80:	463b      	mov	r3, r7
 8005b82:	f7fa fca1 	bl	80004c8 <__aeabi_dmul>
 8005b86:	a364      	add	r3, pc, #400	@ (adr r3, 8005d18 <atan+0x2c0>)
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f7fa fae6 	bl	800015c <__adddf3>
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	f7fa fc98 	bl	80004c8 <__aeabi_dmul>
 8005b98:	a361      	add	r3, pc, #388	@ (adr r3, 8005d20 <atan+0x2c8>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	4689      	mov	r9, r1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fc8f 	bl	80004c8 <__aeabi_dmul>
 8005baa:	a35f      	add	r3, pc, #380	@ (adr r3, 8005d28 <atan+0x2d0>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fad2 	bl	8000158 <__aeabi_dsub>
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	f7fa fc86 	bl	80004c8 <__aeabi_dmul>
 8005bbc:	a35c      	add	r3, pc, #368	@ (adr r3, 8005d30 <atan+0x2d8>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fac9 	bl	8000158 <__aeabi_dsub>
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	463b      	mov	r3, r7
 8005bca:	f7fa fc7d 	bl	80004c8 <__aeabi_dmul>
 8005bce:	a35a      	add	r3, pc, #360	@ (adr r3, 8005d38 <atan+0x2e0>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fac0 	bl	8000158 <__aeabi_dsub>
 8005bd8:	4632      	mov	r2, r6
 8005bda:	463b      	mov	r3, r7
 8005bdc:	f7fa fc74 	bl	80004c8 <__aeabi_dmul>
 8005be0:	a357      	add	r3, pc, #348	@ (adr r3, 8005d40 <atan+0x2e8>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fab7 	bl	8000158 <__aeabi_dsub>
 8005bea:	4632      	mov	r2, r6
 8005bec:	463b      	mov	r3, r7
 8005bee:	f7fa fc6b 	bl	80004c8 <__aeabi_dmul>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	f7fa faaf 	bl	800015c <__adddf3>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fc61 	bl	80004c8 <__aeabi_dmul>
 8005c06:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	d144      	bne.n	8005c9a <atan+0x242>
 8005c10:	4620      	mov	r0, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa faa0 	bl	8000158 <__aeabi_dsub>
 8005c18:	e733      	b.n	8005a82 <atan+0x2a>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d5c <atan+0x304>)
 8005c1e:	f7fa fa9b 	bl	8000158 <__aeabi_dsub>
 8005c22:	2200      	movs	r2, #0
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	4620      	mov	r0, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d5c <atan+0x304>)
 8005c2e:	f7fa fa95 	bl	800015c <__adddf3>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4630      	mov	r0, r6
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7fa fd6f 	bl	800071c <__aeabi_ddiv>
 8005c3e:	f04f 0a01 	mov.w	sl, #1
 8005c42:	4604      	mov	r4, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	e767      	b.n	8005b18 <atan+0xc0>
 8005c48:	4b46      	ldr	r3, [pc, #280]	@ (8005d64 <atan+0x30c>)
 8005c4a:	429e      	cmp	r6, r3
 8005c4c:	d21a      	bcs.n	8005c84 <atan+0x22c>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4b45      	ldr	r3, [pc, #276]	@ (8005d68 <atan+0x310>)
 8005c52:	f7fa fa81 	bl	8000158 <__aeabi_dsub>
 8005c56:	2200      	movs	r2, #0
 8005c58:	4606      	mov	r6, r0
 8005c5a:	460f      	mov	r7, r1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4b41      	ldr	r3, [pc, #260]	@ (8005d68 <atan+0x310>)
 8005c62:	f7fa fc31 	bl	80004c8 <__aeabi_dmul>
 8005c66:	2200      	movs	r2, #0
 8005c68:	4b3c      	ldr	r3, [pc, #240]	@ (8005d5c <atan+0x304>)
 8005c6a:	f7fa fa77 	bl	800015c <__adddf3>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4630      	mov	r0, r6
 8005c74:	4639      	mov	r1, r7
 8005c76:	f7fa fd51 	bl	800071c <__aeabi_ddiv>
 8005c7a:	f04f 0a02 	mov.w	sl, #2
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460d      	mov	r5, r1
 8005c82:	e749      	b.n	8005b18 <atan+0xc0>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	2000      	movs	r0, #0
 8005c8a:	4938      	ldr	r1, [pc, #224]	@ (8005d6c <atan+0x314>)
 8005c8c:	f7fa fd46 	bl	800071c <__aeabi_ddiv>
 8005c90:	f04f 0a03 	mov.w	sl, #3
 8005c94:	4604      	mov	r4, r0
 8005c96:	460d      	mov	r5, r1
 8005c98:	e73e      	b.n	8005b18 <atan+0xc0>
 8005c9a:	4b35      	ldr	r3, [pc, #212]	@ (8005d70 <atan+0x318>)
 8005c9c:	4e35      	ldr	r6, [pc, #212]	@ (8005d74 <atan+0x31c>)
 8005c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fa57 	bl	8000158 <__aeabi_dsub>
 8005caa:	4622      	mov	r2, r4
 8005cac:	462b      	mov	r3, r5
 8005cae:	f7fa fa53 	bl	8000158 <__aeabi_dsub>
 8005cb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005cbe:	f7fa fa4b 	bl	8000158 <__aeabi_dsub>
 8005cc2:	f1bb 0f00 	cmp.w	fp, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	f6bf aee4 	bge.w	8005a96 <atan+0x3e>
 8005cce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	e6df      	b.n	8005a96 <atan+0x3e>
 8005cd6:	a51c      	add	r5, pc, #112	@ (adr r5, 8005d48 <atan+0x2f0>)
 8005cd8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005cdc:	e6db      	b.n	8005a96 <atan+0x3e>
 8005cde:	bf00      	nop
 8005ce0:	54442d18 	.word	0x54442d18
 8005ce4:	3ff921fb 	.word	0x3ff921fb
 8005ce8:	8800759c 	.word	0x8800759c
 8005cec:	7e37e43c 	.word	0x7e37e43c
 8005cf0:	e322da11 	.word	0xe322da11
 8005cf4:	3f90ad3a 	.word	0x3f90ad3a
 8005cf8:	24760deb 	.word	0x24760deb
 8005cfc:	3fa97b4b 	.word	0x3fa97b4b
 8005d00:	a0d03d51 	.word	0xa0d03d51
 8005d04:	3fb10d66 	.word	0x3fb10d66
 8005d08:	c54c206e 	.word	0xc54c206e
 8005d0c:	3fb745cd 	.word	0x3fb745cd
 8005d10:	920083ff 	.word	0x920083ff
 8005d14:	3fc24924 	.word	0x3fc24924
 8005d18:	5555550d 	.word	0x5555550d
 8005d1c:	3fd55555 	.word	0x3fd55555
 8005d20:	2c6a6c2f 	.word	0x2c6a6c2f
 8005d24:	bfa2b444 	.word	0xbfa2b444
 8005d28:	52defd9a 	.word	0x52defd9a
 8005d2c:	3fadde2d 	.word	0x3fadde2d
 8005d30:	af749a6d 	.word	0xaf749a6d
 8005d34:	3fb3b0f2 	.word	0x3fb3b0f2
 8005d38:	fe231671 	.word	0xfe231671
 8005d3c:	3fbc71c6 	.word	0x3fbc71c6
 8005d40:	9998ebc4 	.word	0x9998ebc4
 8005d44:	3fc99999 	.word	0x3fc99999
 8005d48:	54442d18 	.word	0x54442d18
 8005d4c:	bff921fb 	.word	0xbff921fb
 8005d50:	440fffff 	.word	0x440fffff
 8005d54:	7ff00000 	.word	0x7ff00000
 8005d58:	3fdbffff 	.word	0x3fdbffff
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	3ff2ffff 	.word	0x3ff2ffff
 8005d64:	40038000 	.word	0x40038000
 8005d68:	3ff80000 	.word	0x3ff80000
 8005d6c:	bff00000 	.word	0xbff00000
 8005d70:	08005f18 	.word	0x08005f18
 8005d74:	08005f38 	.word	0x08005f38

08005d78 <fabs>:
 8005d78:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4770      	bx	lr

08005d80 <_init>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr

08005d8c <_fini>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr
